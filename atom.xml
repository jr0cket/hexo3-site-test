<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[jr0cket]]></title>
  <subtitle><![CDATA[community developer]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://jr0cket.co.uk/"/>
  <updated>2015-03-18T15:08:46.204Z</updated>
  <id>http://jr0cket.co.uk/</id>
  
  <author>
    <name><![CDATA[John Stevenson]]></name>
    <email><![CDATA[john@jr0cket.co.uk]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Clean Git Commits With Emacs Magit]]></title>
    <link href="http://jr0cket.co.uk/2015/02/clean-git-commits-with-emacs-magit.html"/>
    <id>http://jr0cket.co.uk/2015/02/clean-git-commits-with-emacs-magit.html</id>
    <published>2015-02-09T10:28:30.000Z</published>
    <updated>2015-03-18T15:08:46.204Z</updated>
    <content type="html"><![CDATA[<img src="/images/emacs-logo.png" class="img-thumbnail">
<p>  An effective way to have a clean and valuable commit history is to create the smallest valuable commit each time, with a descriptive commit message.  This sounds obvious, but when you are in the midst of work things can get messy.  Using Emacs Magit you can be highly selective as to what changes you include in each commit, down to individual characters.</p>
<blockquote>
<p>This follows on from <a href="/2014/07/staging-patches-with-git-for-cleaner-commits.html">staging patches for cleaner commits</a> with the command line, <code>git add -p</code>.  Also see how to <a href="/2012/12/driving-git-with-emacs-pure-magic-with.html.html">drive Git with Emacs and Magit</a> for more background.</p>
</blockquote>
<a id="more"></a>
<h2 id="Emacs_Magit">Emacs Magit</h2><p>  Magit is an amazing tool for managing Git repositories, providing all the standard features of a graphical tool.  It is part of the <a href="https://github.com/overtone/emacs-live" target="_blank" rel="external">Emacs Live</a> and available via the useual Emacs package managers.</p>
<p>  To run magit, I typically open a file under version control and hit <code>C-x g</code> or <code>M-x magit-status</code>.</p>
<p>  Magit keeps track of the changes in your project and the status can be updated using <code>g</code> in the magit buffer.</p>
<p>  To stage all the changes in a file you can move the cursor to the unstaged file you want to add and press <code>s</code>, or stage all changes using <code>S</code>.</p>
<p>  To unstage a file, again move the cursor against its name and press <code>u</code> or unstage all files added using <code>U</code>.</p>
<p><img src="/images/emacs-magit-status.png" alt="Emacs Magit - status buffer"></p>
<h2 id="Selective_commits_using_hunks">Selective commits using hunks</h2><p>  Its easy to be more selective than just staging everything in a file.  Move the cursor against the filename and press <code>tab</code> to show the <em>hunks</em> within a file.</p>
<blockquote>
<p>A <em>hunk</em> is the name Git gives to continuous lines that contain changes in a file.  So if all your changes are made line after line, there will be one <em>hunk</em>.  If you have unchanged lines between the lines you have changed, you will have more than one <em>hunk</em>.</p>
</blockquote>
<p>  Move the cusor to the hunk you want to add and pres <code>s</code> to stage that hunk.  Using <code>n</code> &amp; <code>p</code> to move to the next or previous hunks if they exist.</p>
<p>  Sometimes Git organised the changed lines into hunks that have too many changes in, or to few changes.  You can change hunk sizes using  <code>+</code> or <code>-</code> to expand or shrink the hunk (shrinking is essentially splitting a hunk where possible).</p>
<blockquote>
<p>It may not always be possible to split a hunk enough for your commit.</p>
</blockquote>
<h2 id="Selective_commits_using_regions">Selective commits using regions</h2><p>  If you really need to refine what you are committing, you can select a region to stage by selecting characters and lines.</p>
<p>  Open a file that has unstaged changes using <code>tab</code></p>
<p>  Select a region of the text using <code>C-SPC</code> or <code>C-@</code></p>
<p>  Hit <code>s</code> to stage the selected region</p>
<p><img src="/images/emacs-magit-staging-hunk-select-region-to-stage.png" alt="Emacs Magit - select region to stage"></p>
<blockquote>
<p>Make sure you have not shrunk any hunks, or the region selection may not work.</p>
</blockquote>
<p>  You can check the correct text has been added by viewing the newly added entry in <em>Staged changes</em> section.</p>
<p><img src="/images/emacs-magit-staging-hunk-select-region-staged.png" alt=""></p>
<h2 id="Summary">Summary</h2><p>  So Emacs Magit give a really easy way to stage changes in the size of commit that is most valuable.  So take a few seconds longer to think about what you are committing and how useful it will be to others and yourself during the life of the project.</p>
<p>  You dont want to be spending too much time unpicking commits to find a bug and applying a patch.</p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="/images/emacs-logo.png" class="img-thumbnail">
<p>  An effective way to have a clean and valuable commit history is to create the smallest valuable commit each time, with a descriptive commit message.  This sounds obvious, but when you are in the midst of work things can get messy.  Using Emacs Magit you can be highly selective as to what changes you include in each commit, down to individual characters.</p>
<blockquote>
<p>This follows on from <a href="/2014/07/staging-patches-with-git-for-cleaner-commits.html">staging patches for cleaner commits</a> with the command line, <code>git add -p</code>.  Also see how to <a href="/2012/12/driving-git-with-emacs-pure-magic-with.html.html">drive Git with Emacs and Magit</a> for more background.</p>
</blockquote>]]>
    
    </summary>
    
      <category term="emacs" scheme="http://jr0cket.co.uk/tags/emacs/"/>
    
      <category term="git" scheme="http://jr0cket.co.uk/tags/git/"/>
    
      <category term="magit" scheme="http://jr0cket.co.uk/tags/magit/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Custom Powerline Theme for Emacs Modeline]]></title>
    <link href="http://jr0cket.co.uk/2015/01/custom-powerline-theme-for-Emacs-modeline.html"/>
    <id>http://jr0cket.co.uk/2015/01/custom-powerline-theme-for-Emacs-modeline.html</id>
    <published>2015-01-30T22:49:53.000Z</published>
    <updated>2015-03-18T15:08:46.204Z</updated>
    <content type="html"><![CDATA[<img src="/images/emacs-logo.png" class="img-thumbnail">
<p>  Continuing my modeline customisation with <a href="https://github.com/milkypostman/powerline" target="_blank" rel="external">powerline</a>, I wanted to add colour to match the Cyberpunk theme of <a href="http://overtone.github.io/emacs-live/" target="_blank" rel="external">Emacs Live</a>.  To do this I copied the default them and custmised it, adding colours and chaning the style of seperatr.  Here is how I customised the powerline code to make my own theme.</p>
<blockquote>
<p>See how I previously <a href="http://jr0cket.co.uk/2015/01/tweaking-emacs-modeline-with-powerline.html" target="_blank" rel="external">tweaked Emacs modeline with powerline</a>, as this article carries on from that.  My modeline also includes an earlier <a href="http://jr0cket.co.uk/2013/01/tweeking-emacs-modeline-for-clojure.html.html" target="_blank" rel="external">tweak for the minor modes</a>.</p>
</blockquote>
<a id="more"></a>
<h2 id="Modeline_seperators_as_waves">Modeline seperators as waves</h2><p><img src="/images/emacs-emacs-live-powerline-theme-default-modeline.png" alt="Emacs - Powerline default arrow seperators"></p>
<p>  Although the arrows are nice way to seperate the different parts of the modeline, I tried out the different styles.  My favorite was the <code>wave</code> style.</p>
<p>  To change the style, I edited the <code>lib/powerline.el</code> file and change the <code>powerline-default-separator</code> to the value to <code>wave</code>.  The choice list shows you all the styles of seperator available. </p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(defcustom powerline-default-separator &#39;wave&#10;  &#34;The separator to use for the default theme.&#10;  :group &#39;powerline&#10;  :type &#39;(choice (const alternate)&#10;                 (const arrow)&#10;                 (const arrow-fade)&#10;                 (const bar)&#10;                 (const box)&#10;                 (const brace)&#10;                 (const butt)&#10;                 (const chamfer)&#10;                 (const contour)&#10;                 (const curve)&#10;                 (const rounded)&#10;                 (const roundstub)&#10;                 (const slant)&#10;                 (const wave)&#10;                 (const zigzag)&#10;                 (const nil)))</span><br></pre></td></tr></table></figure>
<p><img src="/images/emacs-emacs-live-powerline-theme-default-modeline-wave.png" alt="Emacs - Powerline wave seperators"></p>
<blockquote>
<p>I restarted Emacs each time I changed the seperator style for it to take effect. I am not sure how to update the style without a restart.</p>
</blockquote>
<h2 id="Creating_my_own_theme_for_Emacs_Powerline">Creating my own theme for Emacs Powerline</h2><p>  I wanted to change the colours of the modeline to make it more personal to me and also help it stand out between all the text of the buffers.</p>
<p>  Rather than mess up the default theme I simply edited the <code>lib/powerline/powerline-theme.el</code> file and copied the default theme completely, called the new theme <code>powerline-default-theme</code>.  This allowed me to experiment whilst still having a working reference theme to fall back on.  </p>
<p>  To use my new theme,  I edited the configuration file <code>~/.live-packs/jr0cket-pack/config/powerline.el</code> and changed the line defining the theme</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(require &#39;powerline)&#10;(powerline-jr0cket-theme)</span><br></pre></td></tr></table></figure>
<h3 id="Removing_modeline_information_I’m_not_interested_in">Removing modeline information I’m not interested in</h3><p>  There are some of the elements I was not interested in, such as the size of buffer and mule-info. So I edited my jr0cket theme and removed the lines</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(powerline-buffer-size nil &#39;l) &#10;(powerline-raw mode-line-mule-info nil &#39;l)</span><br></pre></td></tr></table></figure>
<h3 id="Removing_extra_spacing">Removing extra spacing</h3><p>  The default theme adds padding between some elements by adding a space character. </p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(powerline-raw &#34; &#34;)</span><br></pre></td></tr></table></figure>
<p>   There was aso padding around some elements on the modeline, specifically the line <code>l</code> &amp; column <code>c</code> numbers and the percentage of buffer above the currently visible text <code>p</code>.  The default theme adds numbers in front of these caracters adds padding, which I didnt feel was needed so I deleted those numbers.      </p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(powerline-raw &#34;%l&#34; face1 &#39;l)&#10;(powerline-raw &#34;%c&#34; face1 &#39;r)&#10;(powerline-raw &#34;%p&#34; nil &#39;r)</span><br></pre></td></tr></table></figure>
<h2 id="Changing_Colours_in_the_modeline**">Changing Colours in the modeline**</h2><p>  The powerline default theme is very grey, so I wanted to add some colours that would work with the Emacs Live Cyberpunk theme.  Changing colours is done in the <code>lib/powerline/powerline.el</code> file.</p>
<p>  I changed the text colour using <code>:foreground</code>, the background colour with <code>:background</code>and made the text bold using <code>:weight bold</code>.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(defface powerline-active1 &#39;((t (:foreground &#34;#d0d0f0&#34; :background &#34;purple&#34; :inherit mode-line)))&#10;  &#34;Powerline face 1.&#34;&#10;  :group &#39;powerline)&#10;&#10;(defface powerline-active2 &#39;((t (:foreground &#34;#63b132&#34; :weight bold :background &#34;black&#34; :inherit mode-line)))&#10;  &#34;Powerline face 2.&#34;&#10;  :group &#39;powerline)</span><br></pre></td></tr></table></figure>
<h2 id="Adding_an_extra_face_for_the_buffer_name">Adding an extra face for the buffer name</h2><p>  The defalt powerline theme has two faces (styles) for inactive  and active windows - <code>powerline-active1</code>, <code>powerline-active2</code>, <code>powerline-inactive1</code> &amp; <code>powerline-inactive2</code>  Different parts of the modeline are assigned to one of the faces and therefore display in different styles.  There are a few parts of the modeline, like the buffer name, that are not assinged to a face and display in the colour of the Emacs theme (Emacs Live)  </p>
<p>  I wanted to change the style of the buffer name, so rather than change the Emacs theme I added a third face to the <code>lib/powerline/powerline-theme.el</code>.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(defface powerline-active0 &#39;((t (:foreground &#34;deep pink&#34; :weight bold :background &#34;black&#34; :inherit mode-line)))&#10;  &#34;Powerline face 0.&#34;&#10;  :group &#39;powerline)&#10;&#10;(defface powerline-inactive0&#10;  &#39;((t (:background &#34;black&#34; :weight bold :inherit mode-line-inactive)))&#10;  &#34;Powerline face 0.&#34;&#10;  :group &#39;powerline)</span><br></pre></td></tr></table></figure>
<p> I then tried out different colours for the buffer name and settled on the reverse of face0, so updated the <code>lib/powerline/powerline.el</code> file by adding an <code>active0</code> and <code>inactive0</code> configuration as follows:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(defface powerline-active0 &#39;((t (:foreground &#34;purple&#34; :weight bold :background &#34;#d0d0f0&#34; :inherit mode-line)))&#10;  &#34;Powerline face 0.&#34;&#10;  :group &#39;powerline)&#10;&#10;(defface powerline-inactive0&#10;  &#39;((t (:background &#34;black&#34; :weight bold :inherit mode-line-inactive)))&#10;  &#34;Powerline face 0.&#34;&#10;  :group &#39;powerline)&#10;&#10;``` &#10;  The final active modeline with my theme and colours applied looks very nice and very useful to me&#10;&#10;![Emacs - Powerline jr0cket theme fullscreen](/images/emacs-emacs-live-powerline-theme-jr0cket-modeline.png)&#10;&#10;  Here is the overal view of Emacs with the jr0cket theme and colours applied.&#10;&#10;![Emacs - Powerline jr0cket theme fullscreen](/images/emacs-emacs-live-powerline-theme-jr0cket-fullscreen.png)&#10;&#10;&#10;## Final version of the jr0cket powerline theme&#10;&#10;  Here is the complete code for the `powerline-jr0cket-theme`&#10;&#10;``` elisp &#10;    (defun powerline-jr0cket-theme ()&#10;      &#34;Customisation of the default powerline theme&#34;&#10;      (interactive)&#10;      (setq-default mode-line-format&#10;        &#39;(&#34;%e&#34;&#10;          (:eval&#10;           (let* (&#10;             (active (powerline-selected-window-active))&#10;             (mode-line (if active &#39;mode-line &#39;mode-line-inactive))&#10;             (face0 (if active &#39;powerline-active0 &#39;powerline-inactive0))&#10;             (face1 (if active &#39;powerline-active1 &#39;powerline-inactive1))&#10;             (face2 (if active &#39;powerline-active2 &#39;powerline-inactive2))&#10;             (separator-left&#10;              (intern&#10;               (format &#34;powerline-%s-%s&#34;&#10;                       powerline-default-separator&#10;                       (car powerline-default-separator-dir))))&#10;             (separator-right&#10;              (intern (format &#34;powerline-%s-%s&#34;&#10;                              powerline-default-separator&#10;                              (cdr powerline-default-separator-dir))))&#10;             (lhs (list (powerline-raw &#34;%*&#34; face0 &#39;l)&#10;                        (powerline-buffer-id face0 &#39;l)&#10;                        (when (and (boundp &#39;which-func-mode) which-func-mode)&#10;                          (powerline-raw which-func-format face0 &#39;l))&#10;                        (powerline-narrow face0 &#39;l)&#10;                        (funcall separator-left face0 face1)&#10;                        (when (boundp &#39;erc-modified-channels-object)&#10;                          (powerline-raw erc-modified-channels-object face1 &#39;l))&#10;                            (powerline-major-mode face1 &#39;l)&#10;                            (powerline-process face1)&#10;                            (powerline-raw &#34; &#34; face1 &#39;r)&#10;                            (powerline-minor-modes face1 &#39;l)&#10;                            (powerline-narrow face1)&#10;                            (funcall separator-left face1 face2)&#10;                            (powerline-vc face2 &#39;r)))&#10;             (rhs (list (powerline-raw global-mode-string face2 &#39;r)&#10;                        (funcall separator-right face2 face1)&#10;                        (powerline-raw &#34;%l&#34; face1)&#10;                        (powerline-raw &#34;:&#34; face1)&#10;                        (powerline-raw &#34;%c&#34; face1)&#10;                        (funcall separator-right face1 face0)&#10;                        (powerline-raw &#34;%p&#34; face0)&#10;                        (powerline-hud face2 face1))))&#10;             (concat (powerline-render lhs)&#10;                     (powerline-fill face2 (powerline-width rhs))&#10;                     (powerline-render rhs)))))))</span><br></pre></td></tr></table></figure>
<h1 id="Summary">Summary</h1><p>  <a href="https://github.com/milkypostman/powerline" target="_blank" rel="external">Powerline</a> is a really nice way to add that extra touch to the Emacs experience.  Its also pretty easy to configure to give you your own personalised look to the Emacs modeline.  Let me know if you have any interesting customisations to your Emacs setup.</p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="/images/emacs-logo.png" class="img-thumbnail">
<p>  Continuing my modeline customisation with <a href="https://github.com/milkypostman/powerline">powerline</a>, I wanted to add colour to match the Cyberpunk theme of <a href="http://overtone.github.io/emacs-live/">Emacs Live</a>.  To do this I copied the default them and custmised it, adding colours and chaning the style of seperatr.  Here is how I customised the powerline code to make my own theme.</p>
<blockquote>
<p>See how I previously <a href="http://jr0cket.co.uk/2015/01/tweaking-emacs-modeline-with-powerline.html">tweaked Emacs modeline with powerline</a>, as this article carries on from that.  My modeline also includes an earlier <a href="http://jr0cket.co.uk/2013/01/tweeking-emacs-modeline-for-clojure.html.html">tweak for the minor modes</a>.</p>
</blockquote>]]>
    
    </summary>
    
      <category term="emacs" scheme="http://jr0cket.co.uk/tags/emacs/"/>
    
      <category term="dev-docs" scheme="http://jr0cket.co.uk/categories/dev-docs/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Tweaking Emacs Modeline With Powerline]]></title>
    <link href="http://jr0cket.co.uk/2015/01/tweaking-emacs-modeline-with-powerline.html"/>
    <id>http://jr0cket.co.uk/2015/01/tweaking-emacs-modeline-with-powerline.html</id>
    <published>2015-01-28T22:59:23.000Z</published>
    <updated>2015-03-18T15:08:46.212Z</updated>
    <content type="html"><![CDATA[<img src="/images/emacs-logo.png" class="img-thumbnail">
<p>  It important to enjoy the development tools you use day after day, so after seeing some of the great looking Emacs modeline customisations, I couldnt resist pimping my modeline (again).</p>
<p>  Previously I <a href="http://jr0cket.co.uk/2013/01/tweeking-emacs-modeline-for-clojure.html.html" target="_blank" rel="external">tweaked the modeline for Clojure development</a>, this time I’ve added styling to the modeline using <a href="https://github.com/milkypostman/powerline" target="_blank" rel="external">powerline</a>.  I aim to create a modeline worthy of the rest of the <a href="http://overtone.github.io/emacs-live/" target="_blank" rel="external">Emacs Live</a> experience.</p>
<a id="more"></a>
<blockquote>
<p>There are several other versions of powerline listed on the EmacsWiki <a href="http://www.emacswiki.org/emacs/PowerLine" target="_blank" rel="external">powerline</a> page.  </p>
</blockquote>
<h2 id="Installing_powerline">Installing powerline</h2><p>  I use Emacs Live as my base configuration for Emacs, so I added the powerline project to my personal configuration <code>~/.live-packs/jr0cket-pack/</code></p>
<p>  First I cloned the powerline Gitub repository into the <code>lib</code> folder of my live pack </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.live-packs/jr0cket-pack/lib</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/milkypostman/powerline</span><br></pre></td></tr></table></figure>
<p>  Then I created a configuration file for the powerline project</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">emacslcient ~/.live-packs/jr0cket-pack/config/powerline.el &amp;</span><br></pre></td></tr></table></figure>
<p>   Adding the following code to the powerline config file loads the files in <code>lib/powerline</code>.  I also state which theme I want to use.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(require &#39;powerline)&#10;(powerline-default-theme)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>There are several other themes avaiable in powerline, including <code>(powerline-center-theme)</code> and <code>(powerline-nano-theme)</code></p>
</blockquote>
<p>  Finally, I added a function to load the powerline library at startup in my Emacs Live live-pack init.el file, <code>~/.live-packs/jr0cket-pack/init.el</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(live-load-config-file &#34;powerline.el&#34;)</span><br></pre></td></tr></table></figure>
<p>  I restarted Emacs and was presented with my new modeline</p>
<p><img src="/images/emacs-emacs-live-powerline-theme-default.png" alt="Emacs powerline - default theme with my Clojure mode tweaks"></p>
<p>  In full screen with several windows open you can see the difference between active and inactive windows.</p>
<p><img src="/images/emacs-emacs-live-powerline-theme-default-fullscreen.png" alt="Emacs powerline - default theme with active and inactive windows"></p>
<h2 id="Summary">Summary</h2><p>  The powerline project is an easy way to tweak your modeline into something more stylised.  Next I want to create my own powerline theme to have my own design touches and tailor it more to my needs.</p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="/images/emacs-logo.png" class="img-thumbnail">
<p>  It important to enjoy the development tools you use day after day, so after seeing some of the great looking Emacs modeline customisations, I couldnt resist pimping my modeline (again).</p>
<p>  Previously I <a href="http://jr0cket.co.uk/2013/01/tweeking-emacs-modeline-for-clojure.html.html">tweaked the modeline for Clojure development</a>, this time I’ve added styling to the modeline using <a href="https://github.com/milkypostman/powerline">powerline</a>.  I aim to create a modeline worthy of the rest of the <a href="http://overtone.github.io/emacs-live/">Emacs Live</a> experience.</p>]]>
    
    </summary>
    
      <category term="emacs" scheme="http://jr0cket.co.uk/tags/emacs/"/>
    
      <category term="emacslive" scheme="http://jr0cket.co.uk/tags/emacslive/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Getting Started With Cider Repl for Clojure on Emacs Live]]></title>
    <link href="http://jr0cket.co.uk/2015/01/getting-started-with-cider-repl-for-clojure-on-emacs-live.html"/>
    <id>http://jr0cket.co.uk/2015/01/getting-started-with-cider-repl-for-clojure-on-emacs-live.html</id>
    <published>2015-01-21T11:07:17.000Z</published>
    <updated>2015-03-18T15:08:46.208Z</updated>
    <content type="html"><![CDATA[<img src="/images/clojure-cider-logo.png" class="img-thumbnail">
<p>  <a href="https://github.com/clojure-emacs/cider" target="_blank" rel="external">CIDER</a> is the Clojure IDE and REPL for Emacs.  It is built on top of nREPL, the Clojure networked REPL server and replaces the direct use of nREPL in Emacs.</p>
<p>  In this article we are using CIDER that is packaged in Emacs Live, a very complete, well organised and extensible configuration for Clojure and many other things in Emacs.</p>
<a id="more"></a>
<p>  CIDER includes the standard interactive code evaluation developers are used to.  There are also many other features that I want to explore further, including error and warning highlighting, human-friendly stacktraces, smart code completion, definition &amp; documentation lookup, value inspector &amp; function tracing, interactive macroexpansion, <a href="http://conj.io/" target="_blank" rel="external">Grimoire</a> integration, <code>clojure.test</code> integration, classpath browser, namespace browser, nREPL session management, scratchpad, minibuffer code evaluation, integration with <a href="http://company-mode.github.io/" target="_blank" rel="external">company-mode</a> and <a href="https://github.com/clojure-emacs/ac-cider" target="_blank" rel="external">auto-complete-mode</a></p>
<h2 id="Emacs_Live">Emacs Live</h2><p>  CIDER is now the default in the latest version of <a href="http://overtone.github.io/emacs-live/" target="_blank" rel="external">Emacs Live</a>, so there no set up to do if you already have the latest version.  If you need to update, or are not sure you are on the latest version of Emacs live, simply run a <em>git pull</em> from within <code>~/.emacs.d</code> directory:</p>
<pre><code><span class="title">git</span> pull origin master
</code></pre><p>  If you dont have Emacs Live, you can install it from the <a href="https://github.com/overtone/emacs-live" target="_blank" rel="external">Emacs Live Github repository</a> and either clone the repository into <code>~/.emacs.d</code> (moving or deleting any existing directory) or preferably use the install script that also sets up a <code>~/.live-packs</code> extension directory.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">    bash &lt;(curl -fksSL https://raw.github.com/overtone/emacs-live/master/installer/install-emacs-live.sh)</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line"><span class="comment">## Leiningen configuration</span></span><br><span class="line"></span><br><span class="line">  CIDER requires the use of [nREPL middleware](https://github.com/clojure-emacs/cider-nrepl) between Emacs and Leiningen.  For example, when you run CIDER `M-x cider-jack-in` <span class="keyword">in</span> Emacs it calls Leiningen to start the REPL.  So you need to add a plugin to your Leiningen configuration.</span><br><span class="line">  </span><br><span class="line">  Edit the `~/.lein/plugings.clj` file (or create this file <span class="keyword">if</span> it does not exist yet) and add the `[cider/cider-nrepl <span class="string">"0.8.1"</span>]` plugin.  The `~/.lein/plugings.clj` should look similar to this:</span><br><span class="line">  </span><br><span class="line">```clojure</span><br><span class="line">    &#123;:user &#123;:plugins [[lein-pprint <span class="string">"1.1.1"</span>]</span><br><span class="line">                      [cider/cider-nrepl <span class="string">"0.8.1"</span>]]&#125;&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>You can find the available versions of the <a href="https://clojars.org/cider/cider-nrepl" target="_blank" rel="external">cider-nrepl plugin on Clojars.org</a>.  The plugin version should be the same version of CIDER you are using in your Emacs configuration, which at the time of writing was 0.8.1.</p>
</blockquote>
<h2 id="Running_CIDER_in_Emacs">Running CIDER in Emacs</h2><p>  Either create a new Clojure project using <code>lein new my-project-name</code> or open an existing project in Emacs (either the <code>project.clj</code> file or a <code>.clj</code> file from <code>src/my-project-name/</code>).</p>
<p>  With your cursor in the Clojure file buffer, run CIDER using the keybinding <code>C-c M-j</code> or the emacs command </p>
<pre><code><span class="keyword">M</span>-x cider-jack-<span class="keyword">in</span>
</code></pre><p><img src="/images/emacs-cider-started.png" alt="Emacs Live - CIDER jack in - C-c M-j"></p>
<blockquote>
<p>Alternatively, you could run a REPL using <code>lein repl</code> on the command line and connect to that REPL using <code>C-c M-c</code> or <code>M-x cider</code>.  You will be prompted for the connection details of the running repl, ie. host, port.</p>
</blockquote>
<h2 id="Using_CIDER_in_Emacs">Using CIDER in Emacs</h2><p>  There are a number of <a href="https://github.com/clojure-emacs/cider#keyboard-shortcuts" target="_blank" rel="external">Cider keyboard shortcuts (keybindings)</a> already defined, here are some of the most common ones I use:</p>
<ul>
<li><code>C-c C-e</code> - evaluates the form immediately before the cursor and shows the result in the minibuffer.  So place your cursor right after the closing parentheses <code>)</code> of your expression, hit the keybinding and see the minibuffer for the result.</li>
</ul>
<p><img src="/images/emacs-cider-eval-expression-minibuffer.png" alt="Emacs Live - CIDER eval form with result in minibuffer - C-c C-e"></p>
<ul>
<li><code>C-c M-e</code> - the same as above except the result is sent to the REPL</li>
</ul>
<p><img src="/images/emacs-cider-eval-expression-repl.png" alt="Emacs Live - CIDER eval form with result in the REPL - C-c M-e"></p>
<ul>
<li><p><code>C-c C-k</code> - evaluate the whole buffer.  So with the cursor in a Clojure source file, all the forms / expressions are evaluate as if the code was loaded in from scratch.</p>
</li>
<li><p><code>C-c C-d d</code> - show the documentaion as you would with <code>(doc function-name)</code>.  Place the cursor over a function name, hit the keybinding and see the documenation for that funtion.  This also works inside the REPL buffer, so no need to use <code>(doc)</code>, which is not loaded by default. </p>
</li>
<li><p><code>C-c M-n</code> - switch to namespace of current Clojure buffer.  So with the cursor in a Clojure source file, hit the keybinding and your REPL buffer will now be in the namespace for that Clojure code.</p>
</li>
</ul>
<p><img src="/images/emacs-cider-namespace-change.png" alt="Emacs Live - CIDER change to namespace of current Clojure code - C-c M-n"></p>
<blockquote>
<p>Changing into a namespace does not automatically evaluate the code in that namespace, so evaluate the whole buffer <code>C-c C-k</code> or evaluate specific expressions (forms) <code>C-c M-e</code>.  Once evaluated, you can evaluate that code in the REPL.</p>
</blockquote>
<ul>
<li><p><code>M-&gt;</code> or <code>M-x cider-jump-to-var</code> prompts you for a var, a function <code>(defn)</code> or symbol name <code>(def)</code> and moves the cursor to its definition.  If the cusor is already on a matching name the the cursor jumps straight to that definition.</p>
</li>
<li><p><code>C-c C-q</code> or <code>M-x cider-quit</code> - close the REPL and its associated buffer.</p>
<p>There are many more things you can do within Clojure files and the REPL, so take a look at the <a href="https://github.com/clojure-emacs/cider#keyboard-shortcuts" target="_blank" rel="external">Cider keyboard shortcuts (keybindings)</a> once you have the basics mastered.</p>
</li>
</ul>
<h2 id="Further_reading">Further reading</h2><p>  Some further reading around CIDER:</p>
<ul>
<li><a href="https://github.com/clojure-emacs/cider#keyboard-shortcuts" target="_blank" rel="external">Cider keyboard shortcuts (keybindings)</a></li>
<li><p><a href="http://blog.jenkster.com/2013/12/a-cider-excursion.html" target="_blank" rel="external">Clojure on Emacs - A CIDER workflow hack</a> - Kris Jenkins</p>
<p>Have fun and be productive with CIDER, Emacs and Clojure.  If you have any other suggestions on getting them most out of these tools, please let me know.</p>
</li>
</ul>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="/images/clojure-cider-logo.png" class="img-thumbnail">
<p>  <a href="https://github.com/clojure-emacs/cider">CIDER</a> is the Clojure IDE and REPL for Emacs.  It is built on top of nREPL, the Clojure networked REPL server and replaces the direct use of nREPL in Emacs.</p>
<p>  In this article we are using CIDER that is packaged in Emacs Live, a very complete, well organised and extensible configuration for Clojure and many other things in Emacs.</p>]]>
    
    </summary>
    
      <category term="clojure" scheme="http://jr0cket.co.uk/tags/clojure/"/>
    
      <category term="emacs" scheme="http://jr0cket.co.uk/tags/emacs/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Tweaking Light Table for a Great Clojure Experience]]></title>
    <link href="http://jr0cket.co.uk/2015/01/tweaking-light-table-for-a-great-clojure-experience.html"/>
    <id>http://jr0cket.co.uk/2015/01/tweaking-light-table-for-a-great-clojure-experience.html</id>
    <published>2015-01-03T22:27:09.000Z</published>
    <updated>2015-03-18T15:08:46.212Z</updated>
    <content type="html"><![CDATA[<img src="/images/lighttable-logo.png" class="img-thumbnail">
<p>  <a href="http://lighttable.com" target="_blank" rel="external">Light Table</a> provides a great development environment for Clojure, ClojureScript &amp; JavaScript.  With a few tweaks and some of the many plugins you can make Light Table do even more.  Here are a few of the tweaks and plugins I use for my development with Light Table.</p>
<a id="more"></a>
<h4 id="Ubuntu_Fonts">Ubuntu Fonts</h4><p>  The <a href="http://font.ubuntu.com/" target="_blank" rel="external">Ubuntu fonts</a> are very clear and easy on the eyes, so are great for coding with.  I use the Ubuntu Mono font for all my editors by adding the following line to my user behaviors</p>
<p>  Open the command panel in Light Table with <code>Ctrl-Space</code> and type <code>user behaviors</code>.  Then edit the file that opens and add the following line</p>
<figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="collection">[<span class="attribute">:editor</span> <span class="attribute">:lt.objs.style/font-settings</span> <span class="string">"Ubuntu Mono"</span> <span class="number">16</span> <span class="number">1.2</span>]</span></span><br></pre></td></tr></table></figure>
<p>  When I run workshops or other demos I increase the font size to 20, to make the code easier to read from a distance.</p>
<figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="collection">[<span class="attribute">:editor</span> <span class="attribute">:lt.objs.style/font-settings</span> <span class="string">"Ubuntu Mono"</span> <span class="number">20</span> <span class="number">1.2</span>]</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>You can use Ubuntu Fonts with operating systems other than Ubuntu by downloading the fonts from <a href="http://font.ubuntu.com/" target="_blank" rel="external">font.ubuntu.com</a></p>
</blockquote>
<h4 id="Themes">Themes</h4><p>  The default theme for Light Table is pretty good, however my prefered Light Table font is called <em>Tommorow Night</em> and I configure my user behaviors to use this theme by adding the following line:</p>
<figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="collection">[<span class="attribute">:editor</span> <span class="attribute">:lt.objs.style/set-theme</span> <span class="string">"tomorrow-night"</span>]</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>There is also an Ubuntu theme plugin that I have just spotted, so I am trying that out although I want to tweak some of the colours before I make the switch.</p>
</blockquote>
<h4 id="Bracket_fun">Bracket fun</h4><p>From Light Table 0.7.0 onwards parens are not auto-closed anymore, so when you type <code>(</code> then you have to also type <code>)</code>.  Coming from Emacs, I find this limiting, so luckily you can add this behaviour back in by editing your user behaviors.  </p>
<figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="collection">[<span class="attribute">:app</span> <span class="attribute">:lt.objs.settings/pair-keymap-diffs</span>]</span></span><br></pre></td></tr></table></figure>
<h4 id="Emacs_keybindings">Emacs keybindings</h4><p>  The Emacs plugin is a wrapper around the Code Mirror keybindings for Emacs.  Installing the Emacs plugin with give you many of the Emacs keybindings you enjoy and you can easily customise them by changing the keybindings mapping in the plugin.</p>
<p>  See my previous post on how to use the <a href="http://localhost:4004/2015/01/clojure-with-lighttable-in-emacs-mode.html" target="_blank" rel="external">Emacs plugin with Light Table</a>. </p>
<h4 id="Git_Status_Bar">Git Status Bar</h4><p>  The Git status bar plugin simply indicates the Git branch your current editors’ file is in, assuming it is under version control.</p>
<img src="/images/lighttable-plugin-git-status-bar.png" class="img-code">
<p>  Install using the plugin manager and restart Light Table (you may just be able to select “Reload App Behaviours” from the Light Table commands).  Then open a file under version control and you will see its Git branch in the right corner of the status bar (the bar at the bottom of Light Table).</p>
<blockquote>
<p>Git branch / status will only show for files that are in repositories whose root is in your workspace.</p>
</blockquote>
<h4 id="Gitlight">Gitlight</h4><p>  Gitlight plugin provides a visual Git client that can stage and commit changes, push &amp; pull changes with remote repositories and show visual diffs of changes.  Install Gitlight from the Light Table plugin manager and restart Light Table (you may just be able to select “Reload App Behaviours” from the Light Table commands).</p>
<p>  Use Gitlight by opening the command panel and type <code>gitlight</code>, you will see a list of available commands</p>
<img src="/images/lighttable-gitlight-commands.png" class="img-code">
<p>  If you open a file from a project managed by git you can see the status of all the files in that project using the command <code>gitlight-status</code></p>
<img src="/images/lighttable-gitlight-status-window.png" class="img-code">  
<p>  If you select diff for any of the files in the project, you get a nice visual comparison of the changes between what is committed and your working copy.</p>
<img src="/images/lighttable-gitlight-diff-visual.png" class="img-code">    
<h4 id="Modific_-_show_changes_since_last_Git_commit">Modific - show changes since last Git commit</h4><p>  When you save a file, any changes you made since it was last commited to Git are marked by coloured lines at the left hand side of the editor window, also known as <em>gutter marks</em>. </p>
<img src="/images/lighttable-plugin-modific-example.png" class="img-code">
<blockquote>
<p>modific example with red, green and yellow highlights</p>
</blockquote>
<ul>
<li>Red    = lines have been deleted  </li>
<li>Green  = new lines have been added</li>
<li>Yellow = text that has be modified</li>
</ul>
<p>You can jump between changes using <code>Ctrl+Shift+PageUp/PageDown</code>, show the original version by putting the cursor on a changed line and hit <code>Ctrl+Alt+c</code> and revert a change by putting the cursor on a changed line and hit <code>Ctrl+Alt+r</code></p>
<p>  Install modific from the Light Table plugin manager and restart Light Table.  Then open a file from workspace project that is under version control.  Now any change you make will be highlighted.</p>
<h4 id="Plugins_to_try_next">Plugins to try next</h4><p>  There are lots of other plugins I have not tried yet.  Many plugins also provide additional language support.</p>
<p>  Here are a few plugins I plan to try next: </p>
<ul>
<li><a href="https://github.com/chadhq/slamhound-lt" target="_blank" rel="external">Slamhound</a> - refactor your Clojure namespace</li>
<li><a href="https://github.com/vgrichina/lt-howdoi" target="_blank" rel="external">howdoi</a> - pull in code solutions from the web</li>
<li><a href="https://github.com/joshuafcole/recall" target="_blank" rel="external">recall</a> - workspace Persistence </li>
<li><a href="https://github.com/bfabry/workspace-nav" target="_blank" rel="external">workspace nav</a> - Navigate the workspace view via the keyboard </li>
</ul>
<h4 id="Summary">Summary</h4><p>  Light Table provides a lot of great features out of the box, expecially for Clojure, ClojureScript and JavaScript development.  Using tweaks and plugins, Light Table is easy to tailor int a more personalised development experience.</p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="/images/lighttable-logo.png" class="img-thumbnail">
<p>  <a href="http://lighttable.com">Light Table</a> provides a great development environment for Clojure, ClojureScript &amp; JavaScript.  With a few tweaks and some of the many plugins you can make Light Table do even more.  Here are a few of the tweaks and plugins I use for my development with Light Table.</p>]]>
    
    </summary>
    
      <category term="clojure" scheme="http://jr0cket.co.uk/tags/clojure/"/>
    
      <category term="git" scheme="http://jr0cket.co.uk/tags/git/"/>
    
      <category term="lighttable" scheme="http://jr0cket.co.uk/tags/lighttable/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Faster Clojure REPL Startup With Java 9 Snapshot]]></title>
    <link href="http://jr0cket.co.uk/2015/01/faster-clojure-repl-startup-with-java-9-snapshot.html"/>
    <id>http://jr0cket.co.uk/2015/01/faster-clojure-repl-startup-with-java-9-snapshot.html</id>
    <published>2015-01-03T20:18:13.000Z</published>
    <updated>2015-03-18T15:08:46.208Z</updated>
    <content type="html"><![CDATA[<img src="/images/java-logo.png" class="img-thumbnail">
<p>  After upgrading to Java 8, Clojure development seemed faster due to quicker REPL startup times.  So when I saw a snapshot of Java 9 had been released I was hopeful that startup performance would be even faster.</p>
<blockquote>
<p>As Clojure runs on the Java Virtual machine (JVM), each time you start a REPL then you wait for a new JVM to start.  Other than this REPL startup, Clojure feels faster than developing with Java directly.</p>
</blockquote>
<p>  Here is how I set up Java 9 Snapshot on my Linux laptop (Ubuntu 14.10), it should be the same for any decent operating system.</p>
<a id="more"></a>
<h4 id="Installing_Java_9_Snapshot">Installing Java 9 Snapshot</h4><blockquote>
<p>I could have built Java 9 from source and made a <code>.deb</code> file of it for a nice install, however the manual install is a lot quicker.</p>
</blockquote>
<p>  <a href="https://jdk9.java.net/download/" target="_blank" rel="external">Download the Java 9 snapshot</a> from the OpenJDK9 website.</p>
<p>  I extracted the .tar.gz file into the directory <code>~/apps/openjdk</code> and created a symbolic link called <code>current</code> that pointed to the extracted directory </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar zvxf ~/Downloads/jdk-<span class="number">9</span>-ea-bin-b44-linux-x64-<span class="number">23</span>_dec_2014.tar.gz ~/apps/openjdk</span><br><span class="line"><span class="built_in">cd</span> ~/apps/openjdk</span><br><span class="line">ln <span class="operator">-s</span> jdk-<span class="number">9</span>-ea-bin-b44-linux-x64-<span class="number">23</span>_dec_2014 current</span><br></pre></td></tr></table></figure>
<h4 id="Add_Java_9_to_the_system_PATH">Add Java 9 to the system PATH</h4><p>  I currently have Java 8 installed and its picked up by the alternatives system in Ubuntu, which has java in the <code>/usr/bin</code> path.  So to run Java 9 without removing Java 8 or creating an Ubuntu package, I can simply add Java 9 executable to the start of the system path so it is picked up first.</p>
<p>  To make the manual adding of Java to the path more robust, I use the environment vairable <code>JAVA_HOME</code> and set that to the location pointed to by the <code>current</code> symbolic link.  If I want to try a new version of Java I can simply change the symbolic link.</p>
<p>  Add the environment variable to your shell resource configuration, eg <code>~/.bashrc</code> or <code>~/.zshrc</code> as follows</p>
<pre><code class="bash"><span class="comment">### Java9 - from https://jdk9.java.net/download/</span>
<span class="built_in">export</span> JAVA_HOME=/home/jr0cket/apps/openjdk/current
<span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span>
</code></pre>
<p>  Now when ever I open a new command line terminal I can run Java 9 as the default Java.  I could also use <code>source ~/.bashrc</code> or <code>source ~/.zshrc</code> command to update the path in the current command line terminal. </p>
<h4 id="Testing_Java_9">Testing Java 9</h4><p>  To test I have successfulling installed Java 9 I run the following commands:</p>
<pre><code>java -<span class="property">version</span>
javac -<span class="property">version</span>
</code></pre><p>  To test the speed performance of Java 9 over Java 8 I used Light Table, a modern and easy to use development environment for Clojure.  For my performance test I opened a small project in Light Table and opened its main Clojure file.  I then started an Instarepl in Light Table for the current file.  </p>
<p>  Using Java 8 the Instarepl took 17 seconds to start up.  Using Java 9 the Instarepl took 14 seconds to start up.</p>
<blockquote>
<p>The time taken for the REPL to start included checking for dependencies each time I ran it.  In each test the dependencies were all ready present so time difference is not due to downloading libraries.  There are many more tests I could run, but the biggest difference for me is in REPL startup time.</p>
</blockquote>
<p>  So in this basic test there is a visible improvement in REPL startup time with Java 9.  I hope that this startup time can be further reduced as Java 9 develops and the componentisation of Java via Project Jigsaw helps make Java smaller and quicker to start.</p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="/images/java-logo.png" class="img-thumbnail">
<p>  After upgrading to Java 8, Clojure development seemed faster due to quicker REPL startup times.  So when I saw a snapshot of Java 9 had been released I was hopeful that startup performance would be even faster.</p>
<blockquote>
<p>As Clojure runs on the Java Virtual machine (JVM), each time you start a REPL then you wait for a new JVM to start.  Other than this REPL startup, Clojure feels faster than developing with Java directly.</p>
</blockquote>
<p>  Here is how I set up Java 9 Snapshot on my Linux laptop (Ubuntu 14.10), it should be the same for any decent operating system.</p>]]>
    
    </summary>
    
      <category term="clojure" scheme="http://jr0cket.co.uk/tags/clojure/"/>
    
      <category term="java" scheme="http://jr0cket.co.uk/tags/java/"/>
    
      <category term="lighttable" scheme="http://jr0cket.co.uk/tags/lighttable/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Clojure With Light Table and Emacs Keybindings]]></title>
    <link href="http://jr0cket.co.uk/2015/01/clojure-with-lighttable-in-emacs-mode.html"/>
    <id>http://jr0cket.co.uk/2015/01/clojure-with-lighttable-in-emacs-mode.html</id>
    <published>2015-01-03T14:08:38.000Z</published>
    <updated>2015-03-18T15:08:46.204Z</updated>
    <content type="html"><![CDATA[ <img src="http://www.lighttable.com/images/logo.png" class="img-thumbnail">
<p>  When I <a href="http://clojure.practical.li" target="_blank" rel="external">teach people Clojure</a> I use <a href="http://lighttable.com/" target="_blank" rel="external">Light Table</a> because it is really simple to use and its <em>Instarepl</em> gives instant feedback of the code as you type it.  This feedback helps you understand Clojure quickly and gives you more confidence when coding.</p>
<p>  As I do most of my Clojure development (and most everything else) in <a href="http://www.gnu.org/software/emacs/" target="_blank" rel="external">Emacs</a> I really miss the excellent Emacs keybindings when I use Light Table.  Luckily there is an <a href="https://github.com/LightTable/Emacs" target="_blank" rel="external">Emacs plugin for Light Table</a>, so here is a quick guide on how to install &amp; use this Emacs plugin.</p>
<a id="more"></a>
<h4 id="Install_Emacs_plugin_for_Light_Table">Install Emacs plugin for Light Table</h4><p>  Light Table has many plugins available and the easiest way to install them is with the plugin manager.  In Light Table, open the command bar with <code>Ctrl-Space</code> (<code>Cmd-Space</code> on MacOSX) and type <code>plugin</code></p>
<p>  Select the plugin manager and a new window opens, listing all the currently installed plugins.  Select the <code>available</code> tab in this window.  </p>
<p>  There are many plugins, so type <code>emacs</code> to quickly find the plugin.  Then select <code>install</code> on the Emacs plugin</p>
<p><img src="/images/lighttable-plugins-emacs-install.png" alt="Light Table plugin manager - Emacs install"></p>
<p>  At the time of writing, installing this plugin generates a warning message due to a format change in Light Table 0.7.0.  The plugin still works correctly however.</p>
<p><img src="/images/lighttable-plugins-emacs-install-error-vector-map.png" alt="Light Table Emacs plugin - warning message"></p>
<h4 id="Add_Emacs_plugin_to_Light_Table_user-behavior">Add Emacs plugin to Light Table user.behavior</h4><p>  Finally, we need to edit the Light Table user behaviours to use the Emacs keybindings with the editor.</p>
<p>  Open the command bar with <code>Ctrl-Space</code> (<code>Cmd-Space</code> on MacOSX) and type <code>behavior</code>, selecting on the <code>Settings: user Behaviours</code> command.</p>
<p>  In the user behaviours window that opens, edit the configuration by adding the following line to the <code>editor</code> section</p>
<pre><code><span class="collection">[<span class="attribute">:editor</span> <span class="attribute">:lt.plugins.emacs/activate-emacs</span>]</span>
</code></pre><p>  The user behaviors configuration should look something like this:</p>
<p><img src="/images/lighttable-plugins-emacs-behaviors-user-editor-emacs-activate.png" alt="Light Table user behaviors configuration - Emacs activate"></p>
<blockquote>
<p>The format of user.behaviour has changed from Light Table version 0.7.0 onwards.  Configuration is now defined using vectors or maps, rather than lists as before.  At the time of writing, the configuration line on the Github repository README.md is incorrect (a <a href="https://github.com/LightTable/Emacs/pull/25" target="_blank" rel="external">pull request</a> has been created).</p>
</blockquote>
<h4 id="Using_Emacs_keybindings_with_Light_Table">Using Emacs keybindings with Light Table</h4><p>  The Emacs keybindings seem to be exactly what you would expect in Emacs.  Obviously there are a few differences between the design of Light Table and Emacs, although conceptually things seem to work the same.</p>
<p>  Here are a few keybindings that may not be immediately obvious:</p>
<p><code>Alt-x</code> - opens the command bar so you can find the command you want by typing - in the same way as you use <code>meta-x</code> in Emacs.</p>
<p><code>C-x f</code> - open a file using the system file manager (Ctrl-Shift-o in Light Table default keybinding)</p>
<p><code>C-x C-f</code> - select a file from those added to the Light Table workspace - the Light Table <code>Navigate: Open Navigate</code> command is called.</p>
<p><code>C-x o</code> - switch to next window tab on the right - similar to the next buffer window in Emacs.</p>
<p><code>C-x k</code> - close the current tab - similar to killing a buffer, but without a choice.</p>
<p><code>Alt-g g</code> - go to line.</p>
<p><code>C-x h</code> - select all.</p>
<p><code>C-x C-e</code> - evaluate all the code in the current tab.</p>
<p>  You can see all the Emacs keybindings at the <a href="https://github.com/LightTable/Emacs/blob/master/emacs.keymap" target="_blank" rel="external">Emacs Plugin Github repository</a>.</p>
<p>  Have fun with Light Table and Emacs keybindings.  If you have any modifications of the Emacs keybindings you find useful, please share them in the comments.</p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="http://www.lighttable.com/images/logo.png" class="img-thumbnail">
<p>  When I <a href="http://clojure.practical.li">teach people Clojure</a> I use <a href="http://lighttable.com/">Light Table</a> because it is really simple to use and its <em>Instarepl</em> gives instant feedback of the code as you type it.  This feedback helps you understand Clojure quickly and gives you more confidence when coding.</p>
<p>  As I do most of my Clojure development (and most everything else) in <a href="http://www.gnu.org/software/emacs/">Emacs</a> I really miss the excellent Emacs keybindings when I use Light Table.  Luckily there is an <a href="https://github.com/LightTable/Emacs">Emacs plugin for Light Table</a>, so here is a quick guide on how to install &amp; use this Emacs plugin.</p>]]>
    
    </summary>
    
      <category term="clojure" scheme="http://jr0cket.co.uk/tags/clojure/"/>
    
      <category term="lighttable" scheme="http://jr0cket.co.uk/tags/lighttable/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Quick Guide to Github Pull Requests]]></title>
    <link href="http://jr0cket.co.uk/2014/11/quick-guide-to-github-pull-requests.html"/>
    <id>http://jr0cket.co.uk/2014/11/quick-guide-to-github-pull-requests.html</id>
    <published>2014-11-29T07:02:05.000Z</published>
    <updated>2015-03-18T15:08:46.212Z</updated>
    <content type="html"><![CDATA[<img src="/images/24-pull-requests-of-xmas.png" class="img-topic">
<p>  This holiday season give the gift of code… or anything else no matter how small to help out your favorite open source project.  By joining the <a href="http://24pullrequests.com/" target="_blank" rel="external">24 pull requests website</a> with your Github account, you can challenge yourself to contribute to 24 projects through December.</p>
<p>  Here is a quick guide to creating pull requests on Github.<br><a id="more"></a></p>
<h1 id="Contribute_via_a_Github_pull_request">Contribute via a Github pull request</h1><p>  Find a project you want to contribute to on Github.  On the top right of its page, press the fork button to create your own complete copy of the project in your own account.  This allows you to add changes (commits) to your own fork, which you then share back to the original project. </p>
<p><img src="/images/github-pull-request-fork-gitbookio-plugin-quizzes.png" alt="Fork a project on Github"></p>
<p>  Take a copy of your fork using the <code>git clone</code> command:</p>
<pre><code>git clone git<span class="annotation">@github</span>.<span class="string">com:</span>jr0cket/plugin-quizzes.git
</code></pre><p><img src="/images/github-pull-request-clone-gitbookio-plugin-quizzes.png" alt="Clone your fork"></p>
<p>   Its very useful to create a branch for the change you are going to make.  If there are project updates while you are creating your contribution or you just mess up so bad you just want to throw your contribution away, then a seperate branch makes this easy.</p>
<pre><code>git checkout -<span class="tag">b</span> doc-plugin-configuration
</code></pre><p><img src="/images/github-pull-request-branch-create.png" alt="Fork a project on Github"></p>
<p>  Edit the files that make up your contribution and test your changes work before you do a local commit.  Here I am updating the README.md file with some clearer instructions on how to add the plugin to your project. </p>
<pre><code>git add README<span class="class">.md</span> 
git commit -m <span class="string">"adding instructions on configuring the plugin"</span>
</code></pre><p><img src="/images/github-pull-request-commit-locally.png" alt="Fork a project on Github"></p>
<p>  Now copy your local commit back to your fork of the Github project.  Remember to push the branch you created and not the master branch.</p>
<pre><code>git <span class="keyword">push</span> origin doc-plugin-configuration
</code></pre><p><img src="/images/github-pull-request-push-to-fork.png" alt="Fork a project on Github"></p>
<p>  Once you have pushed your branch to your fork, Github gives you the option to create a pull request.</p>
<p><img src="/images/github-pull-request-create-pull-request.png" alt="Create a Pull Request"></p>
<p>  When you create the pull request, it uses your commit message as the title of the pull request.  You can also add further information if it helps the project maintainers understand what the change is about and why they should accept it.</p>
<p><img src="/images/github-pull-request-message-example.png" alt="Pull Request message"></p>
<p>  Create the pull request and then wait for the project maintainters to talk a look at your change.  If your change has a large green icon next to it, it means it can easily be merged into the project.</p>
<p><img src="/images/github-pull-request-push-submitted.png" alt="Pull Request submitted"></p>
<h2 id="Patients_is_a_virtue">Patients is a virtue</h2><p>  Its now time to wait for the project maintainers to review your pull request.  If they like what they see and its easy to merge into the project then that may happen fairly quickly.  However, as it’s their project then it is up to them what they accept.  This is why small contributions are better than large, so you can develop good communication with the project maintainers with the minimum of effort.</p>
<h2 id="Planing_to_contribute_regularly">Planing to contribute regularly</h2><p>  If you want to are going to contribute to a project over time, its a good idea to create your own fork.  Also, once you have cloned your fork, you should also add the original project repository.  </p>
<pre><code>git remote <span class="built_in">add</span> upstream gi<span class="variable">t:</span>//github.<span class="keyword">com</span>/project/repository-name
</code></pre><p>  Before you make any change or create a new branch for your change, you should get all the latest updates from the original project.</p>
<pre><code><span class="title">git</span> pull upstream master
</code></pre><h2 id="Updating_your_own_fork">Updating your own fork</h2><p>  If your pull request is accepted then you can pull that commit into your own fork by pulling the changes from the original project and pushing them back to your fork.</p>
<pre><code><span class="title">git</span> pull upstream master 
</code></pre><blockquote>
<p>If you have other changes in the working copy, you can always use <code>git stash</code> before you pull in order to keep your work safe.  Once you have done a pull you can use <code>git stash pop</code> to restore the changes back to your working copy.</p>
</blockquote>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="/images/24-pull-requests-of-xmas.png" class="img-topic">
<p>  This holiday season give the gift of code… or anything else no matter how small to help out your favorite open source project.  By joining the <a href="http://24pullrequests.com/">24 pull requests website</a> with your Github account, you can challenge yourself to contribute to 24 projects through December.</p>
<p>  Here is a quick guide to creating pull requests on Github.<br>]]>
    
    </summary>
    
      <category term="git" scheme="http://jr0cket.co.uk/tags/git/"/>
    
      <category term="github" scheme="http://jr0cket.co.uk/tags/github/"/>
    
      <category term="coding" scheme="http://jr0cket.co.uk/categories/coding/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Contributing to Open Source Projects]]></title>
    <link href="http://jr0cket.co.uk/2014/11/contributing-to-open-source-projects.html"/>
    <id>http://jr0cket.co.uk/2014/11/contributing-to-open-source-projects.html</id>
    <published>2014-11-28T19:23:39.000Z</published>
    <updated>2015-03-18T15:08:46.204Z</updated>
    <content type="html"><![CDATA[<img src="/images/24-pull-requests-of-xmas.png" class="img-topic">
<p>  This holiday season give the gift of code… or anything else no matter how small to help out your favorite open source project.  By joining the 24 pull reuests website with your Github account, you can challenge yourself to contribute to 24 projects through December.</p>
<p>  Here are some reasons why you should contribute to open source projects.<br><a id="more"></a></p>
<p>  It can seem like a bit task to jump into any open source project, so start by looking for the smallest thing your could contribute.</p>
<h3 id="Why_contribute_to_Open_Source_Project">Why contribute to Open Source Project</h3><p>  Its simple really, as developers we all use open source projects and we would get less done without them.  It is an opportunity to get more experience outside of your daily routine and is a great way to differentiate yourself should you look for another role.  </p>
<p>  Look at the open source projects you use regularly, which of those have issues you could help with?</p>
<h3 id="What_could_I_possibly_contribute_?">What could I possibly contribute ?</h3><p>  You don’t need to be the best coder on the planet to contribute, find a simple bug in the issue tracker for the project and have a go.  You should match any coding styles the project uses, even if you dont like them.</p>
<p>  If you find something you dont understand in the docs, then write an improvement.  I often start contributing by answering some of the simpler issues raised.  Those issues are often from missunderstanding the docs for the project, so it can be an effective way to work out what needs improving.</p>
<p>  All this frees up the time the project maintainers have to develop the code and tackle larger features and bugs.</p>
<h2 id="Concered_about_your_code_quality_?">Concered about your code quality ?</h2><p>  There is no such thing as perfect code, so you shouldnt be afraid to share.  </p>
<p>  To help your code be more useful to the project, you should look out for coding styles used.  Even if you have your own style that you love, you should use the styles already adopted by the project.</p>
<p>  The smaller the code change you make, the less likely you will make any coding fubar’s and if you do then its easier for the project maintainers to tell you what they would like to see instead.  If you have lots of changes over several files, if the maintainers dont like the first code they see they are likely to just reject the change.</p>
<h2 id="Using_Github_&amp;_Pull_Requests">Using Github &amp; Pull Requests</h2><p>  One of the easiest way to contribute to an open source project is to create a small change and share it back to the original project.  If the project is on Github, you can create a pull request.  A pull request is a message to the original project to invite them to pull a change you made into the original project.</p>
<p>  You can make a change directly on the projects Github page, or ifs a code change that you want to test then you can fork the project and have your own copy of the project on Github.</p>
<h3 id="Learning_to_use_Git">Learning to use Git</h3><p>  If you are not up to speed with Git yet, the most useful website I have found it <a href="http://try.github.com" target="_blank" rel="external">try.github.com</a>.</p>
<p>  If you use the Git command line client, then <code>git help &lt;command&gt;</code> is a great way to get help on specific commands.  Alternatively, there is a great online help at <a href="http://git-scm.com/docs/" target="_blank" rel="external">git-scm.com/docs</a></p>
<p>  There is a list of <a href="http://git-scm.com/downloads" target="_blank" rel="external">graphical Git clients</a> on the git-scm.com website.</p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="/images/24-pull-requests-of-xmas.png" class="img-topic">
<p>  This holiday season give the gift of code… or anything else no matter how small to help out your favorite open source project.  By joining the 24 pull reuests website with your Github account, you can challenge yourself to contribute to 24 projects through December.</p>
<p>  Here are some reasons why you should contribute to open source projects.<br>]]>
    
    </summary>
    
      <category term="git" scheme="http://jr0cket.co.uk/tags/git/"/>
    
      <category term="github" scheme="http://jr0cket.co.uk/tags/github/"/>
    
      <category term="coding" scheme="http://jr0cket.co.uk/categories/coding/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Anyone Can Deploy Your App With Heroku Button]]></title>
    <link href="http://jr0cket.co.uk/2014/08/anyone-can-deploy-your-app-with-heroku-button.html"/>
    <id>http://jr0cket.co.uk/2014/08/anyone-can-deploy-your-app-with-heroku-button.html</id>
    <published>2014-08-11T08:53:22.000Z</published>
    <updated>2015-03-18T15:08:46.204Z</updated>
    <content type="html"><![CDATA[<img src="/images/heroku-logo.png" class="img-thumbnail">
<p><a href="https://devcenter.heroku.com/articles/heroku-button" target="_blank" rel="external">Heroku Button</a> provides a quick &amp; easy way for anyone to deploy your apps, for free, with just a browser.  Simply <a href="https://devcenter.heroku.com/articles/heroku-button#creating-the-app-json-file" target="_blank" rel="external">create a manifest file for your app</a> and add the <a href="https://devcenter.heroku.com/articles/heroku-button#adding-the-heroku-button" target="_blank" rel="external">Heroku Button code</a> to your Github repository or Website.  Heroku takes care of the rest (server, database, deployment, scaling etc).  </p>
<p>Experience Heroku Button for yourself with our <a href="https://heroku.com/deploy?template=https://github.com/heroku/node-js-sample" target="_blank" rel="external">simple NodeJS app</a>. </p>
<a id="more"></a>
<p>Once you press the Heroku Button, you see a deployment page for you app.  The name, description and logo come from the <code>app.json</code> manifest file.</p>
<img src="/images/heroku-button-sample-nodejs.png" class="img-code">
<p>Once you press the <em>Deploy for Free</em> button, Heroku does the work and creates a new App for you live on the Internet</p>
<img src="/images/heroku-button-deploy-results.png" class="img-code">
<p>Now you can view your app as well as access your own copy of the code.</p>
<h1 id="Why_use_Heroku_Button">Why use Heroku Button</h1><p>Here are just a few thoughts about why you may want to use Heroku Button.</p>
<h2 id="App_Creators">App Creators</h2><p>Its easy to show off your work to prospective employers so they can be quickly impressed by your skills.  You can also share your apps with your friends and co-workers as well as making it easy to test your app at any time.</p>
<h2 id="Framework_developers">Framework developers</h2><p>Share demos that allow developers to understand the benefits of your framework quickly and show off what they could create.</p>
<h2 id="Hackathon_teams">Hackathon teams</h2><p>Provide an easy way for judges to play around with your app, so they can get a better appreciation of what you have created</p>
<h1 id="Creating_your_first_button">Creating your first button</h1><p>Creating an Heroku Button for your app is very simple and has 2 parts to it:</p>
<p>1) Create an app manifest file for your project - <code>app.json</code><br>2) Add the Heroku Button to your Github Repository or any website (code provided)</p>
<p>The only requirement is that your code be available via a public repository on Github or other git repository  </p>
<h2 id="Create_an_app_manifest_file">Create an app manifest file</h2><p>Create an <code>app.json</code> file in the root of your project.  This file contains the name, description and an image link for your app (eg. a logo).  This should provide people with an understanding of what they are going to deploy.</p>
<p>The <code>app.json</code> file should also contain any configuration (environment) variables and Heroku addons (databases, etc) your app needs.</p>
<h2 id="Example_manifest_file">Example manifest file</h2><p>The Heroku example NodeJS app is very easy to define in the manifest file, as it does not use any Heroku addons or require any environment variables.  The app itself is assembled on Heroku using Node Pakage manager and <a href="https://devcenter.heroku.com/articles/getting-started-with-nodejs" target="_blank" rel="external">Heroku support for NodeJS apps</a>.</p>
<figure class="highlight json"><figcaption><span>app.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "<span class="attribute">name</span>": <span class="value"><span class="string">"Node.js Sample"</span></span>,</span><br><span class="line">  "<span class="attribute">description</span>": <span class="value"><span class="string">"A barebones Node.js app using Express 4"</span></span>,</span><br><span class="line">  "<span class="attribute">repository</span>": <span class="value"><span class="string">"https://github.com/heroku/node-js-sample"</span></span>,</span><br><span class="line">  "<span class="attribute">logo</span>": <span class="value"><span class="string">"https://node-js-sample.herokuapp.com/node.svg"</span></span>,</span><br><span class="line">  "<span class="attribute">keywords</span>": <span class="value">[<span class="string">"node"</span>, <span class="string">"express"</span>, <span class="string">"static"</span>]</span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Adding_Heroku_Button_for_your_app">Adding Heroku Button for your app</h2><p>You could just use a URL link to deploy you app, however, Heroku has provided you with a button image and all the code you need to use it.  Using a button makes it very obvious to see that your app is easily deployable.</p>
<p><strong>Markdown</strong></p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="link_label">![Deploy my app to Heroku</span>](<span class="link_url">https://www.herokucdn.com/deploy/button.png</span>)]</span><br><span class="line">  (https://heroku.com/deploy?template=https://github.com/heroku/node-js-sample)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>If you expect people to fork your Github repository and want them to deploy their own versions of the code, you can omit the template query parameter (everything after the <code>?</code>).  Heroku Button will infer its the repository the button was clicked on if there is no parameter.</p>
</blockquote>
<p><strong>HTML</strong></p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"https://heroku.com/deploy?template=https://github.com/heroku/node-js-sample"</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"https://www.herokucdn.com/deploy/button.png"</span> <span class="attribute">alt</span>=<span class="value">"Deploy my App to Heroku"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="title">a</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>If you are using HTML you can of course add any styles you want to the button using CSS.</p>
</blockquote>
<h1 id="In_Summary">In Summary</h1><p>Heroku Button enables anyone to play with your apps, encouraging them to give you meaningful feedback and showing them what they can create if they get involved with your project.</p>
<p>If you create an Heroku Button with your app, please tweet about it using <a href="https://twitter.com/search?q=%23herokubutton" target="_blank" rel="external">#herokubutton</a>.</p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="/images/heroku-logo.png" class="img-thumbnail">
<p><a href="https://devcenter.heroku.com/articles/heroku-button">Heroku Button</a> provides a quick &amp; easy way for anyone to deploy your apps, for free, with just a browser.  Simply <a href="https://devcenter.heroku.com/articles/heroku-button#creating-the-app-json-file">create a manifest file for your app</a> and add the <a href="https://devcenter.heroku.com/articles/heroku-button#adding-the-heroku-button">Heroku Button code</a> to your Github repository or Website.  Heroku takes care of the rest (server, database, deployment, scaling etc).  </p>
<p>Experience Heroku Button for yourself with our <a href="https://heroku.com/deploy?template=https://github.com/heroku/node-js-sample">simple NodeJS app</a>. </p>]]>
    
    </summary>
    
      <category term="heroku" scheme="http://jr0cket.co.uk/tags/heroku/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Staging Patches for Cleaner Git Commits]]></title>
    <link href="http://jr0cket.co.uk/2014/07/staging-patches-with-git-for-cleaner-commits.html"/>
    <id>http://jr0cket.co.uk/2014/07/staging-patches-with-git-for-cleaner-commits.html</id>
    <published>2014-07-15T21:58:36.000Z</published>
    <updated>2015-03-18T15:08:46.212Z</updated>
    <content type="html"><![CDATA[<img src="/images/git-logo.png" class="img-thumbnail">
<p>Some times you work on your code or configuration files and realise you have made more changes than sensibly fit into one commit.  Using patches you can easily select only the changes want rather than adding all the changes in a file.  You dont even have to create a seperate patch file.</p>
<a id="more"></a>
<p>You can use the git via the interactive mode <code>git add -i</code>, however its just as easy to use the command <code>git add --patch</code> or its short form <code>git add -p</code>.  The <code>--patch</code> or <code>-p</code> option allows you to select what git calls <em>hunks</em>, lines git sees as a change within a file.  A hunk may be a change to one line or changes across several lines grouped together. </p>
<pre><code>git add -<span class="tag">p</span> .
</code></pre><p>This command will prompt to you accept each <em>hunk</em> through all the files that have modifications since the last commit.</p>
<p>If you just want to pick out changes from a specific file or collection of files you can narrow the scope by specifying the filename or filename pattern</p>
<pre><code>git add -<span class="tag">p</span> filename
git add -<span class="tag">p</span> *<span class="class">.md</span> 
git add -<span class="tag">p</span> config.*
</code></pre><h1 id="An_example">An example</h1><p>In this example there are several lines of changes in the <code>article.styl</code> file.  Using the <code>git add -p</code> command we are shown each <em>hunk</em> in turn as a diff, so we can compare the current version with the changes in the <em>hunk</em>.  We then decide if we want to add the changed lines or not.  </p>
<p>We say yes to the first <em>hunk</em> and no to the second.</p>
<img src="/images/hexo-theme-git-staging-patches.png" class="img-code">
<p>Once we have added or ingnored all the <em>hunks</em> in the file the interactive staging ends.  If we are ready we can then do a commit as normal.</p>
<h1 id="Splitting_the_hunks">Splitting the hunks</h1><p>Sometimes git chooses hunks that include too many changes.  If we see a hunk we want to break down during the interactive staging, we can select the <code>s</code> option.  We are then shown the same <em>hunk</em> aft it has been split.</p>
<p>In the following example, our editor has added a new line to the file that we added a twitter account to.  We only want to add the twitter account, so split the hunk to get the twitter line as its own <em>hunk</em>.</p>
<p>Then we add the <em>hunk</em> with the twitter change in it by selecting <code>y</code> and do not include the new line change by skipping the next <em>hunk</em> by pressing <code>n</code>.</p>
<img src="/images/git-staging-interactive-split-hunk.png" class="img-code">
<h1 id="More_Interactive_Staging_options">More Interactive Staging options</h1><p>There are many more options to help you when your are staging changes interactively.  Using the <code>?</code> key at any time during interactive staging will show you a brief description of those options.</p>
<img src="/images/git-staging-interactive-options.png" class="image-code">
<p>For more detailed descriptoin of interactive staging and the options available, see the git manpages via the command <code>git help add</code> or <a href="http://git-scm.com/docs/git-add" target="_blank" rel="external">git add documentation online</a>.</p>
<h1 id="In_Summary">In Summary</h1><p>By staging patches I can very easily see the exact changes I am assembling for my next commit.  I can then include only the code &amp; configuration changes that are ready to be part of the next commit.</p>
<p>Using this patch technique for staging avoids unstaging files (git reset -soft), editing them and then adding them again.  That is a real pain.</p>
<p>And finally, staging patches keeps my commits nice and simple and focused.  I get a detailed and accurate history of my changes and that makes its really easy for others to merge or cherry-pick my commits.</p>
<p>Read the <a href="http://git-scm.com/book/en/Git-Tools-Interactive-Staging" target="_blank" rel="external">Git-scm guide on Interactive Staging</a> if you want to see more tooling around this topic.</p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="/images/git-logo.png" class="img-thumbnail">
<p>Some times you work on your code or configuration files and realise you have made more changes than sensibly fit into one commit.  Using patches you can easily select only the changes want rather than adding all the changes in a file.  You dont even have to create a seperate patch file.</p>]]>
    
    </summary>
    
      <category term="git" scheme="http://jr0cket.co.uk/tags/git/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Cycling Through Emacs Buffers Easily]]></title>
    <link href="http://jr0cket.co.uk/2014/07/cycling-through-emacs-buffers-easily.html"/>
    <id>http://jr0cket.co.uk/2014/07/cycling-through-emacs-buffers-easily.html</id>
    <published>2014-07-13T11:27:39.000Z</published>
    <updated>2015-03-18T15:08:46.204Z</updated>
    <content type="html"><![CDATA[<img src="/images/emacs-logo.png" class="img-thumbnail">
<p>Once you have more buffers (files) open than windows in Emacs, then having a quick way to cycle through buffers is invaluable.  Even with 4 windows open, I still find myself using IBuffer, <code>C-c C-x</code>, many times.</p>
<p>Sometimes I just want to switch between the current and previous buffer in the same window.  So this is how I tweaked my Emacs configuration (based on Emacs Live) to cycle through buffers.</p>
<a id="more"></a>
<h1 id="Cycling_through_buffers">Cycling through buffers</h1><p>Emacs has two functions to move through buffers in the current window, <code>next-buffer</code> and <code>previous-buffer</code>.  These can be called in the usual way using <code>Meta-x</code>:</p>
<pre><code>M-<span class="keyword">x</span> <span class="keyword">next</span>-<span class="keyword">buffer</span>
M-<span class="keyword">x</span> <span class="keyword">previous</span>-<span class="keyword">buffer</span>
</code></pre><p>Using these functions is quick than firing up an IBuffer, however if we create some good keybindings then we can cycle buffers even faster.</p>
<h1 id="Creating_keybindings">Creating keybindings</h1><p>I already have several keybindings defined in my Emacs Live personal pack, so I simply add two more keybindings.  The file I put my keybindings in is called <code>~/.live-packs/jr0cket-pack/config/keybindings.el</code> and these bindings are loaded by adding the following line to <code>~/.live-packs/jr0cket-pack/init.el</code></p>
<pre><code><span class="list">(<span class="keyword">live-load-config-file</span> <span class="string">"keybindings.el"</span>)</span>
</code></pre><p>The key combination I decided to use was <code>Ctrl - PageUp</code> for previous button and <code>Ctrl - PageDown</code> for the next buffer.</p>
<pre><code>;; <span class="keyword">Set</span> keybindings <span class="keyword">for</span> cycling buffers
(<span class="keyword">global</span>-<span class="keyword">set</span>-<span class="keyword">key</span> [C-prior] <span class="comment">'previous-buffer)</span>
(<span class="keyword">global</span>-<span class="keyword">set</span>-<span class="keyword">key</span> [C-<span class="keyword">next</span>] <span class="comment">'next-buffer)</span>
</code></pre><blockquote>
<p>The PageUp key is referenced by the name prior and the PageDown key is referenced by the name next. </p>
</blockquote>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="/images/emacs-logo.png" class="img-thumbnail">
<p>Once you have more buffers (files) open than windows in Emacs, then having a quick way to cycle through buffers is invaluable.  Even with 4 windows open, I still find myself using IBuffer, <code>C-c C-x</code>, many times.</p>
<p>Sometimes I just want to switch between the current and previous buffer in the same window.  So this is how I tweaked my Emacs configuration (based on Emacs Live) to cycle through buffers.</p>]]>
    
    </summary>
    
      <category term="emacs" scheme="http://jr0cket.co.uk/tags/emacs/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo Theme - Creating Image Styles]]></title>
    <link href="http://jr0cket.co.uk/2014/06/hexo-theme-creating-image-styles.html"/>
    <id>http://jr0cket.co.uk/2014/06/hexo-theme-creating-image-styles.html</id>
    <published>2014-06-20T17:38:18.000Z</published>
    <updated>2015-03-18T15:08:46.208Z</updated>
    <content type="html"><![CDATA[<img src="/images/hexo-logo.png" class="img-thumbnail">
<p>Adding images to a blog post helps the audience undersand what the will get from reading the article and if it will be relevant for the.  Images also aid the understanding of the topic you are covering, especially if you are explaining something technical or more complicated.</p>
<p>The default theme for hexo only provides a single image style, so here I will create several styles of image to help convey the topic and details of every post.</p>
<a id="more"></a>
<h1 id="Adding_image_logos_to_posts">Adding image logos to posts</h1><p>I like to have logos on images to provide a quick visual way to identify the topic of an article.  This is similar to other sites such as <a href="http://slashdot.org" target="_blank" rel="external">Slashdot</a>.  </p>
<p>If I simply add an image then it will be placed in the middle of the article area, this does not look that great and takes up a lot of space.</p>
<img src="/images/hexo-theme-image-default-style.png" class="img-code">
<p>To make better use of space and improve the design, I created a style called <code>img-thumbnail</code>.  The style ensures that each image displays on the left and be no bigger than 240 pixels wide and 96 pixels high.</p>
<figure class="highlight css"><figcaption><span>/themes/landscape/source/css/_partial/article.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.img-thumbnail</span></span><br><span class="line">  <span class="tag">max-width</span>: 240<span class="tag">px</span></span><br><span class="line">  <span class="tag">max-height</span>: 96<span class="tag">px</span></span><br><span class="line">  <span class="tag">display</span>: <span class="tag">block</span></span><br><span class="line">  <span class="tag">margin-right</span>: 12<span class="tag">px</span></span><br><span class="line">  <span class="tag">margin-top</span>: 12<span class="tag">px</span></span><br><span class="line">  <span class="tag">float</span>: <span class="tag">left</span></span><br><span class="line">  <span class="tag">clear</span>: <span class="tag">left</span></span><br></pre></td></tr></table></figure>
<p>Here is an example of what the <code>img-thumbnail</code> style looks like in the websites</p>
<img src="/images/hexo-theme-images-style-thumbnail.png" class="img-code">
<h1 id="Adding_image_style_for_screenshots">Adding image style for screenshots</h1><p>Some images will be screenshots of the command line, code and developer tools in actoin.  These images will be centrally placed as normal, but will have specific height and with contraints to make sure all the images are big enough to view yet stil fit on the page.</p>
<figure class="highlight css"><figcaption><span>/themes/landscape/source/css/_partial/article.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.img-screenshot</span></span><br><span class="line">  <span class="tag">max-width</span>: 640<span class="tag">px</span></span><br><span class="line">  <span class="tag">max-height</span>: 320<span class="tag">px</span></span><br><span class="line">  <span class="tag">display</span>: <span class="tag">block</span> </span><br><span class="line">  <span class="tag">margin-left</span>: <span class="tag">auto</span></span><br><span class="line">  <span class="tag">margin-right</span>: <span class="tag">auto</span></span><br></pre></td></tr></table></figure>
<p>Here is an example of what the <code>img-screenshot</code> style looks like in the websites</p>
<img src="/images/hexo-theme-image-code.png" class="img-code">
<h1 id="Adding_images_for_topics_discussed">Adding images for topics discussed</h1><p>During an article I may talk about several different topics and what to visually highlight what topic is being disscussed.  So again I created another image style, this time placing the image on the right hand side of the content and allowing a bigger size.</p>
<figure class="highlight css"><figcaption><span>/themes/landscape/source/css/_partial/article.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.img-topic</span></span><br><span class="line">  <span class="tag">max-width</span>: 360<span class="tag">px</span></span><br><span class="line">  <span class="tag">max-height</span>: 1800<span class="tag">px</span></span><br><span class="line">  <span class="tag">display</span>: <span class="tag">block</span> </span><br><span class="line">  <span class="tag">margin-left</span> 12<span class="tag">px</span></span><br><span class="line">  <span class="tag">margin-right</span>: 12<span class="tag">px</span></span><br><span class="line">  <span class="tag">float</span>: <span class="tag">right</span></span><br><span class="line">  <span class="tag">clear</span>: <span class="tag">right</span></span><br></pre></td></tr></table></figure>
<p>Here is an example of what the <code>img-topic</code> style looks like in the websites</p>
<img src="/images/hexo-theme-images-style-topic.png" class="img-code">
<h1 id="In_Summary">In Summary</h1><p>By setting up different styles it makes it very easy to layout images in an article, using just one style name.  This helps me make each blog post more visually appealing to look at and therefore a better experience for the reader (and myself).</p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="/images/hexo-logo.png" class="img-thumbnail">
<p>Adding images to a blog post helps the audience undersand what the will get from reading the article and if it will be relevant for the.  Images also aid the understanding of the topic you are covering, especially if you are explaining something technical or more complicated.</p>
<p>The default theme for hexo only provides a single image style, so here I will create several styles of image to help convey the topic and details of every post.</p>]]>
    
    </summary>
    
      <category term="hexo" scheme="http://jr0cket.co.uk/tags/hexo/"/>
    
      <category term="blogging" scheme="http://jr0cket.co.uk/categories/blogging/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo Theme - Using Ubuntu Google Fonts]]></title>
    <link href="http://jr0cket.co.uk/2014/06/hexo-theme-using-ubuntu-google-fonts.html"/>
    <id>http://jr0cket.co.uk/2014/06/hexo-theme-using-ubuntu-google-fonts.html</id>
    <published>2014-06-16T22:37:17.000Z</published>
    <updated>2015-03-18T15:08:46.208Z</updated>
    <content type="html"><![CDATA[<img src="/images/hexo-logo.png" class="img-thumbnail">
<p>The font that comes with the default hexo fault is quite nice, however, I like using the Ubuntu font especially for code.  As the Hexo theme uses Google fonts in some places already, then it was really easy to change which one Hexo uses.  Here I will show you how to change over to the Ubuntu font family for text and sorce code using <a href="http://www.google.com/fonts" target="_blank" rel="external">Google Fonts</a>.</p>
<a id="more"></a>
<h1 id="Defining_fonts_in_Hexo">Defining fonts in Hexo</h1><p>As Hexo uses Google Fonts by default, then you can simply define which font you want by using the font name.  The default Heox theme, landscape, uses a file called <code>source/css/_variables.styl</code> to define common variables, such as fonts.  </p>
<p>Viewing the <code>_variables.styl</code> file you can see the fonts that Hexo uses by default, which are assigned to three variables:</p>
<ul>
<li>font-sans</li>
<li>font-serif</li>
<li>font-mono - (source code) </li>
<li>font-icon - (icons in navbar) </li>
</ul>
<blockquote>
<p>Font-icon is configured to use Font Awesome to make it quick and simple to add logos such as twitter, facebook, linkedIn and RSS feeds.  Using font icons is more efficient than using image files as they are scalable, so no need for multiple image files for the logos.</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// Fonts&#10;font-sans = &#34;Helvetica Neue&#34;, Helvetica, Arial, sans-serif&#10;font-serif = Georgia, &#34;Times New Roman&#34;, serif&#10;font-mono = &#34;Source Code Pro&#34;, Consolas, Monaco, Menlo, Consolas, monospace&#10;font-icon = FontAwesome&#10;font-icon-path = &#34;fonts/fontawesome-webfont&#34;&#10;font-icon-version = &#34;4.0.3&#34;&#10;font-size = 14px&#10;line-height = 1.6em&#10;line-height-title = 1.1em</span><br></pre></td></tr></table></figure>
<p>This is what the fonts in the hexo default theme look like: </p>
<img src="/images/hexo-theme-original-fonts.png" class="img-code"> 
<h1 id="Updating_Hexo_to_use_the_Ubuntu_fonts">Updating Hexo to use the Ubuntu fonts</h1><p>I prefer to use the Ubunt fonts, for text and for source code.  So I updated the <code>source/css/_variables.styl</code> file with Ubuntu for the font-sans and font-serif variables and Ubuntu Mono for the font-mono variable.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// Fonts&#10;font-sans = Ubuntu, sans-serif&#10;font-serif = Ubuntu, serif&#10;font-mono = &#34;Ubuntu Mono&#34;, monospace&#10;font-icon = FontAwesome&#10;font-icon-path = &#34;fonts/fontawesome-webfont&#34;&#10;font-icon-version = &#34;4.0.3&#34;&#10;font-size = 14px&#10;line-height = 1.6em&#10;line-height-title = 1.1em</span><br></pre></td></tr></table></figure>
<p>Using Ubuntu fonts just works on my laptop, as I use Ubuntu as my operating system and the Ubuntu fonts are just there.  When I publish my Hexo website, I cant guarantee everyone is using Ubuntu so I use Google Fonts to spread the Ubuntu font love.</p>
<h1 id="Google_Fonts">Google Fonts</h1><p>Google fonts are a wide range of open fonts hosted in the cloud and part of a content delivery network (CDN).  This means that a whole range of fonts are freely availble to be used in your own websites and apps.  The content delivery network ensures these fonts are loaded (relatively) quickly anywhere in the world. </p>
<p>You can browse the fonts avaible for use and see the code to include them in your websites by visiting <a href="http://www.google.com/fonts" target="_blank" rel="external">google.com/fonts</a></p>
<p>To keep these fonts as lightweight as possible whilst loading into the browser, I chose only the Ubuntu fonts I needed.  In this case, I chose the Ubuntu Normal and Italic fonts at 400 weight and bold at 700 weight </p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">link</span> <span class="attribute">href</span>=<span class="value">"http://fonts.googleapis.com/css?family=Ubuntu:400,700,400italic"</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">type</span>=<span class="value">"text/css"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>I also want to show code in the Ubuntu Mono typeface at both 400 and 700 weight for normal and bold text respectively.  Google Fonts website generates me the following link I can use in my Hexo website.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">link</span> <span class="attribute">href</span>=<span class="value">"http://fonts.googleapis.com/css?family=Ubuntu+Mono:400,700|Ubuntu:400,700,400italic"</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">type</span>=<span class="value">"text/css"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="Adding_the_Ubuntu_Google_Fonts_to_Hexo">Adding the Ubuntu Google Fonts to Hexo</h1><p>I updated my custom theme to use the Ubuntu Google fonts by editing the <code>layout/_partial/head.ejs</code> file.  This already had a Google Font for Source Code Pro, so I simply replaced that line with the new URL I got from Google Fonts as above.</p>
<figure class="highlight html"><figcaption><span>layout/_partial/head.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="title">title</span>&gt;</span><span class="tag">&lt;<span class="title">%</span> <span class="attribute">if</span> (<span class="attribute">title</span>)&#123; %&gt;</span><span class="tag">&lt;<span class="title">%=</span> <span class="attribute">title</span> %&gt;</span> | <span class="tag">&lt;<span class="title">%</span> &#125; %&gt;</span><span class="tag">&lt;<span class="title">%=</span> <span class="attribute">config.title</span> %&gt;</span><span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"viewport"</span> <span class="attribute">content</span>=<span class="value">"width=device-width, initial-scale=1, maximum-scale=1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">%-</span> <span class="attribute">open_graph</span>(&#123;<span class="attribute">twitter_id:</span> <span class="attribute">theme.twitter</span>, <span class="attribute">google_plus:</span> <span class="attribute">theme.google_plus</span>, <span class="attribute">fb_admins:</span> <span class="attribute">theme.fb_admins</span>, <span class="attribute">fb_app_id:</span> <span class="attribute">theme.fb_app_id</span>&#125;) %&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">%</span> <span class="attribute">if</span> (<span class="attribute">theme.rss</span>)&#123; %&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"alternative"</span> <span class="attribute">href</span>=<span class="value">"&lt;%- theme.rss %&gt;"</span> <span class="attribute">title</span>=<span class="value">"&lt;%= config.title %&gt;"</span> <span class="attribute">type</span>=<span class="value">"application/atom+xml"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">%</span> &#125; %&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">%</span> <span class="attribute">if</span> (<span class="attribute">theme.favicon</span>)&#123; %&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"icon"</span> <span class="attribute">href</span>=<span class="value">"&lt;%- theme.favicon %&gt;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">%</span> &#125; %&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">link</span> <span class="attribute">href</span>=<span class="value">"http://fonts.googleapis.com/css?family=Ubuntu+Mono:400,700|Ubuntu:400,700,400italic"</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">type</span>=<span class="value">"text/css"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">%-</span> <span class="attribute">css</span>('<span class="attribute">css</span>/<span class="attribute">style</span>') %&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">%-</span> <span class="attribute">partial</span>('<span class="attribute">google-analytics</span>') %&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>Line 10: Ubuntu fonts included from Google Fonts</p>
</blockquote>
<p>When Hexo generates all the theme files, the Google Docs URL for the Ubuntu fonts gets included in the head part of all pages.  This ensures that even thought without Ubuntu fonts installed on their device will see the page with Ubuntu fonts.</p>
<h1 id="Testing_the_font_change">Testing the font change</h1><p>Changes to the <code>source/css/_variables.styl</code> file are picked up straight away if you are running the command <code>hexo server</code>, so all you would need to do is refresh your browser.</p>
<p>Hexo with the Ubuntu fonts looks like:</p>
<img src="/images/hexo-theme-ubuntu-fonts.png" class="img-code">
<h1 id="In_Summary">In Summary</h1><p>Changing to Ubuntu fonts or any other Google font is pretty easy with Hexo.  It may not seem a big change that I have made, but as I refer to my blog many times during the week (and sometime many times a day), its nice to have a font that I find pleasing to read.</p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="/images/hexo-logo.png" class="img-thumbnail">
<p>The font that comes with the default hexo fault is quite nice, however, I like using the Ubuntu font especially for code.  As the Hexo theme uses Google fonts in some places already, then it was really easy to change which one Hexo uses.  Here I will show you how to change over to the Ubuntu font family for text and sorce code using <a href="http://www.google.com/fonts">Google Fonts</a>.</p>]]>
    
    </summary>
    
      <category term="hexo" scheme="http://jr0cket.co.uk/tags/hexo/"/>
    
      <category term="blogging" scheme="http://jr0cket.co.uk/categories/blogging/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo Tips When Upgrading to 2.6.x Onwards]]></title>
    <link href="http://jr0cket.co.uk/2014/06/hexo-tips-when-upgrading-to-26x-onwards.html"/>
    <id>http://jr0cket.co.uk/2014/06/hexo-tips-when-upgrading-to-26x-onwards.html</id>
    <published>2014-06-04T19:35:06.000Z</published>
    <updated>2015-03-18T15:08:46.208Z</updated>
    <content type="html"><![CDATA[<img src="/images/hexo-logo.png" class="img-thumbnail">
<p>Hexo has a bit of a refactor from version 2.6 onwards to make it a bit more flexible with regard to the node modules it uses.  So when you create a new Hexo project you have to add some module to that project before you can generate your site.  This is an easy step as its managed by the Node package manager (npm).  </p>
<blockquote>
<p>There are more details about <a href="https://github.com/tommy351/hexo/wiki/Migrating-from-2.5-to-2.6" target="_blank" rel="external">migration steps on the Hexo Github project</a>.  </p>
</blockquote>
<p>Here are the essential details and options for upgrading to Hexo 2.6 onwards.</p>
<a id="more"></a>
<h1 id="Check_your_version_of_Hexo">Check your version of Hexo</h1><p>You can easily check the version of Hexo you are using with the following command:</p>
<pre><code><span class="title">hexo</span> -v 
</code></pre><p>This should give you output similar to:</p>
<figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo</span>: <span class="string">2.5.3</span></span><br><span class="line"><span class="attribute">os</span>: <span class="string">Linux 3.11.0-20-generic linux x64</span></span><br><span class="line"><span class="attribute">http_parser</span>: <span class="string">1.0</span></span><br><span class="line"><span class="attribute">node</span>: <span class="string">0.10.26</span></span><br><span class="line"><span class="attribute">v8</span>: <span class="string">3.14.5.9</span></span><br><span class="line"><span class="attribute">ares</span>: <span class="string">1.9.0-DEV</span></span><br><span class="line"><span class="attribute">uv</span>: <span class="string">0.10.25</span></span><br><span class="line"><span class="attribute">zlib</span>: <span class="string">1.2.3</span></span><br><span class="line"><span class="attribute">modules</span>: <span class="string">11</span></span><br><span class="line"><span class="attribute">openssl</span>: <span class="string">1.0.1e</span></span><br></pre></td></tr></table></figure>
<h1 id="Upgrading_Hexo">Upgrading Hexo</h1><p>Upgrading Hexo is as easy as installing Hexo in the first place.  Simply use node package manager to install the latest version</p>
<pre><code>npm <span class="keyword">install</span> -g hexo 
</code></pre><blockquote>
<p>The above command uses the global option, -g, so anyone can run hexo.  If you have installed Hexo in a directory not owned by your operating system account (eg. <code>/usr/local/</code> or <code>/opt</code>) then you should use <code>sudo</code> in front of this command, ie. <code>sudo npm install -g hexo</code></p>
</blockquote>
<h1 id="Checking_the_version_of_Hexo_again">Checking the version of Hexo again</h1><p>As before, you can check you are running the latest version of hexo using the command:</p>
<pre><code><span class="title">hexo</span> -v
</code></pre><p>This time you should have a newer version:</p>
<figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo</span>: <span class="string">2.7.1</span></span><br><span class="line"><span class="attribute">os</span>: <span class="string">Linux 3.11.0-23-generic linux x64</span></span><br><span class="line"><span class="attribute">http_parser</span>: <span class="string">1.0</span></span><br><span class="line"><span class="attribute">node</span>: <span class="string">0.10.26</span></span><br><span class="line"><span class="attribute">v8</span>: <span class="string">3.14.5.9</span></span><br><span class="line"><span class="attribute">ares</span>: <span class="string">1.9.0-DEV</span></span><br><span class="line"><span class="attribute">uv</span>: <span class="string">0.10.25</span></span><br><span class="line"><span class="attribute">zlib</span>: <span class="string">1.2.3</span></span><br><span class="line"><span class="attribute">modules</span>: <span class="string">11</span></span><br><span class="line"><span class="attribute">openssl</span>: <span class="string">1.0.1e</span></span><br></pre></td></tr></table></figure>
<p>As I am only upgrading Hexo to a new vesion, only it has a new version.  The other components are all the same version.</p>
<h1 id="Adding_modules_to_new_Hexo_projects">Adding modules to new Hexo projects</h1><p>When you create a new Hexo project with the command <code>hexo init</code>, the names of the extra node modules are written to the <code>package.json</code> file.  So all that is needed is to run the node package manager</p>
<pre><code>hexo init my-<span class="keyword">project</span>
cd my-<span class="keyword">project</span>
npm <span class="keyword">install</span>
</code></pre><h1 id="Adding_modules_to_an_existing_project">Adding modules to an existing project</h1><p>If you have a project that was created before Hexo version 2.6, you need to reinitialise the Hexo project.  To do this, change into the hexo directory and run the command:</p>
<pre><code>cd <span class="keyword">my</span>-existing-project
hexo init
</code></pre><p>The <code>hexo init</code> command updates the <code>package.json</code> file with the names of the required modules.  Then as with a new project you run the node package manager to fetch and install the modules:</p>
<pre><code>npm <span class="keyword">install</span>
</code></pre><h1 id="Manually_updating_an_existing_Hexo_project">Manually updating an existing Hexo project</h1><p>If you want to control over what is being changed in your Hexo project nodejs packages, you can add each package seperately.  Here we are using the <code>npm</code> option <code>--save</code> to ensure the package is added to the <code>packages.json</code> file for the Hexo project.</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="operator"><span class="keyword">install</span> hexo-renderer-ejs <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-renderer-stylus <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-renderer-marked <span class="comment">--save</span></span></span><br></pre></td></tr></table></figure>
<h1 id="Troubleshooting:_Hexo_not_working_after_upgrade">Troubleshooting: Hexo not working after upgrade</h1><p>If all goes wrong then try uninstalling hexo and install again (the classic IT approach).</p>
<pre><code>npm <span class="keyword">remove</span> hexo     
npm <span class="keyword">install</span> hexo -g 
</code></pre><p>Then check the version again to see if the new hexo will run.</p>
<pre><code><span class="title">hexo</span> -v
</code></pre><p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="/images/hexo-logo.png" class="img-thumbnail">
<p>Hexo has a bit of a refactor from version 2.6 onwards to make it a bit more flexible with regard to the node modules it uses.  So when you create a new Hexo project you have to add some module to that project before you can generate your site.  This is an easy step as its managed by the Node package manager (npm).  </p>
<blockquote>
<p>There are more details about <a href="https://github.com/tommy351/hexo/wiki/Migrating-from-2.5-to-2.6">migration steps on the Hexo Github project</a>.  </p>
</blockquote>
<p>Here are the essential details and options for upgrading to Hexo 2.6 onwards.</p>]]>
    
    </summary>
    
      <category term="hexo" scheme="http://jr0cket.co.uk/tags/hexo/"/>
    
      <category term="blogging" scheme="http://jr0cket.co.uk/categories/blogging/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo Custom Theme - Styling Code Snippets]]></title>
    <link href="http://jr0cket.co.uk/2014/06/hexo-custom-theme---styling-code-snippets.html"/>
    <id>http://jr0cket.co.uk/2014/06/hexo-custom-theme---styling-code-snippets.html</id>
    <published>2014-06-04T05:34:28.000Z</published>
    <updated>2015-03-18T15:08:46.208Z</updated>
    <content type="html"><![CDATA[<img src="/images/hexo-logo.png" class="img-thumbnail">
<p>The hexo theme shows code in a solid black box with syntax hightlghting to match.  It gives a nice contrast to the rest of the content, however I wanted to add curves to the corner of the code boxes.  I also wanted to  add a margin / padding around the code box so it did not touch the edges of the post.</p>
<a id="more"></a>
<h1 id="Add_corners_to_the_code_box">Add corners to the code box</h1><p>Values for commonly used styles are defined as variables in the file <code>source/css/_variables.styl</code>.  This makes it easy to redefine a style across the whole theme with a single change.</p>
<p>In this case, I defined a <code>code-border-radius</code> variable and gave it a value of 10px.</p>
<figure class="highlight"><figcaption><span>source/css/_partial/header.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code-border-radius = 10px</span><br></pre></td></tr></table></figure>
<p>I edited the <code>source/css/_partial/highlight.styl</code> file and added definitions to the <code>$code-block</code> style: </p>
<ul>
<li><code>boarder-radius</code> adds a cure to the corner using size defined in the variable <code>code-border-radius</code></li>
<li><code>background: #333</code> - why did I add this ?</li>
<li><code>margin: 1px 10px 1px 10px</code> puts a space of 10 pixels at the left and right of the code block, as well as a 1 pixel space above and below</li>
<li><code>border: 3px solid #EEEEEE;</code> adds a discrete white boarder around the codeblock to make it blend into the page gracefully.</li>
</ul>
<p>The updated <code>$code-block</code> style now looks like (added lines 11-14):</p>
<figure class="highlight css"><figcaption><span>source/css/_partial/highlight.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$<span class="tag">code-block</span></span><br><span class="line">  <span class="tag">background</span>: <span class="tag">highlight-background</span></span><br><span class="line">  <span class="tag">margin</span>: 0 <span class="tag">article-padding</span> * <span class="tag">-1</span></span><br><span class="line">  <span class="tag">padding</span>: 15<span class="tag">px</span> <span class="tag">article-padding</span></span><br><span class="line">  <span class="tag">border-style</span>: <span class="tag">solid</span></span><br><span class="line">  <span class="tag">border-color</span>: <span class="tag">color-border</span></span><br><span class="line">  <span class="tag">border-width</span>: 1<span class="tag">px</span> 0</span><br><span class="line">  <span class="tag">overflow</span>: <span class="tag">auto</span></span><br><span class="line">  <span class="tag">color</span>: <span class="tag">highlight-foreground</span></span><br><span class="line">  <span class="tag">line-height</span>: <span class="tag">font-size</span> * <span class="tag">line-height</span></span><br><span class="line">  <span class="tag">border-radius</span>: <span class="tag">code-border-radius</span></span><br><span class="line">  <span class="tag">background</span>: <span class="id">#333</span>;</span><br><span class="line">  <span class="tag">margin</span>: 1<span class="tag">px</span> 10<span class="tag">px</span> 1<span class="tag">px</span> 10<span class="tag">px</span></span><br><span class="line">  <span class="tag">border</span>: 3<span class="tag">px</span> <span class="tag">solid</span> <span class="id">#EEEEEE</span>;</span><br></pre></td></tr></table></figure>
<p> I didnt make any further changes in to the theme in the <code>highlight.styl</code> file.  However, there are other things in this file you may want to modify.</p>
<h2 id="Line_numbers">Line numbers</h2><p> The hexo theme makes the line numbers smaller in font size and makes the numbers look faded by using colour number 666.  This looked good to me, so I didnt change these styles.</p>
 <figure class="highlight css"><figcaption><span>source/css/_partial/highlight.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$<span class="tag">line-numbers</span></span><br><span class="line"> <span class="tag">color</span>: <span class="id">#666</span></span><br><span class="line"> <span class="tag">font-size</span>: 0<span class="class">.85em</span></span><br></pre></td></tr></table></figure>
<h2 id="More_customisation_possible">More customisation possible</h2><p>There is a whole range of settings that affect the code-block and other highlighted areas of articles in the <code>highlight.styl</code> file, however I did feel the need to make any changes here.  </p>
<p>If I get tired of the black background for code I could change it here, although I’d need to check the colours used for syntax highlighting still worked with the new code background.</p>
 <figure class="highlight css"><figcaption><span>source/css/_partial/highlight.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.article-entry</span></span><br><span class="line"> <span class="tag">pre</span>, <span class="tag">code</span></span><br><span class="line">   <span class="tag">font-family</span>: <span class="tag">font-mono</span></span><br><span class="line"> <span class="tag">code</span></span><br><span class="line">   <span class="tag">background</span>: <span class="tag">color-background</span></span><br><span class="line">   <span class="tag">text-shadow</span>: 0 1<span class="tag">px</span> <span class="id">#fff</span></span><br><span class="line">   <span class="tag">padding</span>: 0 0<span class="class">.3em</span></span><br><span class="line"> <span class="tag">pre</span></span><br><span class="line">   <span class="at_rule">@<span class="keyword">extend</span> $code-block</span><br><span class="line">   code</span><br><span class="line">     background: none</span><br><span class="line">     text-shadow: none</span><br><span class="line">     padding: <span class="number">0</span></span><br><span class="line"> .highlight</span><br><span class="line">   @extend $code-block</span><br><span class="line">   pre</span><br><span class="line">     border: none</span><br><span class="line">     margin: <span class="number">0</span></span><br><span class="line">     padding: <span class="number">0</span></span><br><span class="line">   table</span><br><span class="line">     margin: <span class="number">0</span></span><br><span class="line">     width: auto</span><br><span class="line">   td</span><br><span class="line">     border: none</span><br><span class="line">     padding: <span class="number">0</span></span><br><span class="line">   figcaption</span><br><span class="line">     <span class="function">clearfix</span>()</span><br><span class="line">     font-size: <span class="number">0.85em</span></span><br><span class="line">     color: highlight-comment</span><br><span class="line">     line-height: <span class="number">1em</span></span><br><span class="line">     margin-bottom: <span class="number">1em</span></span><br><span class="line">     a</span><br><span class="line">       float: right</span><br><span class="line">   .gutter pre</span><br><span class="line">     @extend $line-numbers</span><br><span class="line">     text-align: right</span><br><span class="line">     padding-right: <span class="number">20px</span></span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<img src="/images/hexo-logo.png" class="img-thumbnail">
<p>The hexo theme shows code in a solid black box with syntax hightlghting to match.  It gives a nice contrast to the rest of the content, however I wanted to add curves to the corner of the code boxes.  I also wanted to  add a margin / padding around the code box so it did not touch the edges of the post.</p>]]>
    
    </summary>
    
      <category term="hexo" scheme="http://jr0cket.co.uk/tags/hexo/"/>
    
      <category term="blogging" scheme="http://jr0cket.co.uk/categories/blogging/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo Custom Theme - Maximising the Layout of the Website]]></title>
    <link href="http://jr0cket.co.uk/2014/06/hexo-custom-theme---maximising-the-layout-of-the-website.html"/>
    <id>http://jr0cket.co.uk/2014/06/hexo-custom-theme---maximising-the-layout-of-the-website.html</id>
    <published>2014-06-03T14:52:05.000Z</published>
    <updated>2015-03-18T15:08:46.208Z</updated>
    <content type="html"><![CDATA[<img src="/images/hexo-logo.png" class="img-thumbnail">
<p>Whilst I like many aspects of the Hexo theme used to generate static websites, it does seem to have a lot of redundant space.  So here are a few aspects of the them I have changes in order to get more of the actual content showing on the page.</p>
<a id="more"></a>
<h1 id="Scaling_down_the_header_space">Scaling down the header space</h1><p>The most obvious occurance is the header image, which takes up a huge part of the screen on the desktop.</p>
<h1 id="Scaling_down_the_image">Scaling down the image</h1><h1 id="Changing_the_image">Changing the image</h1><p>The most obvious way to make your website look different from all the other Hexo generated websites is to change the header image.</p>
<h2 id="Header_image_with_my_cat">Header image with my cat</h2><p>Very personal, not neccessarily representative of the website content though.</p>
<p>Also not that easy to see the text in the top navigation bar, as the text and icons are white and the background image is light.</p>
<p>Boosting the opacity of the naviation text and icons makes them stand out better on the lighter background.</p>
<h3 id="Chaning_Navbar_text_opacity">Chaning Navbar text opacity</h3><p>The CSS definition called nav-link contains an opacity value.  This was changed from 0.6 (60 percent) to 0.8 (80 percent) to make the navbar links more visible when hovering over them with the mouse.</p>
<figure class="highlight css"><figcaption><span>source/css/_partial/header.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$<span class="tag">nav-link</span></span><br><span class="line">  <span class="tag">float</span>: <span class="tag">left</span></span><br><span class="line">  <span class="tag">color</span>: <span class="id">#fff</span></span><br><span class="line">  <span class="tag">opacity</span>: 0<span class="class">.8</span></span><br><span class="line">  <span class="tag">text-decoration</span>: <span class="tag">none</span></span><br><span class="line">  <span class="tag">text-shadow</span>: 0 1<span class="tag">px</span> <span class="tag">rgba</span>(0, 0, 0, 0<span class="class">.2</span>)</span><br><span class="line">  <span class="tag">transition</span>: <span class="tag">opacity</span> 0<span class="class">.2s</span></span><br><span class="line">  <span class="tag">display</span>: <span class="tag">block</span></span><br><span class="line">  <span class="tag">padding</span>: 20<span class="tag">px</span> 15<span class="tag">px</span></span><br><span class="line">  &amp;<span class="pseudo">:hover</span></span><br><span class="line">    <span class="tag">opacity</span>: 1</span><br></pre></td></tr></table></figure>
<h2 id="Increase_the_size_of_the_logo_text">Increase the size of the logo text</h2><p>I change my logo to say “community developer” and wanted it to take up less room in the header.  So I found the CSS declaration for <code>logo-text</code> and increased the font weight from 300 to 700</p>
<figure class="highlight css"><figcaption><span>source/css/_partial/header.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$<span class="tag">logo-text</span></span><br><span class="line">  <span class="tag">text-decoration</span>: <span class="tag">none</span></span><br><span class="line">  <span class="tag">color</span>: <span class="id">#fff</span></span><br><span class="line">  <span class="tag">font-weight</span>: 300</span><br><span class="line">  <span class="tag">text-shadow</span>: 0 1<span class="tag">px</span> 4<span class="tag">px</span> <span class="tag">rgba</span>(0, 0, 0, 0<span class="class">.3</span>)</span><br></pre></td></tr></table></figure>  
<p> The same for the main-nav-link text</p>
<figure class="highlight css"><figcaption><span>source/css/_partial/header.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.main-nav-link</span></span><br><span class="line">  <span class="at_rule">@<span class="keyword">extend</span> $nav-link</span><br><span class="line">  font-weight: <span class="number">700</span></span><br><span class="line">  letter-spacing: <span class="number">1px</span></span><br><span class="line">  @media mq-mobile</span><br><span class="line">    display: none</span></span><br></pre></td></tr></table></figure>
<h2 id="More_navbar_changes">More navbar changes</h2><ul>
<li>Reduced the banner height from 300px to 120px </li>
<li>reduced the logo size from 40px to 32pd</li>
<li>changed banner-url to point to a different image</li>
</ul>
<figure class="highlight"><figcaption><span>source/css/_variables.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// Header</span><br><span class="line">logo-size = 32px</span><br><span class="line">subtitle-size = 16px</span><br><span class="line">banner-height = 120px</span><br><span class="line">banner-url = "images/cat-eyes-and-paw.png"</span><br></pre></td></tr></table></figure>
<h3 id="Previous_values">Previous values</h3><p>// Header<br>logo-size = 40px<br>subtitle-size = 16px<br>banner-height = 300px<br>banner-url = “images/banner.jpg”</p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="/images/hexo-logo.png" class="img-thumbnail">
<p>Whilst I like many aspects of the Hexo theme used to generate static websites, it does seem to have a lot of redundant space.  So here are a few aspects of the them I have changes in order to get more of the actual content showing on the page.</p>]]>
    
    </summary>
    
      <category term="hexo" scheme="http://jr0cket.co.uk/tags/hexo/"/>
    
      <category term="blogging" scheme="http://jr0cket.co.uk/categories/blogging/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo Custom Theme - Using FontAwesome Icons]]></title>
    <link href="http://jr0cket.co.uk/2014/06/hexo-custom-theme---adding-navbar-icon-links-using-fontawesome.html"/>
    <id>http://jr0cket.co.uk/2014/06/hexo-custom-theme---adding-navbar-icon-links-using-fontawesome.html</id>
    <published>2014-06-01T18:50:09.000Z</published>
    <updated>2015-03-18T15:08:46.208Z</updated>
    <content type="html"><![CDATA[<img src="/images/hexo-logo.png" class="img-thumbnail">
<p><a href="http://fortawesome.github.io/Font-Awesome/" target="_blank" rel="external">FontAwesome</a> provides a lot of icons you can use in your website instead of including image logos of various sizes.  There are icons for twitter, linkedin, Github and RSS feeds.  Using these icons keeps your website fast on any device or network.</p>
<p>I’ll explain how I configured the standard <a href="https://github.com/hexojs/hexo-theme-landscape" target="_blank" rel="external">Hexo Landscape theme</a> to add icons in my blog website navigation bar, each icon linking to the developer related sites I use such as Github and Twitter.</p>
<a id="more"></a> 
<h1 id="FontAwesome_icons_are_awesome">FontAwesome icons are awesome</h1><p>FontAwesome is a font that has a wide range of icons, including logos from common websites such at Twitter, Github, LinkedIn, etc.  Using a font for these logos is more efficient when it comes to load times of your website, as you only need to include one font which scales to different sizes.</p>
<img src="/images/font-awesome-icons.png" class="img-code">
<h1 id="Adding_Icons_Styles_to_the_CSS">Adding Icons Styles to the CSS</h1><p>The Hexo theme already had two CSS ID’s defined in the header styles, providing icons for the RSS feed and search button.  I simpy copied these style definitions for the addtional icons I wanted, giving each icon its own unique CSS ID.</p>
<p>To get the correct code for the FontAwesome icon I wanted, I refered to this <a href="http://astronautweb.co/snippet/font-awesome/" target="_blank" rel="external">list of CSS content values</a>.</p>
<p>I updated the <code>source/css/_partial/header.styl</code> file to include the additional icon styles.</p>
<figure class="highlight css"><figcaption><span>source/css/_partial/header.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="id">#nav-rss-link</span></span><br><span class="line">  &amp;<span class="pseudo">:before</span></span><br><span class="line">    <span class="tag">content</span>: "\<span class="tag">f09e</span>"</span><br><span class="line"></span><br><span class="line"><span class="id">#nav-twitter-link</span></span><br><span class="line">  &amp;<span class="pseudo">:before</span></span><br><span class="line">    <span class="tag">content</span>: "\<span class="tag">f099</span>"</span><br><span class="line"></span><br><span class="line"><span class="id">#nav-linkedin-link</span></span><br><span class="line">  &amp;<span class="pseudo">:before</span></span><br><span class="line">    <span class="tag">content</span>: "\<span class="tag">f0e1</span>"</span><br><span class="line"></span><br><span class="line"><span class="id">#nav-googleplus-link</span></span><br><span class="line">  &amp;<span class="pseudo">:before</span></span><br><span class="line">    <span class="tag">content</span>: "\<span class="tag">f0d5</span>"</span><br><span class="line"></span><br><span class="line"><span class="id">#nav-github-link</span></span><br><span class="line">  &amp;<span class="pseudo">:before</span></span><br><span class="line">    <span class="tag">content</span>: "\<span class="tag">f113</span>"</span><br><span class="line"></span><br><span class="line"><span class="id">#nav-search-btn</span></span><br><span class="line">  &amp;<span class="pseudo">:before</span></span><br><span class="line">    <span class="tag">content</span>: "\<span class="tag">f002</span>"</span><br></pre></td></tr></table></figure>
<h1 id="Adding_Icons_to_the_header_layout">Adding Icons to the header layout</h1><p>Now the icon style are defined, we need to include them in the navigation bar layout.  This navigation bar layout is defined in the file <code>layout/_partial/header.ejs</code>, see lines 3,4,and 5 below: </p>
<figure class="highlight javascript"><figcaption><span>layout/_partial/header.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;nav id=<span class="string">"sub-nav"</span>&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="title">a</span> <span class="attribute">id</span>=<span class="value">"nav-github-link"</span> <span class="attribute">class</span>=<span class="value">"nav-icon"</span> <span class="attribute">href</span>=<span class="value">"https://github.com/jr0cket"</span> <span class="attribute">target</span>=<span class="value">"_blank"</span>&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">a</span> <span class="attribute">id</span>=<span class="value">"nav-linkedin-link"</span> <span class="attribute">class</span>=<span class="value">"nav-icon"</span> <span class="attribute">href</span>=<span class="value">"https://uk.linkedin.com/in/jr0cket"</span> <span class="attribute">target</span>=<span class="value">"_blank"</span>&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">a</span> <span class="attribute">id</span>=<span class="value">"nav-twitter-link"</span> <span class="attribute">class</span>=<span class="value">"nav-icon"</span> <span class="attribute">href</span>=<span class="value">"https://twitter.com/jr0cket"</span> <span class="attribute">target</span>=<span class="value">"_blank"</span>&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">a</span> <span class="attribute">id</span>=<span class="value">"nav-googleplus-link"</span> <span class="attribute">class</span>=<span class="value">"nav-icon"</span> <span class="attribute">href</span>=<span class="value">"https://plus.google.com/117080433375668558463"</span> <span class="attribute">target</span>=<span class="value">"_blank"</span>&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">%</span> <span class="attribute">if</span> (<span class="attribute">theme.rss</span>)&#123; %&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">a</span> <span class="attribute">id</span>=<span class="value">"nav-rss-link"</span> <span class="attribute">class</span>=<span class="value">"nav-icon"</span> <span class="attribute">href</span>=<span class="value">"&lt;%- theme.rss %&gt;"</span> <span class="attribute">title</span>=<span class="value">"RSS Feed"</span>&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">%</span> &#125; %&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">a</span> <span class="attribute">id</span>=<span class="value">"nav-search-btn"</span> <span class="attribute">class</span>=<span class="value">"nav-icon"</span> <span class="attribute">title</span>=<span class="value">"Search"</span>&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">nav</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h1 id="The_finished_result">The finished result</h1><p>As soon as both files are saved, I can see the results as soon as I refresh the browser as I am running <code>hexo server</code>.  </p>
<p>My navigation bar now has more icons displayed, each icon linking to my other developer websites</p>
<img src="/images/hexo-theme-navbar-icons-fontawesome.png" class="img-code">
<p>The navigation bar has a link for my Github, LinkedIn, Twitter and Google plus profile pages.</p>
<p>Thank you<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="/images/hexo-logo.png" class="img-thumbnail">
<p><a href="http://fortawesome.github.io/Font-Awesome/">FontAwesome</a> provides a lot of icons you can use in your website instead of including image logos of various sizes.  There are icons for twitter, linkedin, Github and RSS feeds.  Using these icons keeps your website fast on any device or network.</p>
<p>I’ll explain how I configured the standard <a href="https://github.com/hexojs/hexo-theme-landscape">Hexo Landscape theme</a> to add icons in my blog website navigation bar, each icon linking to the developer related sites I use such as Github and Twitter.</p>]]>
    
    </summary>
    
      <category term="hexo" scheme="http://jr0cket.co.uk/tags/hexo/"/>
    
      <category term="blogging" scheme="http://jr0cket.co.uk/categories/blogging/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Managing Hexo Blog Content With Git Submodules]]></title>
    <link href="http://jr0cket.co.uk/2014/05/managing-hexo-blog-content-with-git-submodules.html"/>
    <id>http://jr0cket.co.uk/2014/05/managing-hexo-blog-content-with-git-submodules.html</id>
    <published>2014-05-27T06:09:44.000Z</published>
    <updated>2015-03-18T15:08:46.208Z</updated>
    <content type="html"><![CDATA[<img src="/images/hexo-logo.png" class="img-thumbnail">
<p> You can use Git to manage version of your content effectively.  You can also use Git to manage any changes you make to the theme you use.</p>
<p>Rather than keep all these seperate changes in one repository, you can use Git submodules to manage your theme and content changes seperately.</p>
<a id="more"></a>
<blockquote>
<p>In have detailed how I used <a href="/hexo/using-git-submodules-for-custom-hexo-theme.html">Git Submodules for managing content seperately from a custom theme</a> and how to <a href="/2014/04/getting-started-with-hexo---a-modern-static-site-generator/">get started with Hexo</a></p>
</blockquote>
<img src="https://lh3.googleusercontent.com/-VuoPUgPuNV8/U4uIHw5YjoI/AAAAAAAAOTs/7PF8HvWrwIQ/w320-h240-no/git-submodules-concept.png" class="img-code">
<p>Thank you<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="/images/hexo-logo.png" class="img-thumbnail">
<p> You can use Git to manage version of your content effectively.  You can also use Git to manage any changes you make to the theme you use.</p>
<p>Rather than keep all these seperate changes in one repository, you can use Git submodules to manage your theme and content changes seperately.</p>]]>
    
    </summary>
    
      <category term="git" scheme="http://jr0cket.co.uk/tags/git/"/>
    
      <category term="hexo" scheme="http://jr0cket.co.uk/tags/hexo/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Git Submodules Pros and Cons]]></title>
    <link href="http://jr0cket.co.uk/2014/05/git-submodules-pros-and-cons.html"/>
    <id>http://jr0cket.co.uk/2014/05/git-submodules-pros-and-cons.html</id>
    <published>2014-05-26T14:14:42.000Z</published>
    <updated>2015-03-18T15:08:46.208Z</updated>
    <content type="html"><![CDATA[<img src="/images/git-logo.png" class="img-thumbnail">
<p>Git is the version control system of choice by most developers, however when it comes to Git Submodules there is some contention as to their value.  I have used them successfully and when you understand where they fit in you can use them to benefit your own projects too.</p>
<p>I’ll explain what Git Submodules as well as why some developers are using them and some developers warn you not to.</p>
<a id="more"></a>
<h1 id="Git_Submodules_Overview">Git Submodules Overview</h1><img src="/images/git-submodules-abstract.png" class="img-topic">
<p>A submodule appears to be just a subdirectory of another git repository.  Actually its a full and seperate git repository itself with its own commit history. </p>
<p>Submodules are not clones or branches of a single repository and I would advise against merging submodules into the main repository.</p>
<p>You can have many submodules within a git repository and even have submodules in a submodule.</p>
<p>Submodules are useful if you have a code or content in one git repository that you want to use with several other git managed projects, yet you still want to keep the change history seperate.  For example, you may be using a library that is under active development and you need to develop you code along with any changes.</p>
<p>Git Submodules allow you to share two or more repositories as though they were one.  Each repository maintains its own seperate change history and submodules are updated independently of the main repository.  When you clone or pull a repository with a submodule, the repository has a link to where to get the submodle code from.</p>
<h1 id="My_blog:_A_simple_example_of_Git_Submodules">My blog: A simple example of Git Submodules</h1><img src="/images/hexo-submodules-theme-devguides.png" class="img-topic">
<p>I use Hexo.io, a static site generator, to create this blog you are reading.  I create all my content in markdown and push it to a github repository as a backup.  The generated site is also deployed as a Github Pages site.</p>
<p>I started using a Git Submodule with my project as I wanted to make significant changes to the default theme that Hexo uses.  However, I didnt want to add the theme or my changes to the repository I am managing all my content, as I dont want to tie the content to a particular platform.</p>
<p>So by forking the Hexo defalut theme into a seperate repository, I can then add the theme repository as a submodule of my content repository.  I can create a history of changes to the theme and roll back if there are bugs without having to worry about dropping content changes.</p>
<p>I also have an existing repository for a series of developer guides I created, which I can also add as a sub-module and still keep that repository seperate for those who wish to only work with my guides (and not my full content).  </p>
<h2 id="Prezto:_A_bigger_example_of_submodules_in_actions">Prezto: A bigger example of submodules in actions</h2><p>I use a project calle Prezto which provides a great setup for using Zsh.  The Prezto project pulls in several other projects, each of which configures specific features of Zsh.  Rather than pull all the code into one repository, submodules means that updates from the other projects are easily incorporated into the main Prezto project.</p>
<h1 id="Git_Submodules_usage">Git Submodules usage</h1><p>To start using git submodules you first need a Git repository, this can be a new repository or an existing one.  Lets call this the <em>main repository</em>.</p>
<p>In the root of the main repository, you add a submodule using the <code>git submodule add</code> command as follows:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git submodule  add -b &lt;branch&gt; --name &lt;name&gt;  &lt;repository&gt;</span><br><span class="line"></span><br><span class="line">git submodule add &lt;repository-url&gt; &lt;sub-directory-name&gt;</span><br></pre></td></tr></table></figure>
<p>In the man repository you can now see a directory called … [TODO: Is the directory named after <name> ?]</name></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule [--quiet] status [--cached] [--recursive] [--] [&lt;path&gt;...]</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule [--quiet] init [--] [&lt;path&gt;...]</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule [--quiet] update [--init] [--remote] [-N|--no-fetch]</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule [--quiet] summary [--cached|--files] [(-n|--summary-limit) &lt;n&gt;]</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule [--quiet] sync [--] [&lt;path&gt;...]</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule [--quiet] foreach [--recursive] &lt;<span class="built_in">command</span>&gt;</span><br></pre></td></tr></table></figure>
<p>To see the full list of options, please read the <a href="http://git-scm.com/docs/git-submodule" target="_blank" rel="external">Git Submodules onlne man pages</a>.</p>
<h1 id="Reasons_not_to_use_Git_Submodules">Reasons not to use Git Submodules</h1><p>Git Submodules add complexity to your version control system and you should ensure using Submodules is more of a benefit than that complexity.  If you ever plan on merging submodules into the main repository, this is possible but its probably better to not use submodules in the first place.</p>
<h1 id="In_Summary">In Summary</h1><p>Git Submodules are a great way to distribute several repositories all as one.  Each Submodule should be treated as a completely seperate repository to get the most sence out of using Git Submodules.  Take the time to learn how to use Submodules and you will find them easy to use and very helpful in the right situations.</p>
<ul>
<li><a href="http://git-scm.com/book/en/Git-Tools-Submodules" target="_blank" rel="external">Git-scm: Git tools - submodules</a></li>
<li><a href="http://git-scm.com/docs/git-submodule" target="_blank" rel="external">Git-scm: Git Submodules man page</a></li>
<li><a href="http://blogs.atlassian.com/2013/03/git-submodules-workflows-tips/" target="_blank" rel="external">Atlassian: Git Submodule workflow tips</a></li>
<li><a href="http://git-scm.com/docs/git-submodule" target="_blank" rel="external">Git Submodules onlne man pages</a></li>
</ul>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="/images/git-logo.png" class="img-thumbnail">
<p>Git is the version control system of choice by most developers, however when it comes to Git Submodules there is some contention as to their value.  I have used them successfully and when you understand where they fit in you can use them to benefit your own projects too.</p>
<p>I’ll explain what Git Submodules as well as why some developers are using them and some developers warn you not to.</p>]]>
    
    </summary>
    
      <category term="git" scheme="http://jr0cket.co.uk/tags/git/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Migrating From Blogger.com to Hexo.io Static Site Generator]]></title>
    <link href="http://jr0cket.co.uk/2014/04/migrating-articles-to-hexo-from-bloggercom.html"/>
    <id>http://jr0cket.co.uk/2014/04/migrating-articles-to-hexo-from-bloggercom.html</id>
    <published>2014-04-20T16:27:21.000Z</published>
    <updated>2015-03-18T15:08:46.212Z</updated>
    <content type="html"><![CDATA[<img src="/images/hexo-logo.png" class="img-thumbnail">
<p>I found writing articles with <a href="http://blogger.com" target="_blank" rel="external">Blogger.com</a> had become slow and a little frustrating.  So I decided to switch to Hexo.io as I can write articles anywhere I have a text editor (usually Emacs).  Hexo also creates a responsive and fast static website, so when people want to read the articles (including myself when I have forgotten something) then they can do so quickly and across multiple devices.  As its a static site, I can deploy it anywhere.</p>
<p>So how do I get all of that content I created out of Blogger and into Hexo.  Luckily Hexo has a migration tool to make things easier</p>
<a id="more"></a>
<h2 id="Hexo_migration_package">Hexo migration package</h2><p>Hexo has a seperate tool called <code>hexo-migrator</code> to pull in content from an RSS feed and there is a more specific migrator for Wordpress.  These migrators are installed as an npm package just like any other: </p>
<pre><code>npm <span class="keyword">install</span> hexo-migrator -g
</code></pre><p>Unforntunatley the npm packaged version of hexo-migrator failed when I tried to import from blogger, regardless of whether I used the blog URL or by downloading the XML file generated by the RSS feed.  The error I got was already reported as <a href="https://github.com/hexojs/hexo-migrator-rss/issues" target="_blank" rel="external">an issue on the hexo-migrator Github site</a> and a fix already applied.  This fix had not yet been packaged up as a new npm version at the time of writing.</p>
<h3 id="Hexo_migration_from_Github">Hexo migration from Github</h3><p>As a fix for the Blogger import problem exists in the Github repository, I installed the hexo migration tool directly from there.  Node package manager allows you to install directly from a Github repository (handy when someone has not patch an npm package yet).  So to install the latest version of hexo-migrator, I used the command:</p>
<pre><code>npm <span class="keyword">install</span> <span class="string">"git+https://github.com/hexojs/hexo-migrator-rss.git"</span>
</code></pre><p>I used the https address for the Github repository as I dont have SSH access.  However, to work you also have to put <strong>git+</strong> infront of the repository address for npm to work.  I am assuming <strong>git+</strong> tells npm that we are pulling from a github repository rather than a regular file system.</p>
<h2 id="Running_the_migration">Running the migration</h2><p>The migration to is very simple to use, simply run <code>hexo migrate</code> specifiying the type of input, <code>rss</code> and the location of your content.  In my case I just pulled the Blogger content directly from the website, although you could download the XML code generated by the RSS feed links and save them as a file for importing. following command and point it at the RSS feed of your website.  </p>
<p>I created a new hexo site specifically to import blogger posts, so I would not interfeir whith the posts that I had already written using Hexo.  So if everything went wrong I could easily delete the new site and still have my new posts running. </p>
<p>To import content directly from my blogger site into a new hexo project I used the following commands:</p>
<pre><code>hexo init hexo-blogger-<span class="preprocessor"><span class="keyword">import</span></span>
cd hexo-blogger-<span class="preprocessor"><span class="keyword">import</span></span>
hexo migrate rss http://blog.jr0cket.co.uk/<span class="keyword">default</span>?alt=rss
hexo server
</code></pre><p>It worked, brilliant.  I have a whole bunch of migrated articles in <strong>source/_posts/</strong> folder.  Running the <code>hexo server</code> allowed my to quickly see the results.</p>
<h2 id="Oh_not_everything_is_there">Oh not everything is there</h2><p>Whilst the hexo migration tool successfully grabbed articles from my blog, it only got the first 25 posts.  I have about 200 posts so my excitement was short lived.  It turns out that this is not a problem with the hexo migration tool, but a problem with the RSS feed from blogger.</p>
<p>I clicked the RSS link on the blogger website and looking at the XML (a horible thing to do) I saw that it was only giving me the first 25 posts.  </p>
<h2 id="Migration_by_labels">Migration by labels</h2><p>Checking on the sites I syndicate some of my blogs too, I noticed a different form for the RSS web address (URL).  I share selective posts with <a href="http://planet.clojure.in/" target="_blank" rel="external">Planet Clojure</a> and <a href="http://planet.emacsen.org/" target="_blank" rel="external">Planet Emacsen</a>. this is done using specific blogger labels (aka tags) (i.e. PlanetClojure, PlanetEmacsen).  These RSS syndication sites were given the following RSS URL’s</p>
<pre><code><span class="symbol">http:</span>/<span class="regexp">/blog.jr0cket.co.uk/feeds</span><span class="regexp">/posts/default</span><span class="regexp">/-/</span><span class="constant">PlanetClojure</span>
<span class="symbol">http:</span>/<span class="regexp">/blog.jr0cket.co.uk/feeds</span><span class="regexp">/posts/default</span><span class="regexp">/-/</span><span class="constant">PlanetEmacsen</span>
</code></pre><p>So by using the different labels (Blogger calls tags labels) I could pull out more posts from blogger, even though each request would only return a maximum of 25 posts.  So instead of the default rss feed used in the first hexo migration, I used the following commands:</p>
<pre><code>hexo migrate rss <span class="string">http:</span><span class="comment">//blog.jr0cket.co.uk/-/Clojure</span>
hexo migrate rss <span class="string">http:</span><span class="comment">//blog.jr0cket.co.uk/-/Emacs</span>
hexo migrate rss <span class="string">http:</span><span class="comment">//blog.jr0cket.co.uk/-/Ubuntu</span>
hexo migrate rss <span class="string">http:</span><span class="comment">//blog.jr0cket.co.uk/-/Agile</span>
hexo migrate rss <span class="string">http:</span><span class="comment">//blog.jr0cket.co.uk/-/Kanban</span>
</code></pre><p>So I carried on for each blogger label I had defined on my post until I thought I had most of the posts migrated.  Not perfect, but until I know how to get blogger to give me more than 25 posts from its RSS feed that will have to do.</p>
<h2 id="Testing_the_migrated_content">Testing the migrated content</h2><p>As I was already running <code>hexo server</code> then I could see the results as I was importing each posts from a partiular blogger lable.  All I needed to do was refresh the browser each time and click on the relevant tag in the tag cloud sidebar.  </p>
<p>If you are not running the server during the migration, you can start it by using the following command in the root of your hexo project:</p>
<pre><code>hexo <span class="keyword">server</span> 
</code></pre><p>Now open your browser at <a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a> and see the results of the migration.</p>
<p>Each of the posts I migrated is in my blog, although the tags need tidying up (I wasnt very consistent in blogger).  The great thing is that all the posts are in date order, as the published date of each blog was put into each markdown file generated by the migration.</p>
<h2 id="Migration_isnt_perfect">Migration isnt perfect</h2><p>Whist my articles were copied over to markdown files okay, some of my post brought along with them additional styles (div’s, class styles, non-breaking spaces, etc) and other artefacts that messed up the styles that Hexo applies.  </p>
<p>Some of the styling for headers and subheaders is using the markdown notation for bold, rather than heading.  Headers in particular are a good thing to correct, as search engines base some of the articles relevance on those headers.</p>
<p>With some of the migrated posts I open them up in an editor and delete any offending styling that came with them.  To tell which ones to open, I use the Unix command <code>grep</code> to find which of my posts have <strong>&lt;div</strong> in their text:</p>
<pre><code><span class="keyword">grep</span> <span class="string">"&lt;div"</span> <span class="keyword">source</span><span class="regexp">/_posts/</span>* 
</code></pre><p>It turns out that most of my posts do, so if I want to see which ones I really need to fix then it probably easiest to look at the locally running website created by <code>hexo server</code>.  So I opened my browser at <a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a> and had a look at the posts to see which ones needed the most attention.</p>
<p>My basic strategy was to work from the most recent blog post, working backwards until I didnt care about any older posts.</p>
<h2 id="Updating_Categories_and_Tags">Updating Categories and Tags</h2><p>The Hexo rss migrator pulled in all the tags (labels) form my posts on Blogger and listed them correctly in the frontmatter of each post.  </p>
<p>Whilst editing the posts to remove the rogue style code, it was a chance to refine the tags I used and select a category for each post.  Using the local hexo server, it was quite quick to refine the tags I used by looking all all the words in the tag cloud sidebar.  Where I had used similar tags I could just pick one to make it easier and simpler to find the most relevant content on the site.</p>
<h2 id="Adding_Summary_breaks">Adding Summary breaks</h2><p>A nice feature of Hexo is that you can define how much of a summary view you want to have with each article.  The summary view is the main view of the blog and shows the title and the first part of your article.</p>
<p>You define where the summary view ends by using the following syntax in the article markdown file:</p>
<pre><code><span class="comment">&lt;!-- more --&gt;</span>
</code></pre><p>This is something you need to add manually to each article [TODO: check if there is a tool to do this], so if you have a lot of posts it may take a little while.  However it does help your audience (and yourself) scan through your content quickly.  </p>
<p>If you have a lot of older posts you are importing, then its not going to be a big problem as they will be many pages into your blog summary view. </p>
<h2 id="Images_still_on_Blogger">Images still on Blogger</h2><img src="https://lh5.googleusercontent.com/-2r7nkB71SpM/AAAAAAAAAAI/AAAAAAAAqOk/ea27J5tj5Mc/photo.jpg" class="img-thumbnail">
<p>The migration is not yet finished, even after I tidy up my posts.  Many of the images in my posts are stored in Blogger, which is actually Google picasa and now Google Plus photos.  Again there is another hexo tool called <a href="https://github.com/akfish/hexo-migrator-image" target="_blank" rel="external">hexo-migrator-image</a> which will copy all the remote images to your local filesystem and fix your links (hopefully).</p>
<p>Install hexo-migrator-image using the following command:</p>
<pre><code>npm <span class="keyword">install</span> hexo-migrator-image
</code></pre><p>Then run the hexo-migrator-image command and wait for all the images to download.</p>
<h3 id="Imaging_importing_was_not_so_successful">Imaging importing was not so successful</h3><p>The image migrator does not like https links and I had quite a lot of them.  When the image migrator hits an https link it just crashes too.</p>
<p>Even after changing all the https links to http the results were not as expected.  Whilst images had been copied to the local filespace, the names were all changed to long numbers rather than being the original descriptive filenames.  To compound the issue, the links in the posts were not updated with to point to the local images.</p>
<blockquote>
<p>I wonder if the hexo image migrator failed because the images were all within hypertext ancor links (a href’s).</p>
</blockquote>
<p>Rather than wrestle with the hexo image migrator, I decided to leave the images where they were on Google Plus.  </p>
<h2 id="Github_is_not_great_for_images">Github is not great for images</h2><img src="https://assets-cdn.github.com/images/modules/logos_page/Octocat.png" class="img-topic">
<p>There is not a lot of advantage putting your images in Github, except that they are right there where the rest of your website is.  However, using a good image repository that acts like a Content Delivery Network (CDN) should give you the same amount of speed and not waste space in the Github repository.</p>
<p>By keeping images out it also makes your Git repository quicker to fork and clone</p>
<p>So I will keep all my images on Google Plus.  Any photos I take with my Android phone end up on Google Plus anyway, so it makes sense to keep all my images there.</p>
<h2 id="Final_migration_check">Final migration check</h2><p>As a final sanity check that everything has been migrated correctly, I ran the <a href="https://github.com/sergiolepore/hexo-broken-link-checker" target="_blank" rel="external">hexo-broken-link-checker</a>.  This Hexo plugin detects links that don’t work, missing images and redirects.</p>
<p>As I occasionally link to my own posts, it was good to check that these still links still worked.</p>
<h2 id="In_Summary">In Summary</h2><p>Although I had a bit of editing of my blog posts after the migration, it was worth it to have all my blog content in markdown.  Now I can manage my posts much easier and do any updates easily in my favourite editor, Emacs.</p>
<p>Thank you<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="/images/hexo-logo.png" class="img-thumbnail">
<p>I found writing articles with <a href="http://blogger.com">Blogger.com</a> had become slow and a little frustrating.  So I decided to switch to Hexo.io as I can write articles anywhere I have a text editor (usually Emacs).  Hexo also creates a responsive and fast static website, so when people want to read the articles (including myself when I have forgotten something) then they can do so quickly and across multiple devices.  As its a static site, I can deploy it anywhere.</p>
<p>So how do I get all of that content I created out of Blogger and into Hexo.  Luckily Hexo has a migration tool to make things easier</p>]]>
    
    </summary>
    
      <category term="hexo" scheme="http://jr0cket.co.uk/tags/hexo/"/>
    
      <category term="migration" scheme="http://jr0cket.co.uk/tags/migration/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo Theme Tweaks - Showing Articles as Titles Only]]></title>
    <link href="http://jr0cket.co.uk/2014/04/hexo-theme-tweaks---showing-articles-as-titles-only.html"/>
    <id>http://jr0cket.co.uk/2014/04/hexo-theme-tweaks---showing-articles-as-titles-only.html</id>
    <published>2014-04-16T08:59:33.000Z</published>
    <updated>2015-03-18T15:08:46.208Z</updated>
    <content type="html"><![CDATA[<img src="/images/hexo-logo.png" class="img-thumbnail">
<p>Hexo displays posts in a summary format by default, showing the title and content of the article up to the point where the <code>more</code> marker is used:</p>
<a id="more"></a>
<p>I like this summary format for the main page as its where people tend to browse a little more and usually want a little more information to help them decide if they want to read the whole article.  </p>
<p>[TODO: Insert picture of summary layout]</p>
<p>However when someone selects the archive, category or tags section, they are most likely looking for something specific and so just showing the titles of the posts helps them scan the articles quickly.</p>
<p>So this article we will cover how to modify the default Hexo theme, landscape, to show summar and title only views.</p>
<!-- more -->
<h2 id="Understanding_the_layout">Understanding the layout</h2><p>Layout of the page is defined mainly in <a href="https://github.com/visionmedia/ejs" target="_blank" rel="external">EJS</a> format and then imported via the <code>theme/landscape/source/css/style.styl</code> file that is used to pull together a single <code>style.css</code> file for the whole site (once the site is generated).</p>
<p>All pages use the default <code>index.ejs</code> [is it index or layout - check the hexo docs] as a base template, over-riding it where desired.  For the front page of the blog this is fine.</p>
<p>The archive, categories and tag pages all use the same code, however these are the files we are going to change</p>
<pre><code>theme<span class="regexp">/landscape/</span>layouts<span class="regexp">/_partial/</span>archive.ejs
theme<span class="regexp">/landscape/</span>layouts<span class="regexp">/_partial/</span>category.ejs
theme<span class="regexp">/landscape/</span>layouts<span class="regexp">/_partial/</span>tag.ejs
</code></pre><p>Lets first find out what changes need to be made and in what file.</p>
<h2 id="Using_Chrome_developer_tools">Using Chrome developer tools</h2><p>You can use the Chrome developer tools to find out the secion of CSS that controls the displaying of the summary part of the article.</p>
<p>It turns out this summary part of the content is managed by a section called <code>article-entry</code>.  This is included in the file <code>theme/landscape/layouts/_partial/article.ejs</code>:</p>
<pre><code><span class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"article-entry"</span> <span class="attribute">itemprop</span>=<span class="value">"articleBody"</span>&gt;</span>
  </span>&lt;%<span class="ruby"> <span class="keyword">if</span> (post.excerpt &amp;&amp; index){ </span>%&gt;<span class="xml">
    </span>&lt;%-<span class="ruby"> post.excerpt </span>%&gt;<span class="xml">
    </span>&lt;%<span class="ruby"> <span class="keyword">if</span> (theme.excerpt_link){ </span>%&gt;<span class="xml">
      <span class="tag">&lt;<span class="title">p</span> <span class="attribute">class</span>=<span class="value">"article-more-link"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"</span></span></span>&lt;%-<span class="ruby"> config.root </span>%&gt;<span class="xml"><span class="tag"><span class="value"></span></span></span>&lt;%-<span class="ruby"> post.path </span>%&gt;<span class="xml"><span class="tag"><span class="value">#more"</span>&gt;</span></span>&lt;%=<span class="ruby"> theme.excerpt_link </span>%&gt;<span class="xml"><span class="tag">&lt;/<span class="title">a</span>&gt;</span>
      <span class="tag">&lt;/<span class="title">p</span>&gt;</span>
    </span>&lt;%<span class="ruby"> } </span>%&gt;<span class="xml"></span>
</code></pre><p>I tested that this was the code rendering the article summary using the Chrome developer tools.  I right-clicked on the first line of the code, the opening <strong>div</strong> tag, and selected <code>delete node</code><br><img src="/hexo-themes-test/images/hexo-theme-tweak-devtools-delete-node.png"></p>
<h2 id="Making_the_changes_to_the_theme">Making the changes to the theme</h2><p>There may be better approaches than I have taken, however mine is fairly straight formward.  I simply take a copy of the archive.ejs file and called it archive-titles.ejs.</p>
<p>I then remove the above code completely from the <code>articles-titles.ejs</code> file and call that file instead from the <code>archive.ejs</code>, <code>category.ejs</code> and <code>tag.ejs</code> files.</p>
<p>So the archive, catagory and tag files are changed calling the archive.ejs:</p>
<pre><code>&lt;%- partial(<span class="string">'_partial/archive'</span>, {<span class="string">pagination:</span> <span class="number">2</span>, <span class="string">index:</span> <span class="literal">true</span>}) %&gt;
</code></pre><p>and now call <code>archive-titles.ejs</code>:</p>
<pre><code>&lt;%- partial(<span class="string">'_partial/archive-titles'</span>, {<span class="string">pagination:</span> config.archive, <span class="string">index:</span> <span class="literal">true</span>}) %&gt;
</code></pre><p>With <code>hexo server</code> running these changes are picked up straight away, so we can easily see if the changes worked as expected</p>
<p>[TODO: image of changed archive]</p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="/images/hexo-logo.png" class="img-thumbnail">
<p>Hexo displays posts in a summary format by default, showing the title and content of the article up to the point where the <code>more</code> marker is used:</p>]]>
    
    </summary>
    
      <category term="hexo" scheme="http://jr0cket.co.uk/tags/hexo/"/>
    
      <category term="blogging" scheme="http://jr0cket.co.uk/categories/blogging/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Getting Started With Hexo - a Modern Static Site Generator]]></title>
    <link href="http://jr0cket.co.uk/2014/04/getting-started-with-hexo---a-modern-static-site-generator.html"/>
    <id>http://jr0cket.co.uk/2014/04/getting-started-with-hexo---a-modern-static-site-generator.html</id>
    <published>2014-04-12T14:13:19.000Z</published>
    <updated>2015-03-18T15:08:46.208Z</updated>
    <content type="html"><![CDATA[<img src="/images/hexo-logo.png" class="img-thumbnail">
<p>Hexo is a modern static website generator &amp; bloging platform written in Node.js.  It is a great way to create a blog or other content driven websites as all the content is written in markdown and can therefore be versioned with Git. </p>
<p>I am using Hexo for my developer blog (using blogger became very slow) and am also using Hexo for a series of online tutorials on developer tools.</p>
<p>Here is a quick guide to get going with Hexo.</p>
<a id="more"></a>
<h1 id="Install_Node-js">Install Node.js</h1><p>If you havent already got node, go to <a href="http://nodejs.org/" target="_blank" rel="external">nodejs.org</a> and follow the instructions.  My own preference is to install node into a directory called <strong>app</strong> in the root of my home directory.</p>
<h1 id="Install_Emacs_(optional)">Install Emacs (optional)</h1><p>This is not a requirement for Hexo, although Emacs and Emacs Live gives a fantastic experience when writing markdown content.  Emacs is a very lightweight and full screen editor.  Emacs Live syntactically highlights your markdown content, so headings, links, bold and italic styles are shown in as you type your content.  Italic style content even displays in italic.</p>
<img src="/images/emacs-live-markdown-screenshot.png" class="img-code">
<h1 id="Install_Hexo">Install Hexo</h1><p>There is really good documentation on the <a href="http://hexo.io" target="_blank" rel="external">hexo.io</a> website, althought all you need to do to install is:</p>
<pre><code>npm <span class="keyword">install</span> hexo -g
</code></pre><blockquote>
<p>If you install nodejs on the system path, you need to use the above command with sudo - i.e <code>sudo npm install hexo -g</code></p>
</blockquote>
<h1 id="Create_a_Hexo_projects">Create a Hexo projects</h1><img src="/images/hexo-workflow-commands.png" class="img-topic">
<p>Create a new hexo project, I usually do this in a folder called projects in my home folder:</p>
<pre><code>hexo init <span class="keyword">my</span>-project-<span class="property">name</span>
cd <span class="keyword">my</span>-project-<span class="property">name</span>
npm install 
</code></pre><p>This creates a new hexo project in a folder called <code>my-project-name</code>, so use what ever name you wish here.</p>
<p>The <code>npm install</code> command adds tools for processing different content sources and languages used in the Hexo themes.</p>
<h1 id="Configure_Hexo_to_your_will">Configure Hexo to your will</h1><p>Your new hexo project is configured using a file called <code>_config.yml</code>.  In this configuration file you can set the basics of your website, eg title, authour, language, etc.  You can also set the public address of your website (URL).</p>
<h2 id="Blog_specific_configuration">Blog specific configuration</h2><p>If you are creating a blog website, then you can define the structure used for your blog posts.  Your posts can use any combination of year, month, day and title.  By default the posts will use all 4 combined.  I prefer to just use the year, month and title.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">permalink: :year/:month/:day/:title/&#10;permalink: :year/:month/:title/</span><br></pre></td></tr></table></figure>
<p>You can also set the default filename, layout template (scafold) for new blog posts, when created with the command <code>hexo new</code>.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new_post_name: :title.md # File name of new posts&#10;default_layout: post</span><br></pre></td></tr></table></figure>
<h2 id="Version_your_Hexo_project">Version your Hexo project</h2><p>If you are deploying your website to Github pages then the generated content is versioned by Github.  However, the markdown content for your websites and any configuration changes you make will not be versioned.</p>
<p>If you are going to use this site for any important content, I’d recommend putting the Hexo project into a github repository (or similar service).  Using version control for your content helps you track changes effectively and gives an easy way for people to correct your content using Github pull reuests.</p>
<p>The directories and files to add to the version control system include:</p>
<ul>
<li><code>_config.yml</code> for your project configuration</li>
<li><code>source</code> directory for all the content in markdown </li>
<li>packages.json so the tools you use to generate the Hexo website will be installed when you run <code>npm install</code></li>
</ul>
<h2 id="Versioning_the_Hexo_theme">Versioning the Hexo theme</h2><p>You could also version the <code>theme</code> folder assuming you were going to make changes to the default hexo them.  However, it is better to create a new theme which is a copy of the Hexo default change with your changes added.  Then you can update the hexo project <code>_config.yml</code> to use this new theme.</p>
<p>If you decide to make a lot of theme changes then it may be better to version the theme as a seperate project.  This new theme can then be copied (cloned) in from the repository you are managing the theme with, or even set up the theme repository as a git submodule.</p>
<h1 id="Running_a_local_Hexo_server">Running a local Hexo server</h1><p>Although you wont have much content at this stage, you can still see what the website looks like by running Hexo server locally:</p>
<pre><code>hexo <span class="keyword">server</span> 
</code></pre><p>By default this runs a node application on port 4000, so open your browser at: <a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a></p>
<h1 id="Adding_blog_posts_to_your_Hexo_projects">Adding blog posts to your Hexo projects</h1><p>The easiest way to add a new blog post is to let Hexo generate it for you from its template, this will ensure your post picks up the current them and any blog specific styling:</p>
<pre><code>hexo <span class="keyword">new</span> <span class="string">"name of my blog post with full on SEO"</span>
</code></pre><p>Hexo will return with the full path to the file it has created for you.  Edit this file in your favourite editor (surely this is Emacs).  Becareful to add your content after the <strong>frontmatter</strong>, this is the first few lines that define the title, date, style and tags used for the post.  Add your markdown </p>
<h1 id="Adding_images_to_your_posts">Adding images to your posts</h1><p>If you are only going to have a few images in the Hexo project (a few hundred or so), then the easiest way is to keep them in a <code>source/images</code> directory.  Github pages has a content delivery network (CDN) that will help deliver you images quickly around the world.  You can include these image files as you version the rest of your content for the project.</p>
<p>If you are going to use a great many images on your website (1,000’s), you may be better off keeping those images in some kind of image service (Google+ photos) or content delivery network(CDN).</p>
<p>Using a CDN will incure a small cost, but unless are using terrabytes of bandwidth to serve up your images this will only a few dollars a year.  Examples of CDNs <a href="http://aws.amazon.com/cloudfront/" target="_blank" rel="external">Amazon CloudFront</a>, <a href="http://www.edgecast.com/" target="_blank" rel="external">EdgeCast</a>, or <a href="http://www.level3.com/" target="_blank" rel="external">level3</a>.  Alternatively you could use an <a href="http://aws.amazon.com/s3/" target="_blank" rel="external">Amazon S3 bucket</a>, but I suggest you find a good client for that service.</p>
<h1 id="Adding_pages_to_your_Hexo_website">Adding pages to your Hexo website</h1><p>Just like with blog posts, you can create pages using the <code>hexo new</code> command, simply by specifying the page template (scaffold).</p>
<pre><code>hexo <span class="keyword">new</span> page <span class="string">"page-name"</span>
</code></pre><p>If you want a hierachy of pages then you would have to create them manually.  It seems <code>hexo new</code> does not know how to create pages underneath other pages.  However, as its only simple markup it is generating then it is easy to copy out your own page structure using the command line or a graphical file manager.</p>
<h1 id="In_Summary">In Summary</h1><p>Hexo is a lightweight and fun to use platform for bloggind and similar kinds of content driven sites.  I am currently also building out developer workshop materials using Hexo.</p>
<p>To discover more about Hexo, visit the <a href="/hexo/">Hexo area of this site</a> and the <a href="http://hexo.io" target="_blank" rel="external">Hexo.io</a> website.</p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="/images/hexo-logo.png" class="img-thumbnail">
<p>Hexo is a modern static website generator &amp; bloging platform written in Node.js.  It is a great way to create a blog or other content driven websites as all the content is written in markdown and can therefore be versioned with Git. </p>
<p>I am using Hexo for my developer blog (using blogger became very slow) and am also using Hexo for a series of online tutorials on developer tools.</p>
<p>Here is a quick guide to get going with Hexo.</p>]]>
    
    </summary>
    
      <category term="hexo" scheme="http://jr0cket.co.uk/tags/hexo/"/>
    
      <category term="blogging" scheme="http://jr0cket.co.uk/categories/blogging/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo Theme Building With Chrome Developer Tools]]></title>
    <link href="http://jr0cket.co.uk/2014/04/hexo-theme-building-with-chrome-developer-tools.html"/>
    <id>http://jr0cket.co.uk/2014/04/hexo-theme-building-with-chrome-developer-tools.html</id>
    <published>2014-04-10T18:27:33.000Z</published>
    <updated>2015-03-18T15:08:46.208Z</updated>
    <content type="html"><![CDATA[<img src="/images/hexo-logo.png" class="img-thumbnail">
<p>I’m using Hexo as my blogging platform and wanted to customise the theme, which is broken down into many different parts to make it easier to manage and customise.  In order to understand what the different parts did I fired up Google Chrome deverloper tools to quickly explore the styles of Hexo’s default theme.</p>
<a id="more"></a>
<h1 id="Google_Chrome_browser_developer_tools">Google Chrome browser developer tools</h1><p>With Chrome developer tools you can explore the source code (HTML, CSS and JavaScript) of any web page and see which part of the page each line of code is responsible for.  This is a great way for quickly seeing which CSS classes and ID’s are used to control styles, as well as seeing which block of JavaScript is providng dynamic behaviour on the page. </p>
<h2 id="Running_the_Chrome_developer_tools">Running the Chrome developer tools</h2><p>Right-click and select “Inspect Element” on any page you are browsing to bring up the developer tools console.  You can navigate through </p>
<h1 id="Chrome_developer_tool_Resources">Chrome developer tool Resources</h1><blockquote>
<p>TODO: List any follow on tutorials &amp; videos that help you make the most out of these developer tools.</p>
</blockquote>
<h1 id="In_Summary">In Summary</h1><p>Using the Chrome developer tools is a fast way to explore the elements that make up your web page and should help speed up testing and bug fixing.  So get familiar with these tools and get even more productive.</p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="/images/hexo-logo.png" class="img-thumbnail">
<p>I’m using Hexo as my blogging platform and wanted to customise the theme, which is broken down into many different parts to make it easier to manage and customise.  In order to understand what the different parts did I fired up Google Chrome deverloper tools to quickly explore the styles of Hexo’s default theme.</p>]]>
    
    </summary>
    
      <category term="hexo" scheme="http://jr0cket.co.uk/tags/hexo/"/>
    
      <category term="blogging" scheme="http://jr0cket.co.uk/categories/blogging/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo - Why I Prefer It Over Octopress]]></title>
    <link href="http://jr0cket.co.uk/2014/04/hexo---why-i-prefer-it-over-octopress.html"/>
    <id>http://jr0cket.co.uk/2014/04/hexo---why-i-prefer-it-over-octopress.html</id>
    <published>2014-04-02T12:55:29.000Z</published>
    <updated>2015-03-18T15:08:46.208Z</updated>
    <content type="html"><![CDATA[<img src="/images/hexo-logo.png" class="img-thumbnail">
<p>There are several <a href="http://www.staticgen.com/" target="_blank" rel="external">static website &amp; blogging platforms available</a>, so why did I choose <a href="http://hexo.io" target="_blank" rel="external">Hexo</a> over things like Jekyll, Octopress, DocPad or writing my own?  Let me elaborate.</p>
<a id="more"></a>
<h1 id="I_write_more_JavaScript_than_Ruby">I write more JavaScript than Ruby</h1><p>Ruby is a great language but one I rarely use it for development anymore.  </p>
<p>The languages I use the most are Clojure and JavaScript, so ideally the tools I use should be written in one of those languages.  Why, well I already have the environment set up to support tools in those languages and if I need to extend the tool then I have the skills to do so relatively quickly.</p>
<h1 id="Ruby_is_a_pain_to_install">Ruby is a pain to install</h1><p>I have had a lot of problems with Ruby on MacOSX and Ubuntu, with only compilation from source code being successful.  This takes a bit of time and requires extra packages to be installed I otherwise wouldnt need.  RVM did strange things to my bash resource files last time I tried it out and the install failed on both MacOSX and Ubuntu.</p>
<h1 id="New_is_often_Better">New is often Better</h1><p>Hexo is relatively new and yet has learnt a lot from Octopres.  So has the advantage of not baking in any technical debt or having language specific quirks.  One example of why I like Hexo better is its simplicity.  To create a new file for a blog post in Hexo you use the command:</p>
<pre><code>hexo <span class="keyword">new</span> <span class="string">"title of blog post"</span>
</code></pre><p>With Octopress the command is similar but not as easy to remember and trickier to type:</p>
<pre><code><span class="title">rake</span> new_post[<span class="string">"Title of blog post"</span>]
</code></pre><p>The differeces are relatively small, but in terms of usabiltity I feel a big difference especially as I write several blog posts a week. </p>
<p>Rather than using the command <code>octopress</code> you have to remember that you are using the command <code>rake</code>.  This is fine if you are used to Ruby every day, but I am not.  The form of the command also makes it difficult to rember (eg, that you have to use brackets and which ones were they again) and its actually harder to type, especially for a touch typist.</p>
<h1 id="Great_feedback_process">Great feedback process</h1><p>If you run the Hexo server then any changes you make, either to the content of your site or the design (CSS, theme, etc) is automatically picked up and rendered.  So if you are curious about how your changes look, then you just need to point your browser to the hexo server, usually running on port 4000.</p>
<p>So to run the hexo server you use the command:</p>
<pre><code>hexo <span class="keyword">server</span>
</code></pre><p>Then to see the results you open the link <a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a></p>
<p>When you make a change you get output in the console that is currently running the Hexo server, for example</p>
<img src="/images/hexo-server-example-output-on-changes.png">
<p>This allows me to work locally on my laptop and see the results instantaineously.  Only when I am ready to share my changes with the world do I need to generate the static content and push it to Github pages.</p>
<p>This simple process should support me event when I have hundereds of blog posts and pages of content.  I wont have to wait for the generation of the site (although Hexo is pretty quick anyway, generating the site as it is in about 5 seconds).</p>
<h1 id="Responsive_community">Responsive community</h1><p>There is a healthy community around Hexo.  There are already lots of articles about configuring Hexo and creating your own themes.  I have found the project itself very responsive to issues and I even had several pull requests accepted.</p>
<h1 id="Multi-threaded_processing">Multi-threaded processing</h1><p>As I plan to use one platform for all my static web content, blogging, tutorials, slides and technology micro-sites, then I need something that works pretty quick.</p>
<p>Hexo has also added a cache system to speed up the generation time even further.  The cache can be used with headers, footers or anywhere where the same content is generated repeatedly.</p>
<h1 id="Customisation">Customisation</h1><p>I also want to be able to put my own look onto my websites.  Most tools of this kind provide some nice sites, but I dont want something that just looks exactly like every other site out there.</p>
<p>However, I dont want to spend a long time configuring themes, so it should be really easy to tweak exiting themes.  </p>
<p>So far I have found Hexo easier to understand the theme structure from reading the default landscape theme.  Although I dont believe there is a vast difference between Hexo and Octopress themes.  It just seems a little easier to work with than the Octopress themes, but I guess it depends which themes you work with in the end.</p>
<h1 id="In_Summary">In Summary</h1><p>Hexo is a great choice for any blog or static website you want to create, I highly recommend switching to it and deploying your websites on Github pages.</p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="/images/hexo-logo.png" class="img-thumbnail">
<p>There are several <a href="http://www.staticgen.com/">static website &amp; blogging platforms available</a>, so why did I choose <a href="http://hexo.io">Hexo</a> over things like Jekyll, Octopress, DocPad or writing my own?  Let me elaborate.</p>]]>
    
    </summary>
    
      <category term="hexo" scheme="http://jr0cket.co.uk/tags/hexo/"/>
    
      <category term="blogging" scheme="http://jr0cket.co.uk/categories/blogging/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://jr0cket.co.uk/2014/04/hello-world.html"/>
    <id>http://jr0cket.co.uk/2014/04/hello-world.html</id>
    <published>2014-04-02T11:00:00.000Z</published>
    <updated>2015-03-18T18:17:28.512Z</updated>
    <content type="html"><![CDATA[<img src="/images/hexo-logo.png" class="img-thumbnail">
<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">trobuleshooting</a> or you can ask me on <a href="https://github.com/tommy351/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<a id="more"></a>
<h1 id="Quick_Start">Quick Start</h1><h2 id="Create_a_new_post">Create a new post</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h2 id="Run_server">Run server</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h2 id="Generate_static_files">Generate static files</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h2 id="Deploy_to_remote_sites">Deploy to remote sites</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="/images/hexo-logo.png" class="img-thumbnail">
<p>Welcome to <a href="http://hexo.io/">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html">trobuleshooting</a> or you can ask me on <a href="https://github.com/tommy351/hexo/issues">GitHub</a>.</p>]]>
    
    </summary>
    
      <category term="hexo" scheme="http://jr0cket.co.uk/tags/hexo/"/>
    
      <category term="blogging" scheme="http://jr0cket.co.uk/categories/blogging/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo Static Site Generator - Modifying Existing Themes]]></title>
    <link href="http://jr0cket.co.uk/2014/04/hexo-static-site-generator---modifying-exiting-themes.html"/>
    <id>http://jr0cket.co.uk/2014/04/hexo-static-site-generator---modifying-exiting-themes.html</id>
    <published>2014-04-02T06:45:21.000Z</published>
    <updated>2015-03-18T15:08:46.208Z</updated>
    <content type="html"><![CDATA[<img src="/images/hexo-logo.png" class="img-thumbnail">
<p>Hexo is a great way to create a blog or static website and comes with some responsive and great looking themes.  However, so your site doesnt look like everyone elses, you may want to customise the look and the easiest way is to modify an existing theme.</p>
<a id="more"></a>
<h2 id="Landscape_-_the_default_theme">Landscape - the default theme</h2><p>There are a wide range of themes to choose from, althought Landscape is one of the newest and is also the default so you dont need to instal it.</p>
<h3 id="Location_of_themes">Location of themes</h3><p>In the themes folder of your hexo project </p>
<pre><code>hexo init<span class="instruction"> new-project
</span>cd new-project
</code></pre><p>You will now see a <code>themes/landscape</code> directory structure in your new hexo project.  Inside this landscape directory are a collection of files that generate the theme when you run ethier <code>hexo server</code> or <code>hexo generate</code>.</p>
<h2 id="Making_your_changes_work">Making your changes work</h2><p>If you have already generated or deployed your site with a theme and then you modify it. it seems hexo does not pick up those changes.  First you need to run the command</p>
<pre><code><span class="title">hexo</span> clean 
</code></pre><p>This will remove the cache and the .deploy folders.  So now when you do</p>
<pre><code>hexo <span class="keyword">ge</span><span class="label">nerate</span>
</code></pre><p>all new files are added to public.</p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="/images/hexo-logo.png" class="img-thumbnail">
<p>Hexo is a great way to create a blog or static website and comes with some responsive and great looking themes.  However, so your site doesnt look like everyone elses, you may want to customise the look and the easiest way is to modify an existing theme.</p>]]>
    
    </summary>
    
      <category term="hexo" scheme="http://jr0cket.co.uk/tags/hexo/"/>
    
      <category term="blogging" scheme="http://jr0cket.co.uk/categories/blogging/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo Codeblock Highlighting Verses Markdown]]></title>
    <link href="http://jr0cket.co.uk/2014/03/hexo-codeblock-highlighting-vs-markdown.html"/>
    <id>http://jr0cket.co.uk/2014/03/hexo-codeblock-highlighting-vs-markdown.html</id>
    <published>2014-03-29T01:02:50.000Z</published>
    <updated>2015-03-18T15:08:46.208Z</updated>
    <content type="html"><![CDATA[<img src="/images/hexo-logo.png" class="img-thumbnail">
<p>This is a simple post to see if there are any differences in the style of code when defined in a <code>{ % codeblock % }</code> or using markdown notation (tripple backticks / indentation).  In this case I am just using some simple Clojure code.</p>
<a id="more"></a>
<h2 id="Showing_code_by_indentation">Showing code by indentation</h2><p>I have wrapped the following lines by three backtick characters on the line before and line after the code.  These tripple backtick characters to instruct the Hexo markdown processor that the containing lines should be rendered as a code block.</p>
<figure class="highlight clojure"><figcaption><span>really-simple-example.clj</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">defn</span></span> clojure-function <span class="collection">[paramter]</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">str</span></span> <span class="string">"Lets do something simple using Clojure and "</span> parameter)</span>)</span></span><br></pre></td></tr></table></figure>
<p>That should be a simple Clojure example using markdown indentation.  </p>
<h2 id="Using_Hexo_Codeblock">Using Hexo Codeblock</h2><p>Hexo has several plugin types from Swig that you can use in your post.  Lets try out <code>codeblock</code> to see if there is any difference in how it renders compared to the above markdown.</p>
<figure class="highlight clojure"><figcaption><span>basic-clojure-example.clj</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">def</span></span> authors <span class="collection">[<span class="attribute">:name</span> <span class="string">"John Stevenson"</span>]</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">defn</span></span> show-author <span class="collection">[authors]</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">str</span></span> authors)</span>)</span></span><br><span class="line">  </span><br><span class="line"><span class="list">(<span class="keyword">show-author</span> authors)</span></span><br></pre></td></tr></table></figure>
<p>The rendering of both pieces of code is pretty much the same, except with the code block I added language and a title.  If I use three backticks then I can specify the language and a filename that contains the code.  If I just use indentation, specifying a language and filename is not possible (as far as I know).</p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="/images/hexo-logo.png" class="img-thumbnail">
<p>This is a simple post to see if there are any differences in the style of code when defined in a <code>{ % codeblock % }</code> or using markdown notation (tripple backticks / indentation).  In this case I am just using some simple Clojure code.</p>]]>
    
    </summary>
    
      <category term="hexo" scheme="http://jr0cket.co.uk/tags/hexo/"/>
    
      <category term="blogging" scheme="http://jr0cket.co.uk/categories/blogging/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Deploying Hexo Sites to Github Pages]]></title>
    <link href="http://jr0cket.co.uk/2014/03/deploying-hexo-sites-to-github-pages.html"/>
    <id>http://jr0cket.co.uk/2014/03/deploying-hexo-sites-to-github-pages.html</id>
    <published>2014-03-27T09:32:32.000Z</published>
    <updated>2015-03-18T15:08:46.204Z</updated>
    <content type="html"><![CDATA[<img src="/images/hexo-logo.png" class="img-thumbnail">
<p>Hexo is a great way to easily generate content and publish it use Github pages. </p>
<blockquote><p>See my previous articles on setting up <a href="/tags/hexo">Hexo</a> and creating content</p>
</blockquote>
<a id="more"></a>
<h2 id="Configuring_your_site_name">Configuring your site name</h2><p>Its important to add the URL of your github pages site to the Hexo configuraiton </p>
<figure class="highlight groovy"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># URL</span><br><span class="line">## If your site is put <span class="keyword">in</span> a subdirectory, set url <span class="keyword">as</span> <span class="string">'http://yoursite.com/child'</span> and root <span class="keyword">as</span> <span class="string">'/child/'</span></span><br><span class="line"><span class="string">url:</span> <span class="string">http:</span><span class="comment">//jr0cket.github.io/hexo-blog-test</span></span><br><span class="line"><span class="string">root:</span> <span class="regexp">/hexo-blog-test/</span></span><br></pre></td></tr></table></figure>
<p>If your project uses a sub-folder, Make sure that the root line has a trailing forward slash, otherwise your URL paths will not be correct.</p>
<p>Projects use a sub-folder if they are deployed to the gh-pages branch of a repo.  When you are using the main repo for a user or org (username.github.io or org-name.github.io) then these repos run the Github pages from the master branch, so no root should be required (except for a single forward slash which is set by default in hexo)</p>
<h3 id="Example">Example</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">root</span>: <span class="string">/hexo-blog-test</span></span><br></pre></td></tr></table></figure>
<p>This will give /hexo-blog-test2014-name-of-blog-post and wont show the page up or if it does then probably wont include the CSS styles</p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="/images/hexo-logo.png" class="img-thumbnail">
<p>Hexo is a great way to easily generate content and publish it use Github pages. </p>
<blockquote><p>See my previous articles on setting up <a href="/tags/hexo">Hexo</a> and creating content</p>
</blockquote>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Creating Your First Post With Hexo.io]]></title>
    <link href="http://jr0cket.co.uk/2014/03/creating-your-first-post-with-hexo.html"/>
    <id>http://jr0cket.co.uk/2014/03/creating-your-first-post-with-hexo.html</id>
    <published>2014-03-27T01:36:58.000Z</published>
    <updated>2015-03-18T15:08:46.204Z</updated>
    <content type="html"><![CDATA[<img src="/images/hexo-logo.png" class="img-thumbnail">
<p>So you have installed Hexo (and nodejs), so now you are ready to start blogging.  Use the following command to create a new blog post entry (blog posts are the default type of content, although this can be changed in _config.yml):</p>
<pre><code>hexo <span class="keyword">new</span> <span class="string">"Meaningful blog post title with a hint of SEO"</span>
</code></pre><p>Hexo will create a new file under source/_posts using the name provided.  You can then edit this file and start creating your content using Markdown.</p>
<a id="more"></a>
<h1 id="Generating_and_viewing_your_blog">Generating and viewing your blog</h1><p>When you have finished writing your content, you can generate your blog posts using the command:</p>
<pre><code><span class="title">hexo</span> generate 
</code></pre><p>This will convert your markdown content into a static website.  Then you can view the site by running it on a server that Hexo provides:</p>
<pre><code>hexo <span class="keyword">server</span> 
</code></pre><p>If everything looks good then you may want to publish the generated website somewhere it can be more readily accessed via the Internet.  Once such place is Github Pages (cover this later).</p>
<p>Later on you may want to tweak your theme and general configurations for the website.</p>
<h1 id="Tweaking_the_Hexo_site_configurations">Tweaking the Hexo site configurations</h1><p>Just like with Octopress, you edit the _config.yml file and add your name, URL and any other details and settings you want to apply to the general blog.</p>
<h1 id="Quick_summary:_Seting_up_Hexo">Quick summary: Seting up Hexo</h1><p>In case you forgot how to set Hexo up, then it is basically:</p>
<ul>
<li>Download the nodejs binaries (or compile from source if you have time to kill)</li>
<li>Add nodejs to the path (a setting in your shell rc file - eg. ~/.bashrc or ~/.zshrc)</li>
<li>Install hexo using: npm install hexo -g (wait for npm to download all the node packages)</li>
<li>Create a new website using: hexo init website-name (where website-name is just the folder name for your website project)</li>
</ul>
<p>Thank you<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="/images/hexo-logo.png" class="img-thumbnail">
<p>So you have installed Hexo (and nodejs), so now you are ready to start blogging.  Use the following command to create a new blog post entry (blog posts are the default type of content, although this can be changed in _config.yml):</p>
<pre><code>hexo <span class="keyword">new</span> <span class="string">"Meaningful blog post title with a hint of SEO"</span>
</code></pre><p>Hexo will create a new file under source/_posts using the name provided.  You can then edit this file and start creating your content using Markdown.</p>]]>
    
    </summary>
    
      <category term="hexo" scheme="http://jr0cket.co.uk/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Heroku Deploy - a Lot Happens in 1 Minute]]></title>
    <link href="http://jr0cket.co.uk/2014/03/heroku-deploy-a-lot-happens-in-1-minute.html"/>
    <id>http://jr0cket.co.uk/2014/03/heroku-deploy-a-lot-happens-in-1-minute.html</id>
    <published>2014-03-26T19:36:33.000Z</published>
    <updated>2015-03-18T15:08:46.208Z</updated>
    <content type="html"><![CDATA[<p>As technology progresses then taking a few minutes to deploy your app can seem like a long time, but when you consider everything Heroku is doing during that time then its quite amazing</p>
<a id="more"></a>
<h2 id="Provision_server_resources_&amp;_managing_traffic">Provision server resources &amp; managing traffic</h2><p>Heroku creates a new “server” each time you deploy, so that the currently live application can still handle reuests until the new version is ready.  Rather than a whole bloated server, Heroku actually creates a new Linux container with a running OS.  This Linux container usually takes a second or less to create with a running operating system.</p>
<h2 id="The_environment_is_then_established">The environment is then established</h2><p>Every language you use to write your application needs some kind of runtime, eg. if you need Java you need the JVM, Ruby apps need a particular version of Ruby, Javascript probably needs nodejs and PHP needs a webserver.  As part of the Heroku buildpack used during the deployment, the relevant libraries and platforms are brought in.  Unless you change the configuration of your build or the buildfile you use, Heroku will always bring in the same version of the environment you need to run your app each time you deploy.</p>
<h2 id="Compilation_of_code">Compilation of code</h2><p>If your app is compiled, then the build process is run so you have a deployment made from your standard production build.</p>
<p>Environment variables are set for the applications and any services (caching, logging, monitoring, etc) or datastores (postgres, redis, mongodb) are therefore automatically connected too.</p>
<p>All the relevant processes are run and scalled (can you scale your app to a certain level when you deploy)</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>As technology progresses then taking a few minutes to deploy your app can seem like a long time, but when you consider everything Heroku is doing during that time then its quite amazing</p>]]>
    
    </summary>
    
      <category term="heroku" scheme="http://jr0cket.co.uk/tags/heroku/"/>
    
      <category term="cloud" scheme="http://jr0cket.co.uk/categories/cloud/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Emacs Org-Mode for All Your Content]]></title>
    <link href="http://jr0cket.co.uk/2014/03/emacs-org-mode-for-all-your-content.html"/>
    <id>http://jr0cket.co.uk/2014/03/emacs-org-mode-for-all-your-content.html</id>
    <published>2014-03-16T12:35:37.000Z</published>
    <updated>2015-03-18T15:08:46.208Z</updated>
    <content type="html"><![CDATA[<img src="/images/emacs-logo.png" class="img-thumbnail">
<p>Emacs is a tool that just keeps on giving and Org-mode is a fantantastic way to create text based content and manage it effectively.  As Org-mode is just a text format then it can be easily converted by Emacs into other formats (markdown, pdf, html, etc).  I’ll show you how to create other formats from Org-mode, so you can confidently write everything in Org-mode and generate any format you need.</p>
<a id="more"></a>
<blockquote><p>In previous articles I have covered generating presentations from Org-mode using Reveal.js.</p>
</blockquote>
<h1 id="Why_write_in_Org-mode">Why write in Org-mode</h1><p>If you are writing anything more than a few paragraphs of text then it gets quite easy to become lost in your own writing.  Having to scroll around to see what you covered earlier can slow down your creative process.</p>
<p>With Org-mode you can structure you content easily, as your “topics or table of contents” are your structure.  Every heading and sub-heading can fold away the content underneath it, unfolding the only the parts of your writing you want to see.</p>
<p>Another useful aspect of Org-mode is that it hides the link part of the URL, so you only see the text part of the link.  This helps keep your text easy to read.</p>
<p>As with many other languages supported by Emacs you also get colour highlighting for different styles along with spell checking and suggested words as you type.</p>
<p>[TODO: Insert picture of Org-mode - or maybe even a video]</p>
<h1 id="Reasons_I_need_to_use_Markdown">Reasons I need to use Markdown</h1><p>I use markdown for my Jekyll based blog and website and as these are relativley small I often just write them directly in Markdown.  However, if its a series of posts on the same topic then I can easily structure that series using Org-mode and generate the markdown content when I am ready to add it to my blog.</p>
<p>I also need to use markdown for the self-publishing book website, <a href="LeanPub">https://leanpub.com/</a>.  I write the whole book in Org-mode, again so I can structure it sensibly and jump to specific parts of the content easily.  I can also see topics (headings) I have written about in each chapter of the book very easily by open and closing sections of the Org-mode file.</p>
<h1 id="Generating_Markdown_from_Org-mode">Generating Markdown from Org-mode</h1><p>In Emacs, open your Org-mode file (or switch to the buffer containing it).  Then export a copy of then content into markdown with one of the following commands</p>
<pre><code><span class="keyword">M</span>-x org-md-export-to-markdown
C-c C-<span class="keyword">e</span> <span class="keyword">m</span> <span class="literal">m</span>
</code></pre><p>Exports the current Org-mode file as a new text file of the same name but with the .md extension rather than .org.  </p>
<p>When you export again, the .md file will be overwritten without warning, so if you want to make changes you edit the Org-mode file and re-generate the markdown file.</p>
<p>If you want to see the markdown file as soon as it is created, use the following command to open it in Emacs:</p>
<pre><code><span class="keyword">C</span>-c <span class="keyword">C</span>-e m o
</code></pre><p>If you do not wish to create a file from the export, the following command generated markdown and places it inside a tempory Emacs buffer:</p>
<pre><code><span class="keyword">M</span>-x org-md-export-<span class="keyword">as</span>-markdown
C-c C-<span class="keyword">e</span> <span class="keyword">m</span> <span class="keyword">M</span> 
</code></pre><p>[TODO: what does this command do?]<br>    M-x org-md-convert-region-to-markdown</p>
<p>The Markdown export is build on top of the <a href="HTML export">http://orgmode.org/manual/HTML-export.html#HTML-export</a> and anything not supported by the markdown syntax will be converted by that HTML export process.  See the Org-mode website for more details on <a href="exporting markdown">http://orgmode.org/manual/Markdown-export.html#Markdown-export</a> and other formats.</p>
<blockquote><p>For the header and sectioning structure the Markdown export can generate both atx and setext types for headlines, according to org-md-headline-style. ATX introduces a hard limit of two levels of headings, whereas Setext pushes it to six. Headings below that limit are exported as lists. You can also set a soft limit before that one (see <a href="Export settings">http://orgmode.org/manual/Export-settings.html#Export-settings</a>).</p>
</blockquote>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="/images/emacs-logo.png" class="img-thumbnail">
<p>Emacs is a tool that just keeps on giving and Org-mode is a fantantastic way to create text based content and manage it effectively.  As Org-mode is just a text format then it can be easily converted by Emacs into other formats (markdown, pdf, html, etc).  I’ll show you how to create other formats from Org-mode, so you can confidently write everything in Org-mode and generate any format you need.</p>]]>
    
    </summary>
    
      <category term="emacs" scheme="http://jr0cket.co.uk/tags/emacs/"/>
    
      <category term="org-mode" scheme="http://jr0cket.co.uk/tags/org-mode/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Updating Octopress With Bug Fixes and Enhancments]]></title>
    <link href="http://jr0cket.co.uk/2014/03/updating-octopress-with-bug-fixes-and-enhancments.html"/>
    <id>http://jr0cket.co.uk/2014/03/updating-octopress-with-bug-fixes-and-enhancments.html</id>
    <published>2014-03-13T19:32:54.000Z</published>
    <updated>2015-03-18T15:08:46.212Z</updated>
    <content type="html"><![CDATA[<p>For each Octopress project you have created (ie. for each blog / website you created with Octopress) you need to pull some code from Github remote (octopress master) and run a few rake tasks.</p>
<p>Before you start with an update, check you Octopress projects files have been added to the Git repository or Stashed out of the way - as Octopress will try and overwrite them (although as its using git it will fail and warn you about a merge conflict).</p>
<pre><code>git pull octopress master     <span class="comment"># Get the latest Octopress</span>
bundle install                <span class="comment"># Keep gems updated</span>
rake update_<span class="built_in">source</span>            <span class="comment"># update the template's source</span>
rake update_style             <span class="comment"># update the template's style</span>
</code></pre><p><a href="http://octopress.org/docs/updating/" target="_blank" rel="external">http://octopress.org/docs/updating/</a></p>
<p>Thank you<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>For each Octopress project you have created (ie. for each blog / website you created with Octopress) you need to pull some code from Gith]]>
    </summary>
    
      <category term="octopress" scheme="http://jr0cket.co.uk/tags/octopress/"/>
    
      <category term="blogging" scheme="http://jr0cket.co.uk/categories/blogging/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Creating Content in Markdown for Your Octopress Blog]]></title>
    <link href="http://jr0cket.co.uk/2014/03/creating-content-in-markdown-for-your-octopress-blog.html"/>
    <id>http://jr0cket.co.uk/2014/03/creating-content-in-markdown-for-your-octopress-blog.html</id>
    <published>2014-03-13T19:32:20.000Z</published>
    <updated>2015-03-18T15:08:46.204Z</updated>
    <content type="html"><![CDATA[<p>Octopress enables the creation of great looking blog post using simple markdown text.  This gives you a no-fuss way of writing your blogs without getting distracted.  Here I will cover how to add formatting to you text and embedding code and other useful media into your blog posts.</p>
<blockquote><p>In my previous blog on Octopress I covered the blogging workflow and the handful of rake commands that help you create and deploy your blog posts consistently.</p>
</blockquote>
<a id="more"></a>
<h2 id="Adding_styles_to_text">Adding styles to text</h2><p>Headings<br>Bold, italic </p>
<h2 id="Adding_images">Adding images</h2><p>Images are always a good way to explain concepts or to just get attendtion for your writing.</p>
<p>To add an image to your post, you add the following code </p>
<figure class="highlight nix"><figcaption><span>[Insert an image in your post]</span><a href="http://octopress.org/docs/plugins/image-tag/" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img <span class="variable">src=</span><span class="string">"/path/to/image"</span> <span class="variable">class=</span><span class="string">"[class names]"</span> <span class="variable">title=</span><span class="string">"[width] [height] [title text [alt text]]"</span>&gt;</span><br></pre></td></tr></table></figure>
<p>Here is an example with my two cute cats:</p>
<img src="/images/kittens-snuggled.png">
<h3 id="More_examples">More examples</h3><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;img <span class="variable">src=</span><span class="string">"http://placekitten.com/890/280"</span>&gt;</span><br><span class="line">&lt;img <span class="variable">src=</span><span class="string">"http://placekitten.com/320/250"</span> <span class="variable">class=</span><span class="string">"left"</span> <span class="variable">title=</span><span class="string">"Place Kitten #2"</span>&gt;</span><br><span class="line">&lt;img <span class="variable">src=</span><span class="string">"http://placekitten.com/300/500"</span> <span class="variable">class=</span><span class="string">"right"</span> <span class="variable">width=</span><span class="string">"150"</span> <span class="variable">height=</span><span class="string">"250"</span> <span class="variable">title=</span><span class="string">"Place Kitten #3"</span>&gt;</span><br><span class="line">&lt;img <span class="variable">src=</span><span class="string">"http://placekitten.com/300/500"</span> <span class="variable">class=</span><span class="string">"right"</span> <span class="variable">width=</span><span class="string">"150"</span> <span class="variable">height=</span><span class="string">"250"</span> <span class="variable">title=</span><span class="string">"Place Kitten #4 An image of a very cute kitten"</span>&gt;</span><br></pre></td></tr></table></figure>
<h2 id="Showing_code">Showing code</h2><h3 id="Code_blocks">Code blocks</h3><p>You can embed code snippets directly in the markup of the blog posts you write using the codeblock directive.<br><a href="http://octopress.org/docs/plugins/codeblock/" target="_blank" rel="external">http://octopress.org/docs/plugins/codeblock/</a></p>
<p>These are okay but I have not figured out a way to stop Octopress examples from rendering incorrectly (unless there is an Octopress update that fixes this)</p>
<p>[TODO - figure out how to show code snippets that are also liquid calls]</p>
<h3 id="Github_Gists">Github Gists</h3><p>I am used to using Github and Gists for sharing and collaborating around code, so as Octopress can use Gits then I have started using the gist directive.</p>
<script src="//gist.github.com/9532424.js"></script>
<p>See the <a href="Octopress article on Github gists">http://octopress.org/docs/plugins/gist-tag/</a> for a few more examples.</p>
<h2 id="Adding_Video">Adding Video</h2><p>You can add embedded videos from YouTube and Vimeo very easily, you just need to know the id of the video which is the last characters of the </p>
<p>For example, there is a great video by Lindsey Stirling at <a href="https://www.youtube.com/watch?v=DHdkRvEzW84" target="_blank" rel="external">https://www.youtube.com/watch?v=DHdkRvEzW84</a>, so to include this video in a post I would use the video id at the end of that web address (after the watch?v=).  So I would add the following code to my code</p>

  youtub DHdkRvEzW84

<p>You can use either YouTube or Vimeo for your video souce using the following syntax:</p>

   youtube video-id
   vimeo video-id

<h3 id="Example">Example</h3><p>A beautiful video with amazing music from Lindsey Stirling:</p>
 <div class="video-container"><iframe src="//www.youtube.com/embed/DHdkRvEzW84" frameborder="0" allowfullscreen></iframe></div>
]]></content>
    <summary type="html">
    <![CDATA[<p>Octopress enables the creation of great looking blog post using simple markdown text.  This gives you a no-fuss way of writing your blogs without getting distracted.  Here I will cover how to add formatting to you text and embedding code and other useful media into your blog posts.</p>
<blockquote><p>In my previous blog on Octopress I covered the blogging workflow and the handful of rake commands that help you create and deploy your blog posts consistently.</p>
</blockquote>]]>
    
    </summary>
    
      <category term="octopress" scheme="http://jr0cket.co.uk/tags/octopress/"/>
    
      <category term="blogging" scheme="http://jr0cket.co.uk/categories/blogging/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Customise Octopress Themes for Fun and Your Profit]]></title>
    <link href="http://jr0cket.co.uk/2014/03/customise-octopress-themes-for-fun-and-your-profit.html"/>
    <id>http://jr0cket.co.uk/2014/03/customise-octopress-themes-for-fun-and-your-profit.html</id>
    <published>2014-03-12T16:28:28.000Z</published>
    <updated>2015-03-18T15:08:46.204Z</updated>
    <content type="html"><![CDATA[<p>Octopress themes are stored in the the root folder of your project in a folder called .themes.  If you installed one of the custom themes for Octopress [link], the .themes folder is where the instructions tell you to clone the theme git repository.</p>
<p>Themes can also be installed by passing a parameter to the rake install command. the default theme being “classic”.</p>
<p>Using the .theme folder for your themes helps ensure that your customisations do not get over-written by Octopress updates .</p>
<a id="more"></a>
<h2 id="Including_font_families">Including font families</h2><p>You can add hosted fonts just like you do with HTML pages using a link reference.  There are a large number of fonts from Google.</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="subst">&lt;</span><span class="keyword">link</span> href<span class="subst">=</span><span class="string">'http://fonts.googleapis.com/css?family=Lato'</span> rel<span class="subst">=</span><span class="string">'stylesheet'</span> <span class="keyword">type</span><span class="subst">=</span><span class="string">'text/css'</span><span class="subst">&gt;</span></span><br></pre></td></tr></table></figure>
<p>I like the Ubuntu font so I add the Ubutu and Ubunto Mono font families using the following code:</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="subst">&lt;</span><span class="keyword">link</span> href<span class="subst">=</span><span class="string">'http://fonts.googleapis.com/css?family=Ubuntu+Mono|Ubuntu'</span> rel<span class="subst">=</span><span class="string">'stylesheet'</span> <span class="keyword">type</span><span class="subst">=</span><span class="string">'text/css'</span><span class="subst">&gt;</span></span><br></pre></td></tr></table></figure>
<p>You can select your own fonts to use by visiting <a href="Google fonts">http://www.google.com/fonts/</a> and adding the font families you like to your collection and Google Fonts will generate the line of code you need to add.</p>
<p>To add Ubuntu fonts directly to your CSS you would use the following:</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">font-family</span>: <span class="string">'Ubuntu Mono'</span>, sans-serif;</span><br><span class="line"><span class="attribute">font-family</span>: <span class="string">'Ubuntu'</span>, sans-serif;</span><br></pre></td></tr></table></figure>
<h2 id="Changing_Colours">Changing Colours</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sass<span class="regexp">/custom/</span>_colors.scss</span><br></pre></td></tr></table></figure>
<h2 id="Example_-_light_colour_scheme">Example - light colour scheme</h2><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$header-title-font-<span class="keyword">family</span>:</span><br><span class="line"><span class="string">"Lato"</span>,</span><br><span class="line"><span class="string">"Fontdiner Swanky"</span>,</span><br><span class="line"><span class="string">"Germania One"</span>,</span><br><span class="line"><span class="string">"Poller One"</span>,</span><br><span class="line"><span class="string">"Georgia"</span>,</span><br><span class="line"><span class="string">"Helvetica Neue"</span>,</span><br><span class="line"><span class="type">Arial</span>,</span><br><span class="line"><span class="title">sans</span>-serif !<span class="default"><span class="keyword">default</span>;</span></span><br></pre></td></tr></table></figure>
<h2 id="Chainging_Style">Chainging Style</h2><p>Change width of the body, the size of the dates and article titles as well as the codeblocks in </p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sass<span class="regexp">/custom/</span>_styles.scss</span><br></pre></td></tr></table></figure>
<p>Example</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">max-width</span><span class="value">: <span class="number">1100px</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">time</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span><span class="value">: <span class="number">14px</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span><span class="value">: <span class="number">2.2em</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">section</span> &#123;</span><br><span class="line">  &gt; <span class="tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span><span class="value">: <span class="number">1.5em</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">codeblock &#123;</span><br><span class="line">    <span class="attribute">font-size</span><span class="value">: <span class="number">1.1em</span>;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Icons">Icons</h2><p><a href="Social media">http://www.elegantthemes.com/blog/resources/free-social-media-icon-set</a></p>
<h2 id="Header_images">Header images</h2><p>adding a CSS-styled header image isn’t immediately obvious—at least, not to web-tards like me. My first inclination was to do a bunch of surgery on ~/octopress/source/_includes/custom/header.html and stuff an image in there; that worked, but it didn’t take more than a glance at the CSS behind the Octopress default site to see that the method used there didn’t involve any additional code going into the header section. Plus, just adding an image in there didn’t really fit with the HTML5 fanciness of Octopress and Jekyll—it didn’t resize or reflow as the page was changed.</p>
<p>The key ended up being the realization that the header styling and its reflowing was coded in ~/octopress/sass/base/_layout.scss. True to form, that file has an override in ~/octopress/sass/custom/_layout.scss, and to that I made the following changes:</p>
<h3 id="Example">Example</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">body</span> &gt; <span class="tag">header</span> <span class="tag">h1</span> &#123;</span><br><span class="line">      <span class="attribute">padding-left</span>:<span class="number">2.5em</span>;</span><br><span class="line">      <span class="attribute">text-align</span>:right;</span><br><span class="line">      <span class="at_rule">@media</span> only screen and (<span class="attribute">min-width</span>: <span class="number">432px</span>) &#123;</span><br><span class="line">              <span class="attribute">text-align</span>:left;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="at_rule">@media</span> only screen and (<span class="attribute">min-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">              <span class="attribute">padding-left</span>:<span class="number">3em</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="at_rule">@media</span> only screen and (<span class="attribute">min-width</span>: <span class="number">992px</span>) &#123;</span><br><span class="line">              <span class="attribute">padding-left</span>:<span class="number">2em</span>;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">body</span> &gt; <span class="tag">header</span> <span class="tag">h2</span> &#123;</span><br><span class="line">      <span class="attribute">padding-left</span>:<span class="number">5.62em</span>;</span><br><span class="line">      <span class="attribute">text-align</span>:right;</span><br><span class="line">      <span class="at_rule">@media</span> only screen and (<span class="attribute">min-width</span>: <span class="number">432px</span>) &#123;</span><br><span class="line">              <span class="attribute">text-align</span>:left;</span><br><span class="line">              <span class="attribute">padding-left</span>:<span class="number">3.9em</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="at_rule">@media</span> only screen and (<span class="attribute">min-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">              <span class="attribute">padding-left</span>:<span class="number">5em</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="at_rule">@media</span> only screen and (<span class="attribute">min-width</span>: <span class="number">992px</span>) &#123;</span><br><span class="line">              <span class="attribute">padding-left</span>:<span class="number">2.9em</span>;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">body</span> &gt; <span class="tag">header</span> <span class="tag">h1</span><span class="pseudo">:before</span> &#123;</span><br><span class="line">      <span class="attribute">content</span>:<span class="string">""</span>;</span><br><span class="line">      <span class="attribute">position</span>:absolute;</span><br><span class="line">      <span class="attribute">left</span>:<span class="number">0em</span>;</span><br><span class="line">      <span class="attribute">right</span>:<span class="number">0</span>;</span><br><span class="line">      <span class="attribute">top</span>:<span class="number">1.5em</span>;</span><br><span class="line">      <span class="attribute">height</span>:<span class="number">110px</span>;</span><br><span class="line">      <span class="attribute">width</span>:<span class="number">110px</span>;</span><br><span class="line">      <span class="attribute">overflow</span>:hidden;</span><br><span class="line">      <span class="attribute">text-align</span>:right;</span><br><span class="line">      <span class="attribute">background-image</span>:<span class="function">url</span>(<span class="string">'/images/bigdino-blog-head3.png'</span>);</span><br><span class="line">      <span class="attribute">background-repeat</span>:no-repeat;</span><br><span class="line">      <span class="at_rule">@media</span> only screen and (<span class="attribute">min-width</span>: <span class="number">432px</span>) &#123;</span><br><span class="line">              <span class="attribute">top</span>:.<span class="number">32em</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="at_rule">@media</span> only screen and (<span class="attribute">min-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">              <span class="attribute">left</span>:.<span class="number">75em</span>;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The changes are divided up into three sections: the first part styles the main title (“Bigdinosaur Blog”), the second styles the subtitle (“Tales of hacking and stomping on things”), and the third places and styles the background image. Each section also contains instructions on how the styles should change as the browser window’s width changes (the lines beginning with @media only).</p>
<p>The most important thing, and the thing that wasn’t obvious to me at first but is actually really obvious in hindsight, is that the initial parameters for each section describe how the thing should look at its smallest, and then each min-width section describes how the thing should look starting at when the browser window is that wide or wider. So, look at header h1. This is the styling applied to the main title in the header. When the browser window is anywhere from 0 to 431 pixels wide, the title should be right-aligned with a bit of padding on its left to keep it from overlapping with the background dinosaur (more on overlapping in a bit). This is how things get displayed on, say, an iPhone.</p>
<p>The instant the browser window is 432 pixels wide—which is the point at which the “Bigdinosaur Blog” text wraps to a single line—the text switches to left-aligned and the amount of padding changes, again to keep it from overlapping with the background dino. Another shift comes again at 768 pixels of width, and then final shift to the title’s most sprawling layout happens at 992 pixels.</p>
<p>The subtitle, styled in the header h2 section, has similar directives—it starts out right-aligned, shifts to left-aligned at a certain point, and the amount of padding around it shifts as the browser window moves. The challenge with the subtitle is that I wanted it to maintain a consistent position relative to the main title, and since I’m doing my spacing using em values (which are themselves relative units), each new width setting required tuning by hand.</p>
<p>The last section places the background image itself. In order to have the most control about where the image appears and where it reflows to, I’ve given it a position:absolute tag, which means that other styled elements ignore the background when figuring out their own layouts—hence all the fiddling about with padding for the header text. Instead of standard image floating behavior, an absolutely positioned image can sit on top of other page elements. This can be used to creative effect, like on the Octopress home page titlebar, but you do have to be mindful with the spacing and padding of your other elements so that they don’t get eaten.</p>
<p>In its most narrow configuration, the background image sits on the far left of the page, with 1.5 ems of space from the top of its section to ensure that it doesn’t poke up past the main title, and with background-repeat:no-repeat set so that it only displays once rather than tiling or repeating itself. I also found that if I didn’t explicitly declare the height and width of the image, it wouldn’t display at all. Finally, there are two width settings that reposition the image as the page widens so that it maintains a visually pleasing position relative to the title.</p>
<p>I mentioned it above, but it’s worth repeating: the values above are what work for my typeface choice and image size, and you will have to tweak your own to taste. Once I had decided exactly what I wanted to do and figured out what files to edit, it took probably an hour of making small changes and previewing and making small changes and previewing over and over again before I was happy with the way things lined up. I spent so much time fiddling, in fact, that I elected to abandon the idea of having the dino pic resize itself. Dinosaurs, I suppose, are meant to be displayed as large as possible, all the time, and would never consent to any funny-business resizing.</p>
<p><a href="http://blog.bigdinosaur.org/changing-octopresss-header/" target="_blank" rel="external">http://blog.bigdinosaur.org/changing-octopresss-header/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Octopress themes are stored in the the root folder of your project in a folder called .themes.  If you installed one of the custom themes for Octopress [link], the .themes folder is where the instructions tell you to clone the theme git repository.</p>
<p>Themes can also be installed by passing a parameter to the rake install command. the default theme being “classic”.</p>
<p>Using the .theme folder for your themes helps ensure that your customisations do not get over-written by Octopress updates .</p>]]>
    
    </summary>
    
      <category term="octopress" scheme="http://jr0cket.co.uk/tags/octopress/"/>
    
      <category term="themes" scheme="http://jr0cket.co.uk/tags/themes/"/>
    
      <category term="blogging" scheme="http://jr0cket.co.uk/categories/blogging/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Why Go to a Conference]]></title>
    <link href="http://jr0cket.co.uk/2014/03/why-go-to-a-conference.html"/>
    <id>http://jr0cket.co.uk/2014/03/why-go-to-a-conference.html</id>
    <published>2014-03-08T16:07:47.000Z</published>
    <updated>2015-03-18T15:08:46.212Z</updated>
    <content type="html"><![CDATA[<p>There are a great many developer and tech conferences to got to and the numbers are increasing.  Some of these conferences are free or free if you speak or volunteer, some are relativley cheap and some you may be able to persuade your company to pay for.  But why should you even consider going to a conference in the first place?</p>
<a id="more"></a>
<h1 id="As_a_speaker">As a speaker</h1><p>So why go to a conference as a speaker?</p>
<p>Well the most obvious benefit is that you will probably get into the whole conferences for free.  If you are speaking about something relevant to the company you work for, they may also pay for your travel &amp; hotel expenses (if required).</p>
<p>Speakers can sometimes invite a friend along to the conference too.</p>
<p>Being a speaker at an event is a good way to get to network with the other speakers at the event.  The organisers some times arrange a speakers dinner the evening before, so as well as getting wined and dined by the organisers you get more of a chance to talk with the other speakers and build good relationships.</p>
<h2 id="Explaining_something_verifies_your_understanding">Explaining something verifies your understanding</h2><p>In fact, presenters are usually the ones that get the most from a conference, they present there ideas and then have some one in the crowd as for “a real world example”.  Putting yourself on the spot like that and learning how to deal with it puts you in a good place when you go back to work and have to deal with all sorts of other less than plesant situations.</p>
<p>Its fun being a speaker, you get respect for just standing up in front of a crowd and speaking.</p>
<p>Its a great way to develop your career.  Are you tired of boring interview questions or dumb tests that only test your memory rather than your understanding?  A reputation of speaking at conferences goes a long way to cut through the crap that you often get at interview time.</p>
<p>Working a crowd at a presetation helps inmprove you team skills and helps you understand how you can inspire and influence people.  It is good training for real leadership.</p>
<p>I dont know of any speakers who ended up on the IT scrap-heap…</p>
<h1 id="As_an_attendee">As an attendee</h1><p>Attending a conference is a chance to get away from work for a few days and actually step back and think about things.  It can be hard to see the big picture in terms of what you are trying to achieve at work when you are head down getting things done (or fire fighting).</p>
<p>Its good to find out what is happening in technology and see how others are applying the same tools and languages you use to great value.  Even some small change in approach can make you more effective.</p>
<p>There is an opportunity to meet a lot of new people and discuss conserns and ideas with each other.  Its a great chance to meet people in your situation and do some venting, talk about how you face your challenges, swap ideas and </p>
<p>Find out what people are doing and what they are excited about, why they get out of bed in the morning</p>
<p>Its good to put conferences on your CV - shows initiative, shows you are interested in learing and developing yourself</p>
<p>Its a great way to learn new things, or at least learn what things you should be looking at for the next 6 months - unless you like turning up to work and doing the same old crap week in week out !!!</p>
<p>It gives you something to talk about with your team when you get back to work, something other than what was on TV last night.</p>
<p>How boring is it to just work with someone who just turns up 9-5 and does nothing else.  I want to work with people who are inspired, passionate and enthusiastic about what they do.  As an employer, why would you ever hire someone who wasnt like this ??  Oh yes, because that employer has either no respect for thier staff or just wants them to do some grunt work - the IT factory in its worse sense.</p>
<p>Most employeers have no idea about IT and many do not need to know that much, except that they should respect the knowledge workers they hire and empower them to deliver the best possible service they can.  Unfortunately managment has been trained to measure and manage people like a time and cost study, rather than considering the value that their staff can bring them.</p>
<blockquote>
<p>Blinkered Manager: “What happens if I train my staff and they all leave”<br>Enlightened developer: “What happens if you dont train your staff and they all stay”</p>
</blockquote>
<p>If you want a successful business then you need successful people, people who will help you drive the business forward and not be a blocker to the delivery of your ideas. </p>
<p>There have been quite a few organisations that are now able to deliver at the speed of thought, deploying hundereds of ideas a day and getting the best feedback you can in the world - the customers recieving your service.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>There are a great many developer and tech conferences to got to and the numbers are increasing.  Some of these conferences are free or free if you speak or volunteer, some are relativley cheap and some you may be able to persuade your company to pay for.  But why should you even consider going to a conference in the first place?</p>]]>
    
    </summary>
    
      <category term="presenting" scheme="http://jr0cket.co.uk/tags/presenting/"/>
    
      <category term="events" scheme="http://jr0cket.co.uk/categories/events/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Create Great Looking Website Content With Twitter Bootstrap]]></title>
    <link href="http://jr0cket.co.uk/2014/03/create-great-looking-website-content-with-twitter-bootstrap.html"/>
    <id>http://jr0cket.co.uk/2014/03/create-great-looking-website-content-with-twitter-bootstrap.html</id>
    <published>2014-03-08T08:16:30.000Z</published>
    <updated>2015-03-18T15:08:46.204Z</updated>
    <content type="html"><![CDATA[<h2 id="What_is_Twitter_bootstrap?">What is Twitter bootstrap?</h2><p>Bootstrap is an HTML5 toolkit from Twitter to help kickstart webapps and web content sites.  It includes a base Cascading Style Sheet (CSS) and HTML for forms, buttons, typography, tables, grids, navigation and much more.</p>
<p>Bootstrap stylesheet provides an easy-to-implement 960 grid for efficient layout, as well as expertly crafted styles for typography, navigation, tables, forms, buttons, and more. To take care of everyday JavaScript touches, Bootstrap provides a well built set of jQuery plugins for drop-down menus, tabs, modal boxes, tooltips, alert messages, and more.</p>
<p>This helps you create a standards compliant, responsive, user-friendly, professionally built HTML5 website, right out of the box. </p>
<a id="more"></a>
<h2 id="Licencing">Licencing</h2><p>Bootstrap is under the Apache 2.0 license, provide a great deal of creative freedom. So long as you give the good folks at Twitter due credit for their work, you’re free to take, tweak, and customize everything to your heart’s content.</p>
<h2 id="Getting_started_with_Bootstrap">Getting started with Bootstrap</h2><p>If you just want to use Bootstrap for your project you can simply include the minified libraries from a content delivery network </p>
<figure class="highlight html"><figcaption><span>Use Bootstrap from a Content Delivery Network (CDN)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"utf-8"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"viewport"</span> <span class="attribute">content</span>=<span class="value">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">title</span>&gt;</span>Hack the Tower - London hackday<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">link</span> <span class="attribute">href</span>=<span class="value">"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css"</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span>&gt;</span>     </span><br><span class="line">   <span class="tag">&lt;<span class="title">link</span> <span class="attribute">href</span>=<span class="value">"http://netdna.bootstrapcdn.com/bootswatch/3.1.1/united/bootstrap.min.css"</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">link</span> <span class="attribute">href</span>=<span class="value">"css/hackthetower.css"</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>In the example, lines 8 &amp; 9 include minified bootstrap using the <strong>netdna</strong> content delivery network (CDN), so where ever people view your site from around the world it should not slow down due to loading these styleheets.</p>
<p>You can now use elements from Bootstrap in your project and view the results anywhere you have an internet connection.  To learn what these are, take a look at <a href="http://getbootstrap.com/" target="_blank" rel="external">Get Bootstrap</a> or Google for some of the very many examples out there.</p>
<h2 id="Working_with_Bootstrap">Working with Bootstrap</h2><p>If you want to see the styles that bootstrap uses or carry out some significant customisations, you can also download bootstrap to your laptop as normal CSS files.  Its common practice to put cascading stylesheets into a folder called CSS and JavaScript in a folder called javascript.</p>
<p>If you are doing significant customisation then you could edit the twitter bootstrap files directly.  Alternativley you can create your own CSS and JavaScript files that over-ride the bootstrap styles and scripts.</p>
<h2 id="Resources">Resources</h2><p>The following links will give you ideas on how to make the most out of Bootstrap:</p>
<ul>
<li><a href="http://getbootstrap.com/getting-started/" target="_blank" rel="external">Get Bootstrap - Getting Started</a></li>
<li>Tutorial: <a href="http://www.revillweb.com/tutorials/twitter-bootstrap-tutorial/" target="_blank" rel="external">Up and running with Twitter Bootstrap in 20 minutes</a></li>
<li>Tutorial: <a href="http://www.w3resource.com/twitter-bootstrap/tutorial.php" target="_blank" rel="external">w3resource: Twitter Bootstrap 3 tutorial</a></li>
<li>Video: <a href="https://www.youtube.com/watch?v=no-Ntkc836w" target="_blank" rel="external">Bootstrap Tutorial For Beginners - Responsive Design with Bootstrap</a></li>
<li><a href="http://blog.getbootstrap.com/" target="_blank" rel="external">Official Bootstrap blog</a></li>
<li><a href="http://stackoverflow.com/questions/tagged/twitter-bootstrap-3" target="_blank" rel="external">StackOverflow - Twitter-Bootstrap-3</a></li>
<li><a href="https://twitter.com/twbootstrap" target="_blank" rel="external">@twbootstrap</a></li>
</ul>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="What_is_Twitter_bootstrap?">What is Twitter bootstrap?</h2><p>Bootstrap is an HTML5 toolkit from Twitter to help kickstart webapps and web content sites.  It includes a base Cascading Style Sheet (CSS) and HTML for forms, buttons, typography, tables, grids, navigation and much more.</p>
<p>Bootstrap stylesheet provides an easy-to-implement 960 grid for efficient layout, as well as expertly crafted styles for typography, navigation, tables, forms, buttons, and more. To take care of everyday JavaScript touches, Bootstrap provides a well built set of jQuery plugins for drop-down menus, tabs, modal boxes, tooltips, alert messages, and more.</p>
<p>This helps you create a standards compliant, responsive, user-friendly, professionally built HTML5 website, right out of the box. </p>]]>
    
    </summary>
    
      <category term="bootstrap" scheme="http://jr0cket.co.uk/tags/bootstrap/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Creating Blog Posts With Octopress]]></title>
    <link href="http://jr0cket.co.uk/2014/03/creating-blog-posts-with-octopress.html"/>
    <id>http://jr0cket.co.uk/2014/03/creating-blog-posts-with-octopress.html</id>
    <published>2014-03-04T15:46:14.000Z</published>
    <updated>2015-03-18T15:08:46.204Z</updated>
    <content type="html"><![CDATA[<p>Octopress provides an easy way to create blog posts by proving a task that will automatically place and name your markdown file.  This helps manage your blog posts in a sensible structure and avoids conflicts.</p>
<p>To create a new post, use the following command inside your Octopress project folder:</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">rake</span> new_post[<span class="string">"Title of your blog post"</span>]</span><br></pre></td></tr></table></figure>
<p>This will create a markdown file including frontmatter to apply the blog post style.  The task creates the file under the _source folder and included the date at the start of the filename.</p>
<a id="more"></a>
<p>Now you can edit the file and simply add your content.  Once you have written your blog post you can ask Octopress to generate the html for your new post.</p>
<figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rake <span class="keyword">ge</span><span class="label">nerate</span></span><br></pre></td></tr></table></figure>
<p>You can view the results locally, or simply deploy up to your chosen location (eg. github pages)</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">rake</span> preview</span><br><span class="line">rake deploy</span><br></pre></td></tr></table></figure>
<p>If you are confident about the changes you are making, or have a test website you are deploying to, then you can use a single command to generate the new version of the site and publish it directly.</p>
<figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rake <span class="keyword">ge</span><span class="label">n_deploy</span></span><br></pre></td></tr></table></figure>
<h2 id="Summary">Summary</h2><p>This covers the bloggine workflow for Octopress.  Next we will cover adding content in your blog post markdown files, inlcuding text formatting, images, code snippets, embedded video, etc</p>
<p>Thank you</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Octopress provides an easy way to create blog posts by proving a task that will automatically place and name your markdown file.  This helps manage your blog posts in a sensible structure and avoids conflicts.</p>
<p>To create a new post, use the following command inside your Octopress project folder:</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">rake</span> new_post[<span class="string">"Title of your blog post"</span>]</span><br></pre></td></tr></table></figure>
<p>This will create a markdown file including frontmatter to apply the blog post style.  The task creates the file under the _source folder and included the date at the start of the filename.</p>]]>
    
    </summary>
    
      <category term="octopress" scheme="http://jr0cket.co.uk/tags/octopress/"/>
    
      <category term="blogging" scheme="http://jr0cket.co.uk/categories/blogging/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[First Blog Post Ever - Awesome]]></title>
    <link href="http://jr0cket.co.uk/2014/03/octopress-first-blog-post-ever-awesome.html"/>
    <id>http://jr0cket.co.uk/2014/03/octopress-first-blog-post-ever-awesome.html</id>
    <published>2014-03-03T00:08:42.000Z</published>
    <updated>2015-03-18T15:08:46.212Z</updated>
    <content type="html"><![CDATA[<p>This is the first blog post of many in my adventures in learning how to publish a blog using Octopress.  </p>
<p>As a developer I want a lightweight tool to create and easily publish content interesting to other developers in the community.  Although I can write HTML, CSS and JavaScript for webapps, I dont want to be slowed down writing these things when I am doing creative writing.</p>
<p>Using Octopress, which is a blogging framework on top of Jekyll, I can write my content using Markdown.  As Markdown is just simple text with a few characters and indents used for formating, I can focus on the writing and make it as appealing as I can.  I dont get distracted by the visual layout of the content and a standard design for the blog is consistently applied.<br><a id="more"></a></p>
<p>The only challenge I had intially was to get a working copy of Ruby running on my Ubuntu laptop.  Jekyll and therefore Octopress requires Ruby version 1.9.3 or greater and Unfortunately I seemed to have a mix of 1.9.1 and 1.9.3.  In Ubuntu 13.10 there is a strange stiuation where the 1.9.3 version of ruby was installed along side version 1.9.1 and therefore errors arrose when trying to generate the site.</p>
<p>To fix Ruby on Ubuntu, I loaded up Synaptic package manager and removed all Ruby packages and anything related, such as gem and bundler.  Then I installed the package ruby2.0 along with the docs and dev packages for that version.  With only the latest version of Ruby installed, Octopress worked perfectly.</p>
<p>I look forward to sharing my further experiences blogging with Octopress</p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>This is the first blog post of many in my adventures in learning how to publish a blog using Octopress.  </p>
<p>As a developer I want a lightweight tool to create and easily publish content interesting to other developers in the community.  Although I can write HTML, CSS and JavaScript for webapps, I dont want to be slowed down writing these things when I am doing creative writing.</p>
<p>Using Octopress, which is a blogging framework on top of Jekyll, I can write my content using Markdown.  As Markdown is just simple text with a few characters and indents used for formating, I can focus on the writing and make it as appealing as I can.  I dont get distracted by the visual layout of the content and a standard design for the blog is consistently applied.<br>]]>
    
    </summary>
    
      <category term="octopress" scheme="http://jr0cket.co.uk/tags/octopress/"/>
    
      <category term="blogging" scheme="http://jr0cket.co.uk/categories/blogging/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Share Your Revealjs Slides on Github Pages]]></title>
    <link href="http://jr0cket.co.uk/2014/01/share-your-revealjs-slides-on-github-pages.html"/>
    <id>http://jr0cket.co.uk/2014/01/share-your-revealjs-slides-on-github-pages.html</id>
    <published>2014-01-03T23:50:00.000Z</published>
    <updated>2015-03-18T15:08:46.212Z</updated>
    <content type="html"><![CDATA[<p>In previous articles I showed how to <a href="http://jr0cket.co.uk/2013/09/create-html5-presentations-emacs-revealjs.html" target="_blank" rel="external">setup Emacs Org-reveal &amp; Reveal.js</a> to <a href="http://jr0cket.co.uk/2013/10/create-cool-slides--Org-mode-Revealjs.html" target="_blank" rel="external">generate your own presentations</a> from Emacs Org-mode files.  This time I’ll show you how to publish those presentations on <a href="http://pages.github.com/" target="_blank" rel="external">Github Pages</a> as I have done for <a href="http://jr0cket.github.io/slides" target="_blank" rel="external">my own presentations</a>.</p>
<a id="more"></a>
<p><a href="http://pages.github.com/" target="_blank" rel="external">Github Pages</a> are a great place for publishing your <a href="http://lab.hakim.se/reveal-js/" target="_blank" rel="external">Reveal.js</a> presentations or any static web content.  For existing repositories you simply commit your content to a <code>gh-pages</code> branch or you can create a specific user or organisation repository and commit to the <code>master</code> branch.</p>
<blockquote><p>Github Pages are great for any websites that is self-contained, in that there is no reliance on a database or other services running locally.  You can even create great looking pages without any coding by using the Github authoring tool, as I have done with my Github user home page.</p>
</blockquote>
<h2 id="How_to_use_Github_pages">How to use Github pages</h2><p><strong>Existing code repositories</strong><br>If you already have a repository for your code and want to add web page documentation, then you can simply add a <code>gh-pages</code> branch and commit all your documentation to that branch.</p>
<p><strong>Content only repositories</strong><br>If you only have content then you can create a user or organisation repository.  This is a specifically named repository in the form of <code>name.github.io</code>  where name is the exact name of your Github user account or the Github organisation you are part of.</p>
<p>As my Github user account name is jr0cket I created an repository named <code>jr0cket.github.io</code>.</p>
<p>Once created, you can type in the name of this repository into your browser and it will display any content you have committed into the repository (and pushed it to Github).</p>
<p><strong>Separating slide content into their own repository</strong><br>As I planed to create a number of presentations, I use both an account repository as the home page and created a new repository called slides to host all my presentations.  This allows all my presentations to be easily cloned or forked by others easily without getting content that is only relevant to me on my Github pages home page. </p>
<p>Keeping the presentations all in one repository keeps things simple should I define my own Reveal.js themes or if there are Reveal.js updates.</p>
<p>I added  everything to the gh-pages branch (reveal.js, images, org &amp; generated html files).  Then I generate the Reveal.js slides locally using org-reveal in Emacs, so I can check they look okay.  Once I am happy with the slides I commit the html and .org files to Git and push them up to Github.</p>
<h2 id="Setting_up_a_Github_Pages_account_repository">Setting up a Github Pages account repository</h2><p>Creating an user repository on Github is just the same as for any other repository, except that the name must match the form name.github.io - where name is exactly the same as you Github user name.</p>
<p>I created a new repository called <code>jr0cket.github.io</code>, this has a web address (URL) of <a href="http://jr0cket.github.io" target="_blank" rel="external">http://jr0cket.github.io</a></p>
<p>I used the Automatic Page Generator from Github to create the site without coding and with a handful of nice templates to choose from.  You can of course add your own HTML, CSS &amp; JavaScript if you wish.  The Automatic Page Generator is in on the Settings page of your repository, under the Github pages section.  This section shows you the repository URL and a button to generate a page for you.</p>
<p>If you are going to use your user or org repository for your slides, then jump to the secion on “Adding Reveal.js to your repository”<br>Creating a repository for your Reveal.js slides</p>
<p>If you don’t already have a Github repository for your slides (and are not using your user or org repository), go to your account on Github and create a new repository.</p>
<p>Then clone your Github repository locally (substituting the address of your repository)<br>git clone <a href="https://github.com/user/repository.git" target="_blank" rel="external">https://github.com/user/repository.git</a></p>
<h2 id="Create_an_orphaned_gh-pages_branch">Create an orphaned gh-pages branch</h2><p>Github pages publishes content only from the branch gh-pages (unless you are using a user or org repository).  In your local repository, create a new branch called gh-pages.  According to Github, the gh-pages branch should be an orphaned branch.</p>
<pre><code>cd repository
git checkout <span class="comment">--orphan gh-pages</span>
</code></pre><p>An orphaned branch is one that is not connected to another branch, in this case its not attached to master.  Technically I don’t think gh-pages branch needs to be orphaned to publish your content, but this is the approach that Github recommends.</p>
<p>Once you have the gh-pages branch you can commit your files to that branch as normal. </p>
<pre><code>git <span class="keyword">add</span> .
git commit -m <span class="string">"First pages commit"</span>
git <span class="keyword">push</span> origin gh-pages
</code></pre><p>Pushing your Reveal.js slides at this point will not give you the desired results, as we haven’t added the Reveal.js files to the repository.  So lets do that next.</p>
<h2 id="Adding_Reveal-js_to_your_repository">Adding Reveal.js to your repository</h2><p>You need to provide the JavaScript and CSS files from Reveal.js to make your slides display correctly.  I copy the following folders from within the reveal.js folder into the root of my slides project</p>
<pre><code>cp /path/<span class="keyword">to</span>/revealjs/css    ~/<span class="keyword">my</span>-slides
cp /path/<span class="keyword">to</span>/revealjs/js     ~/<span class="keyword">my</span>-slides
cp /path/<span class="keyword">to</span>/revealjs/lib    ~/<span class="keyword">my</span>-slides
cp /path/<span class="keyword">to</span>/revealjs/plugin ~/<span class="keyword">my</span>-slides
</code></pre><p>You also need to check that the HTML for your web pages references Reveal.js files correctly.  The best way to do this is in the configuration for Emacs Org-reveal.</p>
<p>In my Org-reveal setup, I have defined the root for the Reveal.js files in my live-pack init.el file as follows:</p>
<pre><code><span class="list">(<span class="keyword">setq</span> org-reveal-root <span class="string">""</span>)</span>
</code></pre><p>So long at this org-reveal setting is loaded, it shouldn’t matter which file you add it to in your Emacs configuration.</p>
<p>The HTML you generate with Org-reveal in Emacs should have references to the Reveal.js includes in the <head> section.  Here is an example:</head></p>
<pre><code>&lt;html <span class="variable">lang=</span><span class="string">"en"</span>&gt;
&lt;head&gt;
&lt;meta <span class="variable">charset=</span><span class="string">"utf-8"</span>/&gt;
&lt;title&gt;(My presentation title)&lt;/title&gt;
&lt;meta <span class="variable">name=</span><span class="string">"author"</span> <span class="variable">content=</span><span class="string">"(John Stevenson)"</span>/&gt;
&lt;link <span class="variable">rel=</span><span class="string">"stylesheet"</span> <span class="variable">href=</span><span class="string">"./css/reveal.min.css"</span>/&gt;
&lt;link <span class="variable">rel=</span><span class="string">"stylesheet"</span> <span class="variable">href=</span><span class="string">"./css/theme/jr0cket.css"</span> <span class="variable">id=</span><span class="string">"theme"</span>/&gt;
&lt;link <span class="variable">rel=</span><span class="string">"stylesheet"</span> <span class="variable">href=</span><span class="string">"./css/print/pdf.css"</span> <span class="variable">type=</span><span class="string">"text/css"</span> <span class="variable">media=</span><span class="string">"print"</span>/&gt;
  &lt;meta <span class="variable">name=</span><span class="string">"description"</span> <span class="variable">content=</span><span class="string">"My presentation title"</span>&gt;
&lt;/head&gt;
</code></pre><h2 id="The_final_push">The final push</h2><p>Then push the Reveal.js files to your Github repository (and any updated to your Org &amp; html files)</p>
<pre><code>git <span class="keyword">add</span> .
git commit -m <span class="string">"Adding Reveal.js files for presentation"</span>
git <span class="keyword">push</span> origin gh-pages
</code></pre><h2 id="Browsing_your_Slides">Browsing your Slides</h2><p>If you added your slides to a user or org repository, then you should be able to browse to <a href="http://name.github.io" target="_blank" rel="external">http://name.github.io</a> where name is your Github user or org name (eg. <a href="http://jr0cket.github.io" target="_blank" rel="external">http://jr0cket.github.io</a>).</p>
<p>If, like me, you created a seperate repository for all your slides, you can brows them by going to <a href="http://name.github.io/repo-name" target="_blank" rel="external">http://name.github.io/repo-name</a> where name is your Github user name and repo-name is the name of the repository you added Reveal.js and your slides to (eg. <a href="http://jr0cket.github.io/slides" target="_blank" rel="external">http://jr0cket.github.io/slides</a>).</p>
<p>Note that you need to add the html filename to the URL to browse your presentation, or as I have done add links to the page on jr0cket.github.io</p>
<h2 id="Using_Hub_as_an_alternative_way_to_create_your_Github_pages_repository">Using Hub as an alternative way to create your Github pages repository</h2><ul>
<li>Install <a href="http://hub.github.com/" target="_blank" rel="external">Hub</a></li>
<li>Create a folder called <code>name.github.io</code> on your laptop, where <em>name</em> is your Github user name or organisation name</li>
<li>Inside that folder, initialise a git repository - <code>git init</code></li>
<li>Rename the master branch to gh-pages - <code>git branch -m gh-pages</code></li>
<li>Use hub to to create the repository on github - <code>hub create -d &quot;optional description of the repository&quot;</code></li>
</ul>
<p>If you want to specify the repository name using hub, use the command form - <code>hub create account-name.github.io -d &quot;optional description of the repository&quot;</code></p>
<ul>
<li>Create and commit your content in the local repository on the gh-branch, then push the <code>gh-pages branch to github - github push -u origin gh-pages</code></li>
</ul>
<p>The <code>-u</code> option sets github to be the default remote repository to and the gh-pages the default branch.  So when you do a push or pull you dont need to specify remote repository or branch you can just do git push and git pull</p>
<h2 id="Example_Reveal-js_presentations_on_Github_pages">Example Reveal.js presentations on Github pages</h2><p>See my <a href="http://jr0cket.github.io/slides" target="_blank" rel="external">Github page</a> for a list of my presentations created with Emacs Org-mode and Reveal.js.</p>
<p>Thank you.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>In previous articles I showed how to <a href="http://jr0cket.co.uk/2013/09/create-html5-presentations-emacs-revealjs.html">setup Emacs Org-reveal &amp; Reveal.js</a> to <a href="http://jr0cket.co.uk/2013/10/create-cool-slides--Org-mode-Revealjs.html">generate your own presentations</a> from Emacs Org-mode files.  This time I’ll show you how to publish those presentations on <a href="http://pages.github.com/">Github Pages</a> as I have done for <a href="http://jr0cket.github.io/slides">my own presentations</a>.</p>]]>
    
    </summary>
    
      <category term="emacs" scheme="http://jr0cket.co.uk/tags/emacs/"/>
    
      <category term="revealjs" scheme="http://jr0cket.co.uk/tags/revealjs/"/>
    
      <category term="presenting" scheme="http://jr0cket.co.uk/categories/presenting/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Github Pages for Reveal.js Slides Created With Emacs Org-Mode]]></title>
    <link href="http://jr0cket.co.uk/2014/01/github-pages-for-revealjs-slides-via-emacs-org-mode.html.html"/>
    <id>http://jr0cket.co.uk/2014/01/github-pages-for-revealjs-slides-via-emacs-org-mode.html.html</id>
    <published>2014-01-03T13:34:00.000Z</published>
    <updated>2015-03-18T15:08:46.208Z</updated>
    <content type="html"><![CDATA[<img src="http://1.bp.blogspot.com/-qlVcL6zWbjY/TzFMw8PPiGI/AAAAAAAAEbs/-Ozv0X_6mrQ/s1600/github-logo.png" class="img-thumbnail">
<p>In previous articles I showed how to <a href="http://blog.jr0cket.co.uk/2013/09/create-html5-presentations-emacs-revealjs.html" target="_blank" rel="external">setup Emacs Org-reveal &amp; Reveal.js</a> to <a href="http://blog.jr0cket.co.uk/2013/10/create-cool-slides--Org-mode-Revealjs.html" target="_blank" rel="external">generate your own presentations</a> from Emacs Org-mode files.  This time I’ll show you how to publish those presentations on <a href="http://pages.github.com/" target="_blank" rel="external">Github Pages</a> as I have done for <a href="http://jr0cket.github.io/slides" target="_blank" rel="external">my own presentations</a>.</p>
<a id="more"></a>
<p><a href="http://pages.github.com/" target="_blank" rel="external">Github Pages</a> are a great place for publishing your <a href="http://lab.hakim.se/reveal-js/" target="_blank" rel="external">Reveal.js</a> presentations or any static web content. For existing repositories you simply commit your content to a <em>gh-pages branch</em> or to the <em>master branch</em> of a user or organisation repository.</p>
<blockquote><p><a href="http://pages.github.com/" target="_blank" rel="external">Github Pages</a> are great for websites that is self-contained, in that there is no reliance on a database or other services running locally.  You can even create great looking pages without any coding by using the Github authoring tool.</p>
</blockquote>
<h1 id="Existing_code_repositories">Existing code repositories</h1><p>If you already have a repository for your code and want to add web page documentation, then you can simply add a <em>gh-pages branch</em> and commit your web content to that branch.</p>
<img src="http://1.bp.blogspot.com/-qlVcL6zWbjY/TzFMw8PPiGI/AAAAAAAAEbs/-Ozv0X_6mrQ/s1600/github-logo.png" class="img-code">
<h1 id="Content_only_repositories">Content only repositories</h1><p>If you only have content then you can use a <em>user</em> or <em>organisation</em> repository.  This is a specifically named repository in the form of <code>name.github.io</code> where <code>name</code> is the exact name of your Github account or Github organisation you are part of.</p>
<p>In my case I <a href="https://github.com/new" target="_blank" rel="external">created a repository</a> named <code>jr0cket.github.io</code>, as my Github user account name is jr0cket. </p>
<p>Once created, you can type in the name of this repository into your browser and it will display any content you have committed into the repository and pushed it to Github.  </p>
<p>Your user or org repository also forms the entry point for other project, so if you have a project called <em>slides</em> with web content in its <em>gh-pages</em> branch, you can see that content using the address: <a href="http://jr0cket.github.io/slides" target="_blank" rel="external">http://jr0cket.github.io/slides</a></p>
<h1 id="Separating_slide_content_into_their_own_repository">Separating slide content into their own repository</h1><p>As I planed to create a number of presentations, I use both an account repository as the home page and created a new repository called slides to host all my presentations. &nbsp;This allows all my presentations to be easily cloned or forked by others easily without getting content that is only relevant to me on my Github pages home page. </p>
<p>Keeping the presentations all in one repository keeps things simple should I define my own Reveal.js themes or if there are Reveal.js updates.</p>
<p>I added &nbsp;everything to the <em>gh-pages</em> branch (reveal.js, images, org &amp; generated html files). &nbsp;Then I generate the Reveal.js slides locally using org-reveal in Emacs, so I can check they look okay. &nbsp;Once I am happy with the slides I commit the html and .org files to Git and push them up to Github.</p>
<h1 id="Setting_up_a_Github_Pages_user_account_repository">Setting up a Github Pages user account repository</h1><p>Creating an user repository on Github is just the same as for any other repository, except that the name must match the form name.github.io - where name is exactly the same as you Github user name.</p>
<p>I created a new repository called <code>jr0cket.github.io</code>, this has a web address (URL) of <a href="http://jr0cket.github.io/" target="_blank" rel="external">http://jr0cket.github.io</a></p>
<p>I used the Automatic Page Generator from Github to create the site without coding and with a handful of nice templates to choose from. &nbsp;You can of course add your own HTML, CSS &amp; JavaScript if you wish. &nbsp;The Automatic Page Generator is in on the Settings page of your repository, under the Github pages section. &nbsp;This section shows you the repository URL and a button to generate a page for you.</p>
<p>If you are going to use your user or org repository for your slides, then jump to the secion on “Adding Reveal.js to your repository”</p>
<h1 id="Creating_a_repository_for_your_Reveal-js_slides">Creating a repository for your Reveal.js slides</h1><p>If you don’t already have a Github repository for your slides (and are not using your user or org repository), go to your account on Github and <a href="https://github.com/new" target="_blank" rel="external">create a new repository</a>.</p>
<pre><code>git clone <span class="string">https:</span><span class="comment">//github.com/username/repository.git</span>
</code></pre><h1 id="Create_an_orphaned_gh-pages_branch">Create an orphaned gh-pages branch</h1><p>Github pages publishes content only from the branch gh-pages (unless you are using a user or org repository). In your local repository, create a new branch called gh-pages. According to Github, the gh-pages branch should be an orphaned branch.</p>
<pre><code>cd your-<span class="keyword">local</span>-repository
git checkout <span class="comment">--orphan gh-pages</span>
</code></pre><blockquote>
<p>An orphaned branch is one that is not connected to another branch, in this case its not attached to master. Technically I don’t think gh-pages branch needs to be orphaned to publish your content, especially if there is nothing in the master branch, but this is <a href="https://help.github.com/articles/creating-project-pages-manually" target="_blank" rel="external">the approach that Github recommends</a>.</p>
</blockquote>
<p>Once you have the gh-pages branch you can commit your files to that branch as normal. </p>
<pre><code>git <span class="keyword">add</span> .
git commit -m <span class="string">"Adding Reveal.js files for presentation"</span>
git <span class="keyword">push</span> origin gh-pages
</code></pre><p>Pushing your Reveal.js slides at this point will not give you the desired results, as we haven’t added the Reveal.js files to the repository. &nbsp;So lets do that next.</p>
<h1 id="Adding_Reveal-js_to_your_repository">Adding Reveal.js to your repository</h1><p>You need to provide the JavaScript and CSS files from Reveal.js to make your slides display correctly. &nbsp;I copy the following folders from within the reveal.js folder into the root of my slides project</p>
<pre><code>cd  /path/<span class="keyword">to</span>/revealjs/css    ~/<span class="keyword">my</span>-slides
cd  /path/<span class="keyword">to</span>/revealjs/js     ~/<span class="keyword">my</span>-slides
cd  /path/<span class="keyword">to</span>/revealjs/lib    ~/<span class="keyword">my</span>-slides
cd  /path/<span class="keyword">to</span>/revealjs/plugin ~/<span class="keyword">my</span>-slides
</code></pre><p>You also need to check that the HTML for your web pages references Reveal.js files correctly. &nbsp;The best way to do this is in the configuration for Emacs Org-reveal.</p>
<p>In my Org-reveal setup, I have defined the root for the Reveal.js files in my live-pack <code>init.el</code> file as follows:</p>
<pre><code><span class="list">(<span class="keyword">setq</span> org-reveal-root <span class="string">""</span>)</span>
</code></pre><p>So long at this org-reveal setting is loaded, it shouldn’t matter which file you add it to in your Emacs configuration.</p>
<p>The HTML you generate with Org-reveal in Emacs should have references to the Reveal.js includes in the <code>&lt;head&gt;</code> section. Here is an example:</p>
<pre><code><span class="tag">&lt;<span class="title">html</span> <span class="attribute">lang</span>=<span class="value">”en”</span>&gt;</span>
<span class="tag">&lt;<span class="title">head</span>&gt;</span>
  <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">”utf-8”</span>/&gt;</span>
  <span class="tag">&lt;<span class="title">title</span>&gt;</span>(My presentation title)<span class="tag">&lt;/<span class="title">title</span>&gt;</span>
  <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">”author”</span> <span class="attribute">content</span>=<span class="value">”(John</span> <span class="attribute">Stevenson</span>)”/&gt;</span>
  <span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">”stylesheet”</span> <span class="attribute">href</span>=<span class="value">”.</span>/<span class="attribute">css</span>/<span class="attribute">reveal.min.css</span>”/&gt;</span>
  <span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">”stylesheet”</span> <span class="attribute">href</span>=<span class="value">”.</span>/<span class="attribute">css</span>/<span class="attribute">theme</span>/<span class="attribute">jr0cket.css</span>” <span class="attribute">id</span>=<span class="value">”theme”</span>/&gt;</span>
  <span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">”stylesheet”</span> <span class="attribute">href</span>=<span class="value">”.</span>/<span class="attribute">css</span>/<span class="attribute">print</span>/<span class="attribute">pdf.css</span>” <span class="attribute">type</span>=<span class="value">”text</span>/<span class="attribute">css</span>” <span class="attribute">media</span>=<span class="value">”print”</span>/&gt;</span>
  <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">”description”</span> <span class="attribute">content</span>=<span class="value">”My</span> <span class="attribute">presentation</span> <span class="attribute">title</span>“&gt;</span>
<span class="tag">&lt;/<span class="title">head</span>&gt;</span>
</code></pre><h1 id="The_final_push">The final push</h1><p>Then push the Reveal.js files to your Github repository (and any updated to your Org &amp; html files)</p>
<pre><code>git <span class="keyword">add</span> .
git commit -m <span class="string">"Adding Reveal.js files for presentation"</span>
git <span class="keyword">push</span> origin gh-pages
</code></pre><h1 id="Browsing_your_Slides">Browsing your Slides</h1><p>If you added your slides to a user or org repository, then you should be able to browse to <a href="http://name.github.io" target="_blank" rel="external">http://name.github.io</a> where name is your Github user or org name (eg. <a href="http://jr0cket.github.io" target="_blank" rel="external">http://jr0cket.github.io</a>).</p>
<p>If, like me, you created a seperate repository for all your slides, you can brows them by going to <a href="http://name.github.io/repo-name" target="_blank" rel="external">http://name.github.io/repo-name</a> where name is your Github user name and repo-name is the name of the repository you added Reveal.js and your slides to (eg. <a href="http://jr0cket.github.io/slides" target="_blank" rel="external">http://jr0cket.github.io/slides</a>).</p>
<p>Note that you need to add the html filename to the URL to browse your presentation, or as I have done add links to the page on <a href="http://jr0cket.github.io/slides" target="_blank" rel="external">jr0cket.github.io</a></p>
<h1 id="Using_Hub_as_an_alternative_way_to_create_your_Github_pages_repository">Using Hub as an alternative way to create your Github pages repository</h1><p>Hub is a command line tool for working with git repositories and Github.  Hub makes it easy to create and fork repositories on Github without having to visit the Github website.</p>
<ul>
<li>Install <a href="http://hub.github.com/" target="_blank" rel="external"><strong>Hub</strong></a></li>
<li>Create a folder called <code>name.github.io</code> on your laptop, where name is your Github user name or organisation name</li>
<li>Inside that folder, initialise a git repository - <code>git init</code></li>
<li>Rename the master branch to gh-pages - <code>git branch -m gh-pages</code></li>
<li><p>Use hub to to create the repository on github - <code>hub create -d &quot;optional description of the repository&quot;</code><br>— If you want to specify the repository name using hub, use the command form - <code>hub create account-name.github.io -d &quot;optional description of the repository&quot;</code></p>
</li>
<li><p>Create and commit your content in the local repository on the gh-branch, then push the gh-pages branch to github <code>github push -u origin gh-pages</code></p>
</li>
</ul>
<p>— The -u option sets origin to be the default remote repository to and the gh-pages the default branch.  So next time you do a push or pull you dont need to specify the remote repository or branch, you can simply do <code>git push</code> and <code>git pull</code></p>
<h1 id="Example_Reveal-js_presentations_on_Github_pages">Example Reveal.js presentations on Github pages</h1><p>See <a href="http://jr0cket.github.io/slides" target="_blank" rel="external">my Github page</a> for my published presentations, created with Emacs Org-mode, Org-reveal and Reveal.js.</p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="http://1.bp.blogspot.com/-qlVcL6zWbjY/TzFMw8PPiGI/AAAAAAAAEbs/-Ozv0X_6mrQ/s1600/github-logo.png" class="img-thumbnail">
<p>In previous articles I showed how to <a href="http://blog.jr0cket.co.uk/2013/09/create-html5-presentations-emacs-revealjs.html">setup Emacs Org-reveal &amp; Reveal.js</a> to <a href="http://blog.jr0cket.co.uk/2013/10/create-cool-slides--Org-mode-Revealjs.html">generate your own presentations</a> from Emacs Org-mode files.  This time I’ll show you how to publish those presentations on <a href="http://pages.github.com/">Github Pages</a> as I have done for <a href="http://jr0cket.github.io/slides">my own presentations</a>.</p>]]>
    
    </summary>
    
      <category term="emacs" scheme="http://jr0cket.co.uk/tags/emacs/"/>
    
      <category term="github" scheme="http://jr0cket.co.uk/tags/github/"/>
    
      <category term="orgmode" scheme="http://jr0cket.co.uk/tags/orgmode/"/>
    
      <category term="presenting" scheme="http://jr0cket.co.uk/categories/presenting/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Ubuntu Gnome - Is It Better Than Ubuntu?]]></title>
    <link href="http://jr0cket.co.uk/2013/10/ubuntu-gnome-is-it-better-than-ubuntu.html.html"/>
    <id>http://jr0cket.co.uk/2013/10/ubuntu-gnome-is-it-better-than-ubuntu.html.html</id>
    <published>2013-10-14T22:17:00.000Z</published>
    <updated>2015-03-18T15:08:46.212Z</updated>
    <content type="html"><![CDATA[<img src="http://www.gnome.org/wp-content/themes/gnome-grass/images/gnome-logo.png" class="img-thumbnail">
<p>With a new version of <a href="http://www.ubuntu.com/" target="_blank" rel="external">Ubuntu</a> this month, I asked myself if I would get more out of one of the many other Linux distributions.  Here is what I learnt.</p>
<a id="more"></a>
<p>I’ve used Ubuntu as my main Linux distribution since I changed from <a href="http://www.debian.org/" target="_blank" rel="external">Debian</a> in 2005.  I started using Debian in 1995, so if I did change distributions I wanted to stay with the <em>.deb</em> packaging system which I value so much.  </p>
<p>Although I am weary of the reductions of features the Gnome team have made recently, <a href="http://ubuntugnome.org/" target="_blank" rel="external"><strong>Ubuntu Gnome</strong></a> was the first alternative distribution I tried and was surprised to find I quite like it.</p>
<img src="http://3.bp.blogspot.com/-jRj631yZJzY/UlsS3eLBbrI/AAAAAAAAL3U/FKLSLdKGn_I/s1600/ubuntu-gnome-my-basic-desktop.png" class="img-code">
<p>My Ubuntu Gnome desktop using Gnome Shell and a few extensions</p>
<h2 id="Installing_Ubuntu_Gnome">Installing Ubuntu Gnome</h2><p>This is not any different from the normal Ubuntu install and everything went well on my Lenovo x201T.</p>
<p>I selected to install Ubuntu Gnome over the entire hard drive (SSD) and use an encrypted disk and LVM (just in case I want to re-organise partitions at a later date).  I chose to get updates and multi-media codecs (for playing music and videos) during the installation too.</p>
<p>After about 20-30 minutes I had a new OS for my laptop, all ready to use.  A quick reboot and within 10 seconds I am logging in to Ubuntu Gnome.</p>
<h2 id="First_Impressions">First Impressions</h2><p>Ubuntu Gnome uses Gnome shell and there is a lot of commonality between it and Ubuntu Unity desktop.  To my surprise though I found I quickly started liking Ubuntu Gnome for lots of little reasons.  It helped that I had a quick look at the <a href="https://wiki.gnome.org/GnomeShell/CheatSheet" target="_blank" rel="external">Gnome Shell cheat sheet</a> which gives a great overview of the main features.</p>
<h2 id="Performance">Performance</h2><p>Gnome shell is really fast and responsive and I haven’t had any slow-downs as I increase the amount of apps running. As Ubuntu Unity is pretty quick too, then I don’t see any speed advantage.</p>
<p>Ubuntu Unity seems to use just a little bit more memory, but that may be due to more packages installed and extra services running (eg. UbuntuOne). Its not a significant difference.</p>
<h3 id="Automatic_Virtual_Desktops">Automatic Virtual Desktops</h3><p>Gnome shell automatically creates new virtual desktops as you add applications and deletes desktops when you close all apps on that desktop.  I like to keep one app per desktop, so its great that you can launch an app from the dash with the middle mouse button (the Lenovo laptops have 3 buttons) and it opens in a new desktop. When I close the app, Gnome shell tidies away my desktop, helping me keep more organised.  This is a feature I would love to have in Ubuntu.</p>
<p>Gnome Shell has vertically arranged desktops, so each desktop is stacked one on top of the other.     I quickly came to prefer this over the default grid of Ubuntu Unity.  Although you can change Unity’s grid layout with Ubuntu Tweak, I haven’t seen the ability to automatically create an delete desktops.</p>
<h2 id="The_Dash">The Dash</h2><p>The Gnome Shell launcher similar to Ubuntu Unity, however in Gnome Shell its attached to the overlay rather than being their on the desktop.  So with Gnome shell I only see the launcher when I press the Super key (as I always run my apps maximised).  This keeps my desktop very simple.</p>
<p>Whilst the launcher in Ubuntu Unity has lots of great features to help you launch and switch to your apps, I found I didn’t really use them.  I just set Unity to auto-hide the launcher </p>
<h2 id="Notifications">Notifications</h2><p>Gnome shell displays notifications on the bottom of the desktop rather than the top right corner in Ubuntu Unity. I prefer the placement in Ubuntu Unity, although they both could be smaller so they are less intrusive.</p>
<h2 id="Unwanted_software">Unwanted software</h2><p>There were a few packages and services that came with Ubuntu Gnome I didnt require, but not many.  The main packages I removed were:</p>
<ul>
<li>epiphany - an messaging client (I use Google for that)</li>
<li>spamassassin - email spam service (again I use Google)</li>
</ul>
<p>To remove the packages I just used the command line, as I knew the specific package names it was quicker than launching the Ubuntu software center</p>
<pre><code>apt-<span class="keyword">get</span> remove --purge <span class="package"><span class="keyword">package</span>-<span class="title">name</span></span>
</code></pre><p>To find out if there were any services running that I didnt need I use the command line again to list the status of all services currently installed:</p>
<pre><code>sudo <span class="keyword">service</span> --<span class="literal">status</span>-all
</code></pre><p>From this command I discovered spam assassin and removed it as above.</p>
<h2 id="Gnome_Shell_Extensions"><a href="https://extensions.gnome.org/" target="_blank" rel="external">Gnome Shell Extensions</a></h2><p>Gnome Shell allows customisations via extensions (written in JavaScript and possibly other languages) and there is <a href="https://extensions.gnome.org/" target="_blank" rel="external">a website full of them</a>.  The Gnome Shell extensions are really easy to use, its just like using the Chrome or Firefox extensions.</p>
<p>Each extension on the website has an on/off switch.  Switching on prompts you to accept that the package will be installed.  For some extensions there is also a tool icon that you can press to configure the extensions once installed.  You can manage your installed extensions from <a href="https://extensions.gnome.org/local/" target="_blank" rel="external">https://extensions.gnome.org/local/</a>.</p>
<p>These extensions give a really easy way to add features and Gnome Shell and without them it would have diminished the experience amd I would have stopped using Gnome Shell then and there.</p>
<p>The only issue with these extensions is that they can become outdated and break, with each release of Gnome Shell.</p>
<h3 id="Extensions_added">Extensions added</h3><p><strong>AppIndicator Status</strong></p>
<p>I use Dropbox to sync important files between different laptops (Linux, Mac) and although its easy to install Dropbox in Ubuntu Gnome, the status panel indicator for dropbox does not display.  By adding AppIndicator extension then the dropbox icon appears and I can control syncing of my files again.</p>
<p><strong><a href="https://extensions.gnome.org/extension/55/media-player-indicator/" target="_blank" rel="external">Media Player Indicator</a></strong></p>
<p>In Ubuntu Unity you can start and control the default music player (Rhythmbox) from the volume indicator.  The Media Player Indicator adds that functionality in Gnome Shell.  It worked for Rhythmbox although the Playlists didnt show up in the volume indicator.</p>
<p><strong> <a href="https://extensions.gnome.org/extension/545/hide-top-bar/" target="_blank" rel="external">Hide Top bar</a></strong></p>
<p>The biggest thing that put me off Gnome Shell at first was the wasted space at the top of the screen.  First there is the Gnome Shell menu bar, then the window decoration for the application, then the application menu and then the content of the app. From what I have read (cheat sheet) Gnome Shell will go the same route as Ubuntu Unity and put app menus in the top panel, making better use of the space.  Until then, I find <a href="https://extensions.gnome.org/extension/545/hide-top-bar/" target="_blank" rel="external">Hide Tob Bar</a> very welcome.  I have it set to auto hide and only show when the mouse approaches it.</p>
<p><strong><a href="https://extensions.gnome.org/extension/690/easyscreencast/" target="_blank" rel="external">EasyScreenCast</a></strong></p>
<p>Gnome Shell as screen casting software built in so you can record your desktop using <code>Control+Shift+Alt+R</code>.  Rather than have to remember that keyboard combo, EasyScreenCast gives you and indicator to control the recording.</p>
<p>EasyScreenCast seems to work really well and uses the <a href="http://www.webmproject.org/" target="_blank" rel="external">webm codec</a> by default, so you can just upload that straight to YouTube.</p>
<h3 id="Extensions_to_look_at_later">Extensions to look at later</h3><p><a href="https://extensions.gnome.org/extension/719/fast-user-switch/" target="_blank" rel="external">Fast user switch</a> - enables you to switch users without having to go via gdm</p>
<p><a href="https://extensions.gnome.org/extension/584/taskbar/" target="_blank" rel="external">Task bar</a> - displays icons of running applications on the top panel.  If I run more than one app per desktop this may be useful.</p>
<p><a href="https://extensions.gnome.org/extension/508/uptime-indicator/" target="_blank" rel="external">Uptime indicator</a> - shows how long in minutes it has been since the last boot.  Clicking on the indicator shows you the time Ubuntu Gnome was started.</p>
<p><a href="https://extensions.gnome.org/extension/53/pomodoro/" target="_blank" rel="external">Pomodoro time</a> - gives you a countdown to timebox work into 25 minute sessions. This pomodoro technique helps you concentrate on one task and get it done well.</p>
<p><a href="https://extensions.gnome.org/extension/11/monitor-status-indicator/" target="_blank" rel="external">Monitor status indicator</a> - a short-cut for the display controls to quickly manage your display settings.  I had a few problems with a second monitor, not sure if its this extension of Gnome Shell.</p>
<h2 id="Summary">Summary</h2><p>I like Ubuntu Gnome and Gnome Shell enough to give it a try for a few more weeks until the final versions of <a href="http://www.ubuntu.com/" target="_blank" rel="external">Ubuntu</a> and <a href="http://ubuntugnome.org/" target="_blank" rel="external">Ubuntu Gnome</a> are released. My Lenovo X201T is my spare laptop, so it doesn’t matter if something breaks, I can still do work on my my Lenovo X1 carbon, running Ubuntu.</p>
<p>Things in Ubuntu Gnome are changing quite a bit and there is a tendency for Gnome Shell extensions to break with new releases.  To see what is coming next have a look at the <a href="http://www.omgubuntu.co.uk/2013/09/10-best-features-gnome-3-10" target="_blank" rel="external">Gnome 3.10 features and changes</a>.</p>
<p>One thing that may make a difference is that both distributions will be replacing X windows.  Ubuntu has created <a href="https://wiki.ubuntu.com/Mir/" target="_blank" rel="external">Mir</a> and the Gnome project is behind <a href="https://wiki.gnome.org/Wayland" target="_blank" rel="external">Wayland</a>.  Its going to be interesting to see which approach works out best over the next few releases.</p>
<blockquote><p>I did try <a href="https://www.archlinux.org/" target="_blank" rel="external">Arch Linux</a> for a weekend and although there are some great things with the distribution, for now it just seems to eat too much time in setting everything up and learning the different tooling.  Although there is a lot of documentation, I found myself having to read pages and pages of content and not always finding the answers I was looking for.</p>
</blockquote>
<h2 id="6_month_later">6 month later</h2><p>I am still using Ubuntu as my prefered Linux distribution.  Gnome Shell has still a long way to come to offer the features I need and the extensions I want to use break to often to be fun fixing.</p>
<p>When Gnome Shell becomes more evolved and incorporates Wayland, then it will be time to give it another try and see how it stacks up to Ubuntu, Unity and Mir.</p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="http://www.gnome.org/wp-content/themes/gnome-grass/images/gnome-logo.png" class="img-thumbnail">
<p>With a new version of <a href="http://www.ubuntu.com/">Ubuntu</a> this month, I asked myself if I would get more out of one of the many other Linux distributions.  Here is what I learnt.</p>]]>
    
    </summary>
    
      <category term="ubuntu" scheme="http://jr0cket.co.uk/tags/ubuntu/"/>
    
      <category term="ubuntu" scheme="http://jr0cket.co.uk/categories/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Creating Cool Slides With Emacs Org-Mode and Revealjs]]></title>
    <link href="http://jr0cket.co.uk/2013/10/create-cool-slides--Org-mode-Revealjs.html.html"/>
    <id>http://jr0cket.co.uk/2013/10/create-cool-slides--Org-mode-Revealjs.html.html</id>
    <published>2013-10-03T14:55:00.000Z</published>
    <updated>2015-03-18T15:08:46.204Z</updated>
    <content type="html"><![CDATA[<img src="http://1.bp.blogspot.com/-PLeobToC6lc/TzFJCfBSLPI/AAAAAAAAEbE/zSx1cOgHzZE/s1600/emacs128x128icon.png" class="img-thumbnail">
<p><a href="http://lab.hakim.se/reveal-js" target="_blank" rel="external">Reveal.js</a> has a whole bag of tricks to help you highlight the concepts in your presentations. I’ll show you how to write presentations with Emacs &amp; Org-mode that make use of these features, whilest keeping your content as markdown text.  I use a <a href="https://raw.github.com/jr0cket/slides/gh-pages/template-jr0cket.org" target="_blank" rel="external">simple template</a> with all the common features there as examples I can copy-n-paste.</p>
<p>I also have a <a href="http://jr0cket.github.io/slides" target="_blank" rel="external">Github pages site with example slides</a> I have created.</p>
<a id="more"></a>
<blockquote>
<p>In a previous article I showed you <a href="http://blog.jr0cket.co.uk/2013/09/create-html5-presentations-emacs-revealjs.html" target="_blank" rel="external">how to configure Emacs, Org-reveal and Reveal.js</a> to create HTML5 presentations.</p>
</blockquote>
<h1 id="Creating_your_presentation">Creating your presentation</h1><p>Using Emacs, create a file for your presentation and ensure that the filename has the .org extension.</p>
<pre><code><span class="keyword">C</span>-x <span class="keyword">C</span> f my-presentation.org
</code></pre><blockquote>
<p>You can create a new file in Emacs just by opening a file with the new filename.</p>
</blockquote>
<h1 id="Defining_the_Title_Slide">Defining the Title Slide</h1><p>There is a special set of tags you can use to define the title slide, including the theme and style of the overall presentation.</p>
<p>At the top of the <code>my-presentation.org</code> file, add <code>Title</code>, <code>Author</code> and <code>Email</code> tags to create the tile slide.</p>
<pre><code><span class="preprocessor">#+Title: Presenting with Emacs</span>
<span class="preprocessor">#+Author: John Stevenson</span>
<span class="preprocessor">#+Email: @jr0cket</span>
</code></pre><blockquote>
<p>At first I could not figure out how to add a twitter handle rather than an email address, then I realised I could put anytihng for the email address.  So I just put @jr0cket as the email address and it displays just fine on the rendered slides.</p>
</blockquote>
<h1 id="Setting_the_Presentation_Theme_and_Slide_behaviour">Setting the Presentation Theme and Slide behaviour</h1><p>Once you have defined the overall configuration of the presentation, you can add a table of contents or include special formatting libraries like mathjax. </p>
<p>I never use the table of contents as unless you have a short presentation it will run off the bottom of the screen.  Here is an example of not having a table of contents, but having mathjax available:</p>
<pre><code>#+<span class="string">OPTIONS:</span> <span class="string">toc:</span>nil <span class="string">reveal_mathjax:</span>t
</code></pre><h2 id="Choosing_Themes">Choosing Themes</h2><p>You can choose from several built in presentations, including <strong>default</strong>, <strong>beige</strong>, <strong>sky</strong>, <strong>night</strong> (my favorite), <strong>serif</strong>, <strong>simple</strong>, <strong>moon</strong></p>
<p>You can also make your own theme by creating a new CSS file and defining styles to for that theme.</p>
<p>Define which theme you want using the code:</p>
<pre><code><span class="preprocessor">#+REVEAL_THEME: night</span>
</code></pre><h2 id="Transitions">Transitions</h2><p>There are several built in styles of transition effects to move from one slide to another.  I find linear the most pleasing, as it simply slides the content in from the right or bottom to.  Cube is quite a nice rotating cube in the middle of the screen, so you may not get the full benefit of a wide screen display. Zoom is a bit to much for my delicate eyes.</p>
<p>The available tranistions include: <strong>default, cube, page, concave, zoom, linear, fade, none</strong></p>
<p>Define a transition before any of the slide content (before the first heading) using the code:</p>
<pre><code><span class="preprocessor">#+REVEAL_TRANS: linear    </span>
</code></pre><h1 id="Defining_Slides">Defining Slides</h1><p>Each slide is defined by using a <code>*</code> character in front of the title.  * is the top-level header for an Org-mode file, so you can collapse each slides content using the TAB key to make it easy to navigate whist creating that content.</p>
<img src="http://github.com/yjwen/org-reveal/raw/master/images/hlevel.png" class="img-code">
<p>Using a single <code>*</code> for a number of slide titles will create a series of slides you navigate horizontally.  If you define a slide with two <code>*</code> characters, then you create slides underneath the slide above.  These slides underneath are navigated vertically, giving a 2 dimensional effect to your presentation.</p>
<pre><code>* title 1
* title 2
**<span class="instruction"> sub-title </span>2.1
**<span class="instruction"> sub-title </span>2.2
* title 3
</code></pre><p>Each title is a seperate slide, however sub-title 2.1 and 2.1 are slides underneath title 2.  If you are on the title 2 slide and you press the left arrow, you will got to title 3 slide.  If you are on title 2 slide and press the down arrow, you will go to slide heading 2.1.</p>
<p>So with this simple notation you can create a 2-dimentional presentation.</p>
<h1 id="Adding_Slide_Content">Adding Slide Content</h1><p>You can place what ever text you want underneath the heading to for the slide content</p>
<pre><code>* A very interesting slide

**This slide <span class="keyword">is</span> interesting because I am a geek :)
  - bullet points can be added <span class="keyword">in</span> moderation
  - dont <span class="keyword">get</span> too carried away <span class="keyword">with</span> them
</code></pre><h1 id="Adding_Links">Adding Links</h1><p>Links to other web pages and resources can be added by simply including a web address in double square brackets:</p>
<pre><code><span class="string">[[web address]]</span>   
<span class="string">[[http://www.google.com]]</span>   
</code></pre><p>You can also mark text to be a link by placing the link text inside double square brackets as follows:</p>
<pre><code>[[web address][clickable text]]
[[http://www.google.co.uk] [Google search engine]]
</code></pre><p>Any links defined will use the slide style for their colour, font and any animation styles.</p>
<h1 id="Including_Images">Including Images</h1><p>You can include images in the presentation using the same kind of syntax for links.  Simply add the relative path of your image within double brackets</p>
<pre><code><span class="string">[[./images/org-reveal.png]]</span>
</code></pre><p>This will display an image from the file org-reveal.png in the images folder.  The same form is also used if you want to include images from web</p>
<pre><code><span class="string">[[http://web-address/image-name.png]]</span>
</code></pre><h1 id="Slide_Colours_and_Background_Images">Slide Colours and Background Images</h1><p>You can set a different colour or image background for each slide, over-riding the presentation them chosen.  This is set by defining properties for each slide using the <code>:PROPERTIES:</code> notation.</p>
<p>To define the colour of the slide background you can use an RGB coluor value or any supported CSS colour format. Here is a simple example of a slide with a red background </p>
<pre><code><span class="attribute">:PROPERTIES:</span>
<span class="attribute">:reveal_background:</span> #FF0000
<span class="attribute">:END:</span>
</code></pre><p>When setting a background image simply provide the relative path to that image. You can also make the background image slide in rather than fade in.</p>
<p>This slide has a background image</p>
<pre><code><span class="attribute">:PROPERTIES:</span>
<span class="attribute">:reveal_background:</span> ./logos/github-octopus.png
<span class="attribute">:reveal_background_trans:</span> slide
<span class="attribute">:END:</span>
</code></pre><h2 id="Effects_within_Slides">Effects within Slides</h2><p>You can animate specific parts of each slide using Fragment Options.  You can make your content <strong>grow</strong>, <strong>shrink</strong>, <strong>roll-in</strong> and <strong>fade-out</strong>.  You can also highlight the text in red, green and blue.</p>
<ul>
<li>This slide rolls in text line by line:</li>
</ul>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#+ATTR_REVEAL: :frag roll-in</span></span><br><span class="line">- show bullet-points</span><br><span class="line">- <span class="constant">one</span> <span class="keyword">by</span> <span class="constant">one</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Highlight the last bulletpoint in red</li>
</ul>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- all these bullet-points</span><br><span class="line">- show up <span class="function_start"><span class="keyword">on</span></span> <span class="keyword">the</span> page</span><br><span class="line">- <span class="keyword">as</span> soon <span class="keyword">as</span> <span class="keyword">its</span> shown</span><br><span class="line"></span><br><span class="line"><span class="comment">#+ATTR_REVEAL: :frag highlight-red</span></span><br><span class="line">- this <span class="keyword">last</span> one <span class="keyword">is</span> <span class="keyword">then</span> highlighted <span class="keyword">in</span> red</span><br></pre></td></tr></table></figure>
<h1 id="Generating_your_Reveal-js_presentation">Generating your Reveal.js presentation</h1><p>Once you have your presentation written you can generate the presentation with the command</p>
<pre><code>M-x org-reveal-<span class="keyword">export</span>-<span class="keyword">to</span>-html
</code></pre><p>This command creates a single index.html file that contains your whole presentation, except for any images you have used.  The <code>.html</code> file will be have the same name as your org-mode file, so if you created your content in <code>my-presentation.org</code> then you will generate <code>my-presentation.html</code>.</p>
<p>If your links and images are all correctly referenced in your presentation, then simply opening my-presentation.html file in a browser will show you the end result.</p>
<h1 id="In_Summary">In Summary</h1><p>I really liked the presentations generated by Reveal.js and Org-reveal makes is easy to create presentations without having to hand code any JavaScript.  As my presentations are written in plain text then its easy to manage them with Git and collaborate with others via Github.</p>
<p>The next step is to get these presentations in the Cloud.  I could use Heroku, although as this is just a static website and then <a href="http://pages.github.com/" target="_blank" rel="external"><strong>Github pages</strong></a> makes more sense.  I will cover deploying your presentations to Github pages in a follow-on article.</p>
<p>I may also create my own theme by customising one of the existing cascading style sheets (CSS files) should I have issues with projectors but at the moment the night theme works well for me.</p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="http://1.bp.blogspot.com/-PLeobToC6lc/TzFJCfBSLPI/AAAAAAAAEbE/zSx1cOgHzZE/s1600/emacs128x128icon.png" class="img-thumbnail">
<p><a href="http://lab.hakim.se/reveal-js">Reveal.js</a> has a whole bag of tricks to help you highlight the concepts in your presentations. I’ll show you how to write presentations with Emacs &amp; Org-mode that make use of these features, whilest keeping your content as markdown text.  I use a <a href="https://raw.github.com/jr0cket/slides/gh-pages/template-jr0cket.org">simple template</a> with all the common features there as examples I can copy-n-paste.</p>
<p>I also have a <a href="http://jr0cket.github.io/slides">Github pages site with example slides</a> I have created.</p>]]>
    
    </summary>
    
      <category term="emacs" scheme="http://jr0cket.co.uk/tags/emacs/"/>
    
      <category term="orgmode" scheme="http://jr0cket.co.uk/tags/orgmode/"/>
    
      <category term="revealjs" scheme="http://jr0cket.co.uk/tags/revealjs/"/>
    
      <category term="presenting" scheme="http://jr0cket.co.uk/categories/presenting/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Create HTML5 Presentations Easily With Emacs and Reveal.js]]></title>
    <link href="http://jr0cket.co.uk/2013/10/create-html5-presentations-emacs-revealjs.html.html"/>
    <id>http://jr0cket.co.uk/2013/10/create-html5-presentations-emacs-revealjs.html.html</id>
    <published>2013-10-03T11:00:00.000Z</published>
    <updated>2015-03-18T15:08:46.204Z</updated>
    <content type="html"><![CDATA[<img src="http://1.bp.blogspot.com/-PLeobToC6lc/TzFJCfBSLPI/AAAAAAAAEbE/zSx1cOgHzZE/s1600/emacs128x128icon.png" class="img-thumbnail">
<p>Creating presentations with <a href="http://www.gnu.org/software/emacs/" target="_blank" rel="external"><strong>Emacs</strong></a> is quick and more collaborative than with other tools I have used.  Using Emacs <a href="http://orgmode.org/" target="_blank" rel="external"><strong>Org-mode</strong></a> you can easily structure and navigate your content.  Using  <a href="https://github.com/yjwen/org-reveal" target="_blank" rel="external">Org-Reveal</a> you can generate a great looking HTML5 presentation using <a href="https://github.com/hakimel/reveal.js/" target="_blank" rel="external"><strong>Reveal.js</strong></a> from your org-mode content.</p>
<p>I’ll show you how to configure Emacs, <a href="https://github.com/yjwen/org-reveal" target="_blank" rel="external">Org-Reveal</a> and Reveal.js so you can create content in plain text and generate a themed, animated slide-deck that supports <a href="http://softwaremaniacs.org/soft/highlight/en/" target="_blank" rel="external">syntax highlighting</a> for lots of languages.  As your content is in plan text its easy to collaborate around it with Github.</p>
<a id="more"></a>
<blockquote>
<p>I use <a href="http://overtone.github.io/emacs-live/" target="_blank" rel="external">Emacs Live</a> as a base configuration, although there is no dependency on anything in Emacs Live to make this setup work.</p>
</blockquote>
<h1 id="What_is_Reveal-js">What is Reveal.js</h1><p><a href="https://github.com/hakimel/reveal.js/" target="_blank" rel="external">Reveal.js</a> is a JavaScript library for creating slides for viewing in a browser, using CSS and JavaScript.  You can write your presentations in HTML or use <a href="http://slid.es/" target="_blank" rel="external">Slid.es</a> to live edit and host your presentation in cloud.  There are a whole list of <a href="https://github.com/hakimel/reveal.js/wiki/Example-Presentations" target="_blank" rel="external">Example presentations</a> to get an idea of what it Reveljs can do.  I recommend looking at the <a href="http://lab.hakim.se/reveal-js/" target="_blank" rel="external">Reveal.js presentation</a> first.  There is also a <a href="http://htmlcheats.com/reveal-js/reveal-js-tutorial-reveal-js-for-beginners/" target="_blank" rel="external">beginners tutorial for Reveal.js</a> to help you get going.</p>
<p>Using Emacs we don’t need to write directly in HTML as we will generate it from our text file using Org-mode.  There is a dependency on Reveal.js library with this approach.</p>
<h2 id="Installing_Reveal-js">Installing Reveal.js</h2><p>1)  Download the <a href="https://github.com/hakimel/reveal.js/releases" target="_blank" rel="external">latest version of reveal.js</a></p>
<p>2)  Extract somewhere sutitable, eg, ~/apps/revealjs if its just for your account or /opt/javascript/revealjs if you have multiple operating system accounts.</p>
<p>To see an example presentation, open the index.html from the extracted Reveal.js download in a browser.</p>
<h1 id="Why_use_Emacs_and_Org-mode_for_presentations">Why use Emacs and Org-mode for presentations</h1><p>Org-mode is <a href="http://blog.jr0cket.co.uk/2013/08/manage-dev-life-with-emacs-org-mode.html" target="_blank" rel="external">a great way to write notes, make presentations and organise tasks</a>.  It is built into Emacs so you don’t need to do any configuration to use it.  Simply create a file with a .org extension (eg. <code>my-presentation.org</code>) and when you open that file in Emacs it will automatically switch on org-mode.</p>
<p>Org-mode allow you to structure information simply and quickly.  The headings and sub-headings can expand and collapse using the tab key, so you only see the level of detail you need.</p>
<p>The content is always a text file so you don’t have to worry about any proprietary formatting and as its text its easy to collaborate around using developer tools like Git and Github.</p>
<h1 id="Configuring_Emacs,_Org-mode_and_Org-reveal">Configuring Emacs, Org-mode and Org-reveal</h1><p>Org-reveal is a feature you add to Emacs to generate presentations using Reveal.js.  I am using Emacs Live as a base configuration, so I simply added the org-reveal file to my own customisations of Emacs Live in my live-pack.</p>
<p>I download the <a href="https://github.com/yjwen/org-reveal" target="_blank" rel="external">Org-Reveal file from Github </a> and placed it in my live pack config folder <code>~/.live-packs/jr0cket-pack/config/ox-reveal.el</code></p>
<p>Then I edited my live-pack <code>init.el</code> file to load org-reveal at Emacs start-up</p>
<pre><code>emacs ~<span class="regexp">/.live-packs/jr</span>0cket-pack/init.el
</code></pre><p>Add a line to call the org-reveal script download from Github, with a path relative to the config folder of the live-pack</p>
<pre><code><span class="list">(<span class="keyword">live-load-config-file</span> <span class="string">"ox-reveal.el"</span>)</span>
</code></pre><h2 id="Location_of_Reveal-js">Location of Reveal.js</h2><p>If you are publishing your presentation on the web then you should include a copy of the css, js and plugin folders from the Reveal.js project.</p>
<p>My current approach is to fork the Reveal.js project on Github (so I can keep track of updates) and create my presentations inside the reveal.js folder created when I cloned the my fork from github. </p>
<pre><code>;; Fork reveal.js project <span class="function_start"><span class="keyword">on</span></span> Github
;; Copy <span class="keyword">the</span> URL <span class="keyword">from</span> <span class="keyword">my</span> forked repo

git clone git@github.com:jr0cket/reveal.js.git
cd reveal.js
emacs <span class="keyword">my</span>-presentation.org
</code></pre><p>I then set the org reveal root to be relative to my presentation.  In this case my generated HTML presentation will look for css, js and plugin folders in the same parent folder as my presentation (reveal.js).  In my live-pack init.el file I add the following to set the reveal root to be relative.</p>
<pre><code><span class="list">(<span class="keyword">setq</span> org-reveal-root <span class="string">""</span>)</span>
</code></pre><blockquote>
<p>If you don’t set this variable to any value (empty string is considered a value here), then the stylesheet and JavaScript includes in your generated presentation will look for CSS and JavaScript resources in a folder called <code>./reveal.js</code>.</p>
</blockquote>
<p>Alternatively, you can set the location of Reveal.js to a specific file location.  The location should be the full path to top level of the Reveal.js folder, this is also defined in my live-pack init.el file</p>
<pre><code><span class="list">(<span class="keyword">setq</span> org-reveal-root <span class="string">"file:///var/www/revealjs/current"</span>)</span>
</code></pre><p>If you set a global path then this is the path that will appear in your CSS and JavaScript includes in the generated HTML file.</p>
<h1 id="Writing_presentations_with_Emacs_and_Org-mod">Writing presentations with Emacs and Org-mod</h1><p>Create a file for your presentation with a .org extension. </p>
<blockquote>
<p>You can create a new file in Emacs just by opening a file with a new filename.</p>
</blockquote>
<pre><code><span class="keyword">C</span>-x <span class="keyword">C</span> f my-presentation.org
</code></pre><p>In your new file you define slide titles using the <code>*</code> notation.  One <code>*</code> for the slide heading (level 1 heading) and two <code>*</code>‘s for slide bullet points (level 2 heading). </p>
<p>You can put anything you want under the slide heading and you dont have to use bullet points :). </p>
<h1 id="Generating_your_Reveal-js_presentation">Generating your Reveal.js presentation</h1><p>Once you have your presentation written you can generate the presentation with the command</p>
<pre><code>M-x org-reveal-<span class="keyword">export</span>-<span class="keyword">to</span>-html
</code></pre><p>This command creates a single <code>.html</code> file that contains the generated presentation, except for any images you have used.  The <code>.html</code> file will be have the same name as your org-mode file, so if you created your content in <code>my-presentation.org</code> then you will generate <code>my-presentation.html</code></p>
<p>If your links and images are all correctly referenced in your presentation, then simply opening <code>my-presentation.html</code> file in a browser will show you the end result.</p>
<h1 id="Summary">Summary</h1><p>You have seen how to set up Emacs, Org-reveal and Reveal.js so you can create great presentation without having to code in HTML.  The next article in the series will cover <a href="http://blog.jr0cket.co.uk/2013/09/create-html5-presentations-emacs-revealjs.html" target="_blank" rel="external">how to write presentations with Emacs and Org-mode</a> to make use of all the graphics options in Reveal.js, whilst keeping your content as simple text.</p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="http://1.bp.blogspot.com/-PLeobToC6lc/TzFJCfBSLPI/AAAAAAAAEbE/zSx1cOgHzZE/s1600/emacs128x128icon.png" class="img-thumbnail">
<p>Creating presentations with <a href="http://www.gnu.org/software/emacs/"><strong>Emacs</strong></a> is quick and more collaborative than with other tools I have used.  Using Emacs <a href="http://orgmode.org/"><strong>Org-mode</strong></a> you can easily structure and navigate your content.  Using  <a href="https://github.com/yjwen/org-reveal">Org-Reveal</a> you can generate a great looking HTML5 presentation using <a href="https://github.com/hakimel/reveal.js/"><strong>Reveal.js</strong></a> from your org-mode content.</p>
<p>I’ll show you how to configure Emacs, <a href="https://github.com/yjwen/org-reveal">Org-Reveal</a> and Reveal.js so you can create content in plain text and generate a themed, animated slide-deck that supports <a href="http://softwaremaniacs.org/soft/highlight/en/">syntax highlighting</a> for lots of languages.  As your content is in plan text its easy to collaborate around it with Github.</p>]]>
    
    </summary>
    
      <category term="emacs" scheme="http://jr0cket.co.uk/tags/emacs/"/>
    
      <category term="revealjs" scheme="http://jr0cket.co.uk/tags/revealjs/"/>
    
      <category term="presenting" scheme="http://jr0cket.co.uk/categories/presenting/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hackference Aftermath - Hacking the Weekend for Fun & Prizes]]></title>
    <link href="http://jr0cket.co.uk/2013/09/hackference-aftermath-hacking-weekend.html.html"/>
    <id>http://jr0cket.co.uk/2013/09/hackference-aftermath-hacking-weekend.html.html</id>
    <published>2013-09-25T01:03:00.000Z</published>
    <updated>2015-03-18T15:08:46.208Z</updated>
    <content type="html"><![CDATA[<img src="http://2013.hackference.co.uk/img/hackference_logo.png" class="img-thumbnail">
<p>I’ve added a new work to my vocabulary: <strong>Hacklag</strong>.  Hackference Birmingham left me totally exhausted and yet once I had recovered I was highly motivated to try the things I had experienced there.  So I am sharing my experiences from the weekend hackathon of fun, discovery and glorious food.</p>
<blockquote>
<p>Previously I <a href="http://jr0cket.co.uk/2013/09/hackference-aftermath-amazing-polyglot.html" target="_blank" rel="external">shared my experiences of the Hackference polyglot conference</a>, detailing what I learnt from the great talks there.</p>
</blockquote>
<a id="more"></a>
<h1 id="The_Hackathon_weekend">The Hackathon weekend</h1><img src="http://bean2bed.com/skin/frontend/default/bean/images/slide/4.jpg" class="img-thumbnail">
<p>The venue at Boxxed had a great open space that encouraged people to collaborate and provide an open and friendly workspace.  There was plenty of table space, huge bean bags that turned into beds and sofas to lounge in, not that many of us took the time to lounge until the early hours of Sunday morning!</p>
<p>We started Saturday with some overviews of API’s and developer tools from the sponsors of the Hackathon, including <a href="http://pusher.com/" target="_blank" rel="external">Pusher</a>, <a href="http://www.heroku.com/" target="_blank" rel="external">Heroku</a>, <a href="https://www.twilio.com/" target="_blank" rel="external">Twillio</a>, PayPal, Paymill, CloudFoundry and a few others.  Each sponsor also described what prizes they had on offer.  With a trip to their offices in Berlin, <a href="https://soundcloud.com/" target="_blank" rel="external">SoundCloud</a> had arguably the best prize on offer.</p>
<h1 id="Food_glorious_food">Food glorious food</h1><img src="http://1.bp.blogspot.com/-ph9Hh_m30S0/UkIcY1ioJWI/AAAAAAAALo4/0OGMV8JqrM8/s1600/20130901_122932.jpg" class="img-topic"> 
<p>During the day there was delicious food on offer and plenty for everyone.  A good job as I didn’t get round to eating anything on conference day, unless you count a pint of Guinness as food :)  I really enjoyed the curry of the Saturday evening and I also had a few cups of curry to keep me going through the night as there was a bit left over. </p>
<h1 id="Friendly,_collaborative_developer_crowd">Friendly, collaborative developer crowd</h1><p>I met lots of great people at the event and I think I spoke to everyone there, it was a very friendly event.  Some of the developers were quite experienced and some were relatively new and some were quite young and will become the future of our developer communities.  Everyone got involved and seemed to have learnt a lot over the weekend.</p>
<h1 id="My_favourite_hacks_from_the_event">My favourite hacks from the event</h1><img src="http://2.bp.blogspot.com/-D5BN3ESCXNA/UkIf2EzBQ1I/AAAAAAAALq8/HwZZJdXtU0I/s1600/20130831_164207.jpg" class="img-code"> 
<p>There were some great ideas on the go during the hackathon, some that were perhaps a little too ambitious but great to see anyway.  There were over 20 hacks on show at the end and as Mike asked me to be one of the judges, it was a challenge to choose the most deserving hacks after everyone had put so much effort into them.</p>
<p>This is a top 5 of my own favourites from the hack, not the actual winners (although there is some crossover).</p>
<h2 id="5_-_HackSocNotts">5 - HackSocNotts</h2><p>I’ve met the team from HackSocNotts at a few hackathons now and they are a really enthusiastic and creative bunch.  This time they were building a visual hack that would be a light-show at this years freshers fair, demonstrating how much fun you can have if you join in.</p>
<p>The team assembled a strip of 32 LEDs all wired up to an <a href="http://www.arduino.cc/" target="_blank" rel="external">Arduino</a> board and controlled by a Raspberry Pi.  The aim was to allow anyone to set up a pattern with the lights via a simple website, making it very interactive.  The hack consisted of two node programs communicating over web-sockets, firing codes into the register of the strip.  The website was a simple Twitter bootstrap affair.  The biggest technical challenge was working with node and the LED hardware, but eventually they got it working some time in the middle of the night.</p>
<h2 id="4_-_Uber_hack">4 - Uber hack</h2><img src="http://blog.uber.com/wp-content/uploads/2011/12/New-Logo-Vertical-Dark.jpg" class="img-topic">
<p>Uber is a taxi ordering service which you can use from your mobile phone.  You can see where the available cars are in your area.  What the Uber team managed to do is reverse engineer the Uber API so they could track their fleet of cars from anywhere in the world.  By entering a location in their web app, the Uber cars were shown on a Google map.  It was a great app and a very slick presentation, very surprising since the team consisted of a 19 year old and a 16 year old.</p>
<h2 id="3_-_Code_Tennis">3 - Code Tennis</h2><p>Created by <a href="https://twitter.com/teabass" target="_blank" rel="external">Andrew Nesbitt</a>, <a href="http://code-tennis.herokuapp.com/" target="_blank" rel="external">Code tennis</a> is a fun way to improve your skills with Git, especially when it comes to working with Git as a team.  In the game you can be as Machiavellian as you like, thinking of commits that will actively cause your opponent more of a challenge when merging your commits to their local repository and pushing those commits to the shared Github repository.</p>
<img src="http://3.bp.blogspot.com/-dM2mTiykXzA/UkIWKc_eVyI/AAAAAAAALks/vZBSA1YB-jY/s1600/code-tennis.png" class="img-code">
<p>The game involves each developer taking it in turns to push code to a shared repository on Github.  A <code>git push</code> flips the access to the Github repository to the other player, so you have to take it in turns.</p>
<p>However, whist waiting for your turn to push you can make local commits.  Deciding on what to commit and how much of a challenge you can make for your opponent will help you understand how much you really know about the power of Git.</p>
<p>All changes pushed to the shared Github repository get automatically published onto Github pages.</p>
<p>The name “Code Tennis” comes from the gamification of image creation by graphic designers.  They play Layer Tennis where each graphic designer takes it in turn to create a graphic on one layer of an image.  Each turn adds another layer to the image by those playing the game to get an interesting mix of styles and very different end results.</p>
<p>As with graphic designers, playing code tennis get helps you discover different ways of using Git repositories in a fun way.  Hopefully you will use these new skills for the benefit of your team :)</p>
<h1 id="2_-_Distributed_speakers">2 - Distributed speakers</h1><img src="http://www.iainclaridge.co.uk/blog/wp-content/uploads/munny_speakers.jpg" class="img-thumbnail"> 
<p>Using Twillio, <a href="http://sydlawrence.com/" target="_blank" rel="external">Syd Lawrence</a> set up a simple website that that streamed sound to any mobile that called a particular telephone number.  Syd got a whole bunch of use to call the number and within a few seconds we had all become a distributed speaker system, blasting out Rick Askley!</p>
<p>It was a simple idea that made good use of an API to get the hack done.  It also reminded me of fun things done by seb.ly with graphics and audience interaction.</p>
<p>As Syd was also judging then we couldn’t give him a prize (he wouldn’t accept one anyway).  I hope that if he takes it forward then it is used for other songs that Rick Askley</p>
<h1 id="1_-_Super_pirate_battleships">1 - Super pirate battleships</h1><p>This was an amazing hack.  The team built a fully working game that looked really good and worked very well, they also made the game environment dynamic.  Their game pulled a music track from SoundCloud and as it played the track was analysed and the pattern of the soundwave was used to determine where obstacles and power-ups should be placed during game-play.</p>
<div class="video-container"><iframe src="//www.youtube.com/embed/6rJqpdJffac" frameborder="0" allowfullscreen></iframe></div>
<p>Top prize winner: Super Pirate Battleships video cortesy of <a href="https://twitter.com/J0lley" target="_blank" rel="external">Mark Jolley</a>)</p>
<h1 id="In_Summary">In Summary</h1><p>There were lots of really great hacks I havent mentioned and so would just like to thank everyone for there hacks and making it a really entertaining and enlightening weekend.</p>
<p>You can see more of the hacks by looking at some of the <a href="http://www.youtube.com/playlist?list=PLsTreukqJm95hm0VQD4QWITpFKISaX_l_" target="_blank" rel="external">videos from Mark Jolley</a> of the hack showcase, or visiting the <a href="https://www.hackerleague.org/hackathons/hackference/hacks" target="_blank" rel="external">Hackference page on Hacker league</a>.  If you are not at work and feeling brave you can even check out <a href="https://www.dropbox.com/s/obbsb367qorijw0/syd-twerkin.mov" target="_blank" rel="external">Syd Lawrences’ twerking Video</a> or the great photos from <a href="http://www.flickr.com/photos/andypiper/with/9628126743/" target="_blank" rel="external">Andy Piper</a> and <a href="https://plus.google.com/u/0/photos/117080433375668558463/albums/5927331270432594721" target="_blank" rel="external">myself</a>.</p>
<p>I really hope Mike runs Hackference Birmingham again as I had such a great time.  Hopefully he will get more volunteers to help him next time as he did a huge amount of work to make this all happen.  Thanks Mike, you did a fantastic job.</p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="http://2013.hackference.co.uk/img/hackference_logo.png" class="img-thumbnail">
<p>I’ve added a new work to my vocabulary: <strong>Hacklag</strong>.  Hackference Birmingham left me totally exhausted and yet once I had recovered I was highly motivated to try the things I had experienced there.  So I am sharing my experiences from the weekend hackathon of fun, discovery and glorious food.</p>
<blockquote>
<p>Previously I <a href="http://jr0cket.co.uk/2013/09/hackference-aftermath-amazing-polyglot.html">shared my experiences of the Hackference polyglot conference</a>, detailing what I learnt from the great talks there.</p>
</blockquote>]]>
    
    </summary>
    
      <category term="events" scheme="http://jr0cket.co.uk/categories/events/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hackference Aftermath - Amazing Polyglot Conference]]></title>
    <link href="http://jr0cket.co.uk/2013/09/hackference-aftermath-amazing-polyglot.html.html"/>
    <id>http://jr0cket.co.uk/2013/09/hackference-aftermath-amazing-polyglot.html.html</id>
    <published>2013-09-17T09:36:00.000Z</published>
    <updated>2015-03-18T15:08:46.208Z</updated>
    <content type="html"><![CDATA[<img src="http://2013.hackference.co.uk/img/hackference_logo.png" class="img-thumbnail">
<p><a href="http://hackference.co.uk/" target="_blank" rel="external">Hackference</a> Birmingham was the first event I had been to that was both a conference and a hackathon.  Both parts excelled my expectations.  Its also the first big event I’ve been to in Birmingham outside the national exhibition centre (NEC) and the developers in Birmingham made me feel very welcome. </p>
<p>This is a reflection of what happened at the conference part of <a href="http://hackference.co.uk/" target="_blank" rel="external">Hackference Birmingham</a>.</p>
<a id="more"></a>
<h1 id="The_Speaker_line_up">The Speaker line up</h1><p>I described this as a polyglot developer conference as there were great talks from developers with backgrounds in PHP, Clojure, Javascript, Node, Java and Ruby.  There are many things that are common between languages, like good design, so its great to see ideas from such a broad spectrum.</p>
<blockquote>
<p>I may have taken some poetic license with my description of these talks.  This represents my interpretation of those talks and not necessarily what the speakers were actually saying!  Hopefully its close enough…</p>
</blockquote>
<h1 id="Why_don’t_you_go_out_and_do_something_less_boring_instead?">Why don’t you go out and do something less boring instead?</h1><p>The opening talk by <a href="http://sydlawrence.com/" target="_blank" rel="external">Syd Lawrence</a> was very inspiring and a great way to wake up sleepy developers.  Syd encouraged us to <em>stop watching Coronation Street and try tech stuff out instead</em>.  Its easier than you think and there are lots of API’s, tools and frameworks that make it even easier.  (the amount of hardware hacking in hackthons demonstrates how easy it is to get something working).</p>
<p>Its easy to make excuses not to try something new but every day it is getting easier and easier to try things out.  Over the last decade software development has truly become soft and malleable, so code is easy to change and using tools like Git its easy to change that code without hanging yourself.</p>
<p>In the last few years the same level of tinkering and malleability also applies to hardware.  With arduino &amp; raspberry pi kits along with tonnes of components its easy to build something with hardware and then pull it apart and build something else.  Electronics is after all a lego box of components for you to experiment with.</p>
<p>This encouragement from Syd reminded me of the BBC children’s TV show from the past, <a href="http://en.wikipedia.org/wiki/Why_Don" target="_blank" rel="external">Why dont you?</a> which inspired me to go out and do fun stuff when I was so much younger.  Now I am older, why shouldnt I have just as much fun :)</p>
<h1 id="API_Design_-_Give_developers_some_love!">API Design - Give developers some love!</h1><p><a href="http://www.lornajane.net/" target="_blank" rel="external">Lorna Jane Mitchell</a> gave a run down of the do’s and don’t of API design. Having developed a number of API’s herself you could hear the experience dripping from her words.</p>
<p>I cant do justice to her talk so I suggest you take a look at some of the quotes I pulled from her talk and if you like what you read then go and <a href="http://shop.oreilly.com/product/0636920028291.do?cmp=af-code-book-product_cj_9781449365080_7049572" target="_blank" rel="external">buy her book</a>… you wont regret it.</p>
<ul>
<li>HTTP has status codes, so use them to understand what is going on</li>
<li>Content should be determined by header content type rather than URLs</li>
<li>SOAP is great for Java/C# devs as they have a button that generates a SOAP service, hainving to  type a lot of XML is not nice</li>
<li>REST is great but has “enthusiasts” that tell you your REST is wrong.  Taking a pragmatic approach to REST is better rather than trying to reach for perfection</li>
<li>Build a heartbeat into your API, this provides a simple self help mechanism to check API is being used correctly by developers</li>
<li>Consistence in experience will make a big difference when devs are choosing to use your API.  If your API is too erratic or unstable then you will loose your community. </li>
<li>Cache GET requests to help scale when you become popular.  Your API can use same principles as when caching static assets</li>
<li>Handling errors is a measure of how good your API is perceived developers</li>
<li>Tokens are so much nicer to use than a username/password combo for access control. OAuth2 is really nice to use now.</li>
</ul>
<p>To me, the main point that Lonra Jane was getting across is that API designers need to engage with the community of developers to gain adoption and have a successful API.</p>
<h1 id="Getting_Git_and_Github">Getting Git and Github</h1><p>Yours truly gave an impromptu talk about Git and Github, providing the audience a whole heap of tips and tricks to get the most out of these distributed version control tools.  For those just trying out Git for the first time, I created a <a href="http://jr0cket.github.io/developer-guides/git-quickstart-guide.png" target="_blank" rel="external"><strong>Git quickstart guide</strong></a>.</p>
<p>I also created a visual guide to Git and Github workflows:</p>
<img src="http://jr0cket.github.io/developer-guides/git-and-github-workflow.png" class="img-code">
<p>The tips I shared included:</p>
<ul>
<li><p>using <code>git add</code> to help you be more selective in what you are committing without having to learn how to cherry pick</p>
</li>
<li><p>using <code>git stash</code> to keep your work when you fall behind a shared remote (which I am sure we never do, right)</p>
</li>
<li><p>configuring <code>git log</code> to be more valuable by showing a graph with repos, branches and tags (see my <a href="https://github.com/jr0cket/dot-files-ubuntu/blob/master/.gitconfig" target="_blank" rel="external">.gitconfig file</a> for examples of aliases used for git log and other useful short cuts)</p>
</li>
</ul>
<p>I also talked about the workflow around Git and Github and encouraged people to keep it simple.  You can always add more to your workflow when needed, but jumping straight into something as involved as git flow may not give you the best experience.  When you are comfortable with git and are working on team projects, then take a look at Git flow and see if its for you.  There is <a href="http://jeffkreeftmeijer.com/2010/why-arent-you-using-git-flow/" target="_blank" rel="external">a good overview of Git flow by Jeff Kreeftmeijer</a>.</p>
<h1 id="Boosting_your_JavaScript_projects_with_Yeoman,_Bower_and_Grunt">Boosting your JavaScript projects with Yeoman, Bower and Grunt</h1><p>The ease in which a decent sized JavaScript project was created as part of the live demo in this talk by <a href="http://hackference.co.uk/speakers#martyn-davies" target="_blank" rel="external">Martyn Davies</a> has put this tool combo (<a href="http://yeoman.io/" target="_blank" rel="external">Yeoman, Bower and Grunt</a>) high on my list of new shiny things to try.  I had know about Yoman for a while although hadnt found the excuse to use it.  Now seeing all three tools working together (and me being a command line junkie) I will be using it for my <a href="http://www.heroku.com/" target="_blank" rel="external">Heroku</a> demos.  These tools give me a great way to go from scratch to continuous deployment of a live on the web app in less than 30 minutes</p>
<p>I can see Yoman, Bower and Grunt driving most if not all of my JavaScript app development, especially for <a href="http://angularjs.org/" target="_blank" rel="external">AngularJS</a>.</p>
<h1 id="All_the_other_great_talks">All the other great talks</h1><p>I didn’t see everyone’s talk as I got into some great discussions with some of the speakers and developers attending the event.</p>
<p>I did managed to catch the <a href="http://clojure.org/" target="_blank" rel="external">Clojure</a> talk given by <a href="http://2013.hackference.co.uk/speakers#joe-littlejohn" target="_blank" rel="external">Joe Littlejohn</a> and <a href="http://2013.hackference.co.uk/speakers#mark-godfrey" target="_blank" rel="external">Mark Godfrey</a>, speaking on how beautiful and powerful the <a href="http://clojure.org/" target="_blank" rel="external">Clojure language</a> is.  Its hard to sum it up in 30 minutes and even harder to share the experience without getting the audience to try the language out.  The guys did a good job to get the assembled developers interested.  If you want to know if Clojure is for you, then you can check out my eBook <a href="http://developerpress.com/en/clojure-made-simple-introduction-clojure" target="_blank" rel="external">Clojure Made Simple</a>.</p>
<p>I talked to several other developers who were looking at Clojure too and I gave them ideas on <a href="http://jr0cket.co.uk/clojure" target="_blank" rel="external">how to work with Clojure</a>.  I also helped out a few people with Clojure during the hackathon weekend.</p>
<h1 id="In_Summary">In Summary</h1><p>Overall this was a great event and I came away felling I learnt a lot more from this conference because of the diversity than I did from very focused conferences like jQuery UK.</p>
<p>In my next article about Hackference Birmingham I’ll <a href="http://jr0cket.co.uk/2013/09/25/hackference-aftermath-hacking-weekend.html/" target="_blank" rel="external">share my experiences of the Hackathon part of Hackference</a> and tell you about a word I have added to my vocabulary: “Hacklag”.</p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="http://2013.hackference.co.uk/img/hackference_logo.png" class="img-thumbnail">
<p><a href="http://hackference.co.uk/">Hackference</a> Birmingham was the first event I had been to that was both a conference and a hackathon.  Both parts excelled my expectations.  Its also the first big event I’ve been to in Birmingham outside the national exhibition centre (NEC) and the developers in Birmingham made me feel very welcome. </p>
<p>This is a reflection of what happened at the conference part of <a href="http://hackference.co.uk/">Hackference Birmingham</a>.</p>]]>
    
    </summary>
    
      <category term="events" scheme="http://jr0cket.co.uk/categories/events/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Sublime Text on Ubuntu]]></title>
    <link href="http://jr0cket.co.uk/2013/09/sublime-text-on-ubuntu.html.html"/>
    <id>http://jr0cket.co.uk/2013/09/sublime-text-on-ubuntu.html.html</id>
    <published>2013-09-03T11:32:00.000Z</published>
    <updated>2015-03-18T15:08:46.212Z</updated>
    <content type="html"><![CDATA[<img src="http://4.bp.blogspot.com/-zZtRA_8X4Xg/UiXECID9V5I/AAAAAAAAK9s/ucg-FQrgWso/s1600/sublime-text-screenshot.png" class="img-thumbnail">
<p><a href="http://www.sublimetext.com/" target="_blank" rel="external">Sublime Text</a>&nbsp;is a really popular text editor will great language support and a lot of plugin features that are geared towards software developers.</p>
<p>Although I’m usually in Emacs, lots of people have asked me how best to set Sublime Text on Ubuntu, so here is my prefered method.</p>
<a id="more"></a>
<h2 id="Download_Sublime_Text">Download Sublime Text</h2><p>As Sublime is not part of the Ubuntu package management system (apt-get), it requires a manual download and install. &nbsp;Download the latest version from the <a href="http://www.sublimetext.com/" target="_blank" rel="external">Sublime Text front page</a> (it should give you a button specific to the OS you are currently using, i.e. Ubuntu). </p>
<p>The download will be an archive file like zip but using the Unix commands tar and bzip2.</p>
<h2 id="Extract_the_Sublime_Text_archive">Extract the Sublime Text archive</h2><p>You can extract the whole archive by right-clicking on the file in the file browser (nautilus) and selecting <em>Extract here</em></p>
<blockquote>
<p>You can also double clicking and selecting the Extract button when the archive manager app opens or use the following command in a terminal: tar jvxf “Sublime Text 2.0.2 x64.tar.bz2”</p>
</blockquote>
<h2 id="Install_Sublime_Text_in_/opt">Install Sublime Text in /opt</h2><p>I usually place 3rd party software in the folder <code>/opt</code> although you could use <code>/usr/local</code>.</p>
<blockquote>
<p>You just create an apps folder in your own home directory if you use only one login account with Ubuntu.</p>
</blockquote>
<p>Create a &nbsp;folder to contain the Sublime Text app using the following command in a terminal: </p>
<pre><code>sudo <span class="built_in">mkdir</span> /<span class="keyword">opt</span>/sublime
</code></pre><blockquote>
<p>I am assuming that we will download new versions occasionally and have other apps installed in /opt.</p>
</blockquote>
<p>Move the folder and all its contents extracted from the sublime text archive file:</p>
<pre><code>sudo mv ~<span class="regexp">/Downloads/</span><span class="constant">Sublime\</span> <span class="constant">Text\</span> <span class="number">2</span> &amp;nbsp;<span class="regexp">/opt/sublime</span>
</code></pre><p>Create a symbolic link called <code>current</code> that points to the folder you have just moved. </p>
<pre><code>ln -s <span class="regexp">/opt/</span>sublime<span class="regexp">/Sublime\ Text\ 2 &amp;nbsp;/</span>opt<span class="regexp">/sublime/</span>current
</code></pre><blockquote>
<p>If you do upgrade the version of Sublime, simply download the new version and extract it into the /opt/sublime folder, then just delete the symbolic link and create a new one to point to the new folder.</p>
</blockquote>
<h2 id="Add_Sublime_Text_to_path_to_run_it_from_anywhere">Add Sublime Text to path to run it from anywhere</h2><p>Rather than add the sublime folder to the path and making it messy, I create a little bash script that simply calls sublime. &nbsp;Create a new file by launching an editor, use <span style="font-family: Courier New, Courier, monospace;">gksudo</span> if you are launching a graphical editor as the file will be created in the protected part of the file system:</p>
<pre><code>gksudo gedit <span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>sublime
</code></pre><p>Add the following script to this file that will change to the folder where the sublime binaries live and then run its usual starup script. &nbsp;The <code>$*</code> ensures that any parameters such as file names you pass to the script are passed on to the sublime start-up script.</p>
<pre><code><span class="shebang">#!/bin/sh</span>
<span class="built_in">cd</span> /opt/sublime/current
./sublime_text $* &amp;
</code></pre><p>Save the file and close the editor.  You have make a new script called sublime on the executable path. &nbsp;However, we still need to give this new script permission to be executed.</p>
<p>Use the following command in a terminal window to make the bash script file executable for every user:</p>
<pre><code>sudo chmod a+x <span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>sublime
</code></pre><p>You can now call sublime from anywhere and even call it with a file name or path/file name arguments.</p>
<p>Enjoy Sublime text and if you find its not for you there is always Emacs :)</p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="http://4.bp.blogspot.com/-zZtRA_8X4Xg/UiXECID9V5I/AAAAAAAAK9s/ucg-FQrgWso/s1600/sublime-text-screenshot.png" class="img-thumbnail">
<p><a href="http://www.sublimetext.com/">Sublime Text</a>&nbsp;is a really popular text editor will great language support and a lot of plugin features that are geared towards software developers.</p>
<p>Although I’m usually in Emacs, lots of people have asked me how best to set Sublime Text on Ubuntu, so here is my prefered method.</p>]]>
    
    </summary>
    
      <category term="sublimetext" scheme="http://jr0cket.co.uk/tags/sublimetext/"/>
    
      <category term="ubuntu" scheme="http://jr0cket.co.uk/tags/ubuntu/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hey Prezto - Zsh for Command Line Heaven]]></title>
    <link href="http://jr0cket.co.uk/2013/09/hey-prezto-zsh-for-command-line-heaven.html"/>
    <id>http://jr0cket.co.uk/2013/09/hey-prezto-zsh-for-command-line-heaven.html</id>
    <published>2013-09-02T15:11:00.000Z</published>
    <updated>2015-03-18T15:08:46.208Z</updated>
    <content type="html"><![CDATA[<img src="http://3.bp.blogspot.com/-OCKvFRcGPLk/UTUY7NXSS6I/AAAAAAAAJI0/RJT6XMB05I4/s1600/Zshell-silver-rotating.gif" class="img-thumbnail">
<p>Using the command line is a powerful and quick way of doing many developer tasks.  The <a href="http://en.wikipedia.org/wiki/Shell_(computing" target="_blank" rel="external">command line shell</a>) for Linux &amp; MacOSX is a whole world apart from the very basic experience of DOS. Zsh (Z Shell) makes the Linux &amp; MacOSX shell experience even better.</p>
<p>I learnt to use the command line with bash, the default Linux shell.  Although as soon as you play with zsh for a few minutes, you quickly get hooked.  zsh gives you <a href="http://www.acm.uiuc.edu/workshops/zsh/why.html" target="_blank" rel="external">lots of features</a>, including:</p>
<ul>
<li>auto-completion on steroids</li>
<li>command relative completions</li>
<li>navigable completions list</li>
<li>amazingly fast completions</li>
<li>auto corrections for when your fingers slip</li>
<li>custom prompts, a right hand prompt and themes</li>
<li>shared history over all terminals</li>
<li>history sub-string search</li>
</ul>
<p>You can add libraries to bash and configure it to do these things as well, although I havent seen an projects to help you quickly do so.</p>
<p>Still not convinced, then take a look at Brendan Rapps presentation “<a href="http://www.slideshare.net/jaguardesignstudio/why-zsh-is-cooler-than-your-shell-16194692" target="_blank" rel="external">Why Zsh is cooler than your shell</a>“</p>
<h1 id="Get_going_with_Zsh">Get going with Zsh</h1><p>You can just install zsh and configure it yourself.  On the Mac, Zsh is installed by default.  On Ubuntu its available in the software center or via the command line:</p>
<pre><code>sudo apt-<span class="keyword">get</span> install zsh
</code></pre><p>Configuring Zsh yourself would take a bit of discovery, so I prefer to use something a bit more out of the box.  Luckily there are two projects to choose from that configure everything for you.</p>
<h1 id="oh-my-zsh"><a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="external">oh-my-zsh</a></h1><p>This is a popular project that provides an out of the box zsh setup and its really easy to use.  However, something is making it a little slow when I tried it on the MacBook Pro and Linux.  Comments around this project suggest its written in more of a bash way than zsh, so that may be the reason for a performance slow down.</p>
<p>After a few days I decided to remove oh-my-zsh and try an alternative project.</p>
<h1 id="Prezto"><a href="https://github.com/sorin-ionescu/prezto" target="_blank" rel="external">Prezto</a></h1><p>Prezto has been rewritten by the author who wanted to achieve a good zsh setup by ensuring all the scripts are making use of zsh syntax.  It has a few more steps to install but should only take a few minutes extra.</p>
<h2 id="Installing_Prezto">Installing Prezto</h2><p>In the root of your home account, clone the prezto github project using any git client.</p>
<pre><code><span class="title">git</span> clone --recursive <span class="url">https://github.com/sorin-ionescu/prezto.git</span> <span class="string">"<span class="variable">${ZDOTDIR:-$HOME}</span>/.zprezto"</span>
</code></pre><blockquote>
<p>If you don’t have a Git client either download it from the <a href="http://git-scm.com/" target="_blank" rel="external">git-scm website</a> or use the Ubuntu package manager to install the package called git (<code>sudo apt-get install git</code>).</p>
</blockquote>
<p>All prezto files are contained within a foloder called <code>.zprestorc</code> in the root of your home folder.  In order to use Prezto configuration for zsh, symlinks are used.</p>
<blockquote>
<p>The project gives you a script to run although this didn’t work for me and I just created the symlinks manually.</p>
</blockquote>
<h2 id="Create_the_symlinks_manually">Create the symlinks manually</h2><p>In the root of your home folder, create the sym-links using the Unix symbolic link command as follows:</p>
<pre><code>ln -s ~<span class="regexp">/.zprezto/runcoms</span><span class="regexp">/zlogin ~/</span>.zlogin
ln -s ~<span class="regexp">/.zprezto/runcoms</span><span class="regexp">/zlogout ~/</span>.zlogout
ln -s ~<span class="regexp">/.zprezto/runcoms</span><span class="regexp">/zpreztorc ~/</span>.zpreztorc
ln -s ~<span class="regexp">/.zprezto/runcoms</span><span class="regexp">/zprofile ~/</span>.zprofile
ln -s ~<span class="regexp">/.zprezto/runcoms</span><span class="regexp">/zshenv ~/</span>.zshenv
ln -s ~<span class="regexp">/.zprezto/runcoms</span><span class="regexp">/zshrc ~/</span>.zshrc
</code></pre><p>Check that the links have all been created successfully.  Type the command ls -la and you should see the following in your terminal (although possibly without colour)</p>
<img src="http://3.bp.blogspot.com/-mdwsHb5FkGg/UiSqw8hI1mI/AAAAAAAAK7I/TYPgGmWWuBA/s1600/zsh-symlinks.png" class="img-code">
<p>zprezto uses a series of symlinks to configure zsh with lots of nice defaults</p>
<blockquote>
<p>I have been thinking of changing the use of sym-links and just have the specific files include the Prezto files first, then add any customisations required.  This would help to keep my changes in place when I updated Prezto.</p>
</blockquote>
<h1 id="Run_zsh">Run zsh</h1><p>Now you have zsh configured with prezto, its time to try it out.  Open a terminal window and run zsh using the command:</p>
<pre><code>zsh
</code></pre><p>Set zsh as the default shell</p>
<p>To set zsh as our default shell then run the change shell (chsh) command:</p>
<pre><code>chsh <span class="operator">-s</span> /usr/bin/zsh
</code></pre><p>On Ubuntu, this didn’t seem to work.  I also had to configure Gnome Terminal to run zsh as a custom command.</p>
<img src="http://4.bp.blogspot.com/-t5Pv8i_1gCI/UTUV_FUoinI/AAAAAAAAJIs/-zIeS__lNeo/s1600/terminal-zsh-custom-command.png" class="img-code">
<p>Now when I open a new terminal window or tab, the command line is running Zsh.</p>
<h1 id="Showing_Git_branch_by_switching_on_zsh_modules">Showing Git branch by switching on zsh modules</h1><p>Several of the prezto zsh modules are switched on by default, however Git is not one of them.  If you want to see the current branch you are working on in Git then add the git module to the zprezto configuration.</p>
<p>Edit the file <code>~/.zprezto</code></p>
<p>Find the section in the file that defined modules to load and add a line with the git module.  Here is what that section would look like once you have edited it.</p>
<pre><code><span class="comment"># Set the Prezto modules to load (browse modules).</span>
<span class="comment"># The order matters.</span>
zstyle <span class="string">':prezto:load'</span> pmodule <span class="string">\</span>
  <span class="string">'environment'</span> <span class="string">\</span>
  <span class="string">'terminal'</span> <span class="string">\</span>
  <span class="string">'editor'</span> <span class="string">\</span>
  <span class="string">'history'</span> <span class="string">\</span>
  <span class="string">'directory'</span> <span class="string">\</span>
  <span class="string">'spectrum'</span> <span class="string">\</span>
  <span class="string">'utility'</span> <span class="string">\</span>
  <span class="string">'completion'</span> <span class="string">\</span>
  <span class="string">'git'</span> <span class="string">\</span>
  <span class="string">'archive'</span> <span class="string">\</span>
  <span class="string">'prompt'</span>
</code></pre><h1 id="Creating_my_own_prezto_theme">Creating my own prezto theme</h1><p>The default sorin them is okay, but takes up a bit much room on the prompt than I like.</p>
<img src="http://3.bp.blogspot.com/-hi59uLe-cTE/UTUa41BodSI/AAAAAAAAJI8/ZoDa9OxOmvY/s1600/zpresto-default-theme.png" class="img-code">
<p>I created my own theme as a slight variation from the default sorin theme.  I removed &gt;&gt;&gt; characters used to separate the prompt from commands as they seemed largely unnecessary.  As I only use git then I didnt feel the need to specify the version control tool used (eg. git, mercurial).  Finally, I changed the colours round a little.</p>
<p>I kept the right hand prompt as part of my theme. Its a quick way to show the status of any changes in your local git repository.<br><img src="http://1.bp.blogspot.com/-Q7quGwje_w4/UTUoVbZZRmI/AAAAAAAAJJU/f4udzvNaOnM/s1600/zprezto-prompt-jr0cket-context-specific.png" class="img-code"></p>
<p>The prompt shows the current folder name, with any parent folders abbreviated to their initial.  The path up to and including the home folder is represented by <code>~</code>.</p>
<p>When you enter a folder managed by git, then the right hand prompt kicks in and shows icons representing the current git status.  Whilst in the folder you can see if you have changes that untracked, deleted or stage.  You can easily tell if you are behind or ahead of the default remote repository.  You can also see if you have some changes stashed away.</p>
<p>My zsh theme is available as part of my <a href="https://github.com/jr0cket/dot-files-ubuntu" target="_blank" rel="external">dot-files-ubuntu</a> or <a href="https://github.com/jr0cket/dot-files-macosx" target="_blank" rel="external">dot-files-macosx</a> repositories.</p>
<h1 id="Summary">Summary</h1><p>Whist <a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="external">oh-my-zsh</a> is really simple to use, the <a href="https://github.com/sorin-ionescu/prezto" target="_blank" rel="external">Prezto</a> project seems to have maintainters with greater experience of zsh.</p>
<p>On Ubuntu I am using prezto and although it is a bit more involved to understand at first, it runs really really fast.  The only thing I wanted to change with prezto was the theme, so not really that much to learn.</p>
<p>Everything that I was doing with oh-my-zsh seems to work in Prezto without adding in extra plugins to the Zsh configuration.</p>
<p>So although oh-my-zsh is a great project, I’d recommend using Prezto to have a great Zsh experience.  Take a look at my dotfiles on github (<a href="https://github.com/jr0cket/dot-files-ubuntu" target="_blank" rel="external">dot-files-ubuntu</a> or <a href="https://github.com/jr0cket/dot-files-macosx" target="_blank" rel="external">dot-files-macosx</a>) to see how I created a custom theme.</p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="http://3.bp.blogspot.com/-OCKvFRcGPLk/UTUY7NXSS6I/AAAAAAAAJI0/RJT6XMB05I4/s1600/Zshell-silver-rotating.gif" class="img-thumbnail">]]>
    </summary>
    
      <category term="zsh" scheme="http://jr0cket.co.uk/tags/zsh/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Add Colour to Your Clojure REPL With Leiningen and ASCII Codes]]></title>
    <link href="http://jr0cket.co.uk/2013/08/add-colour-to-your-clojure-repl-with.html.html"/>
    <id>http://jr0cket.co.uk/2013/08/add-colour-to-your-clojure-repl-with.html.html</id>
    <published>2013-08-30T08:18:00.000Z</published>
    <updated>2015-03-18T15:08:46.204Z</updated>
    <content type="html"><![CDATA[<img src="http://4.bp.blogspot.com/-pc_s02W-R9w/TzFLaS-sQcI/AAAAAAAAEbU/xWhovBljYE8/s1600/clojure-logo-with-name.png" class="img-topic"> 
<p>Sometimes its the little things that make a difference and after seeing how easily customise the Clojure REPL prompt with <a href="http://leiningen.org/" target="_blank" rel="external">Leiningen</a> I had a little hack with words, symbols and colours and came up with something nicer (in my opinion).</p>
<a id="more"></a>
<h1 id="The_standard_Clojure_REPL_with_Leiningen">The standard Clojure REPL with Leiningen</h1><p>The standard Clojure REPL prompt is practical, yet a little mundane to look at.  As we see in the screenshot it gives a clear indication of the namespace we are working in, but little else.  If you have other REPLs, run time environments or terminal sessions going then its all too easy to enter your code at the wrong prompt.</p>
<img src="http://2.bp.blogspot.com/-fn8ros3ocTY/UiBGuI35T-I/AAAAAAAAK6Y/eM_FIKKJ3Qc/s1600/clojure-repl-standard-prompt-and-welcome.png" class="img-code"> 
<h1 id="My_design_for_a_colourful_Clojure_REPL">My design for a colourful Clojure REPL</h1><p>To make it clear that we are in a Clojure REPL I changed the colour of the namespace to blue, wrapped with green brackets (blue and green are the colours in the Clojure logo).  I also change the symbol used in the font to be the  <code>cλ</code> symbol.  I use the combination of c-lambda to denote this is the Clojure implementation of a Lamdba oriented language (is that such a thing or did I just make that up?).  This c-lambda symbol is the same I use to <a href="http://jr0cket.co.uk/2013/01/tweeking-emacs-modeline-for-clojure.html" target="_blank" rel="external">denote Clojure-mode and nrepl-mode in Emacs</a>.</p>
<img src="http://2.bp.blogspot.com/-m8g6eMFUuAM/UiBSzLOObHI/AAAAAAAAK64/hIUMUCXiGl4/s1600/clojure-repl-definition-and-emacs-mode-line-customisations.png" class="img-code"> 
<blockquote>
<p>See my article on <a href="http://jr0cket.co.uk/2013/01/tweeking-emacs-modeline-for-clojure.html" target="_blank" rel="external">Emacs mode line customisation</a> to create </p>
</blockquote>
<h1 id="Configuring_the_Clojure_REPL_prompt_with_Leinginen">Configuring the Clojure REPL prompt with Leinginen</h1><img src="http://1.bp.blogspot.com/-rxD8__T6tzA/TzFNNTKKLwI/AAAAAAAAEb8/k10iLxa3I70/s1600/leiningen-face.jpg" class="img-code">
<p>To configure your prompt you can edit the <code>project.clj</code> file in the root of a Clojure project and add the keyword <code>:repl-options</code> with a set containing your customisations.</p>
<p>Here is a very simple example that changes the welcome message you see when the REPL first starts, as well as changing the prompt to output a message followed by the current namespace:</p>
<pre><code><span class="attribute">:repl-options</span> <span class="collection">{

    <span class="comment">;; custom prompt</span>
    prompt <span class="list">(<span class="keyword"><span class="built_in">fn</span></span> <span class="collection">[ns]</span> <span class="list">(<span class="keyword"><span class="built_in">str</span></span> <span class="string">"You are hacking in "</span> ns <span class="string">"=&gt; "</span> )</span>)</span>

    <span class="comment">;; Welcome message when the repl session starts.</span>
    <span class="attribute">:welcome</span> <span class="list">(<span class="keyword">println</span> <span class="string">"Its  REPL time!"</span>)</span>}</span>
</code></pre><p>In the following  example I have added colour using <a href="http://stackoverflow.com/questions/5762491/how-to-print-color-in-console-using-system-out-println" target="_blank" rel="external">ASCII codes I found on Stack Overflow</a>.  It makes the definition of the prompt a little messy looking, however the prompt itself is much nicer than the standard one. </p>
<blockquote>
<p>Remember to reset the colour at the end of the prompt definition or all your input into the REPL will be the same colour as the prompt.</p>
</blockquote>
<pre><code><span class="symbol">:repl-options</span> {
     <span class="symbol">:prompt</span> (<span class="keyword">fn</span> [ns] (str <span class="string">"\u001B[35m[\u001B[34m"</span> ns <span class="string">"\u001B[35m]\u001B[33mcλ:\u001B[m "</span> ))

     <span class="symbol">:welcome</span> (println <span class="string">"Time for  REPL Driven Development!"</span>)}&lt;<span class="regexp">/span&gt;**</span>
</code></pre><p>This customisation looks like:</p>
<img src="http://1.bp.blogspot.com/-_KsZRMlUN7M/UiBLzV-wuZI/AAAAAAAAK6o/adyJ_a1fVQE/s1600/clojure-repl-custom-colour-text.png" class="img-code" title="Customised Clojure REPL prompt with welcome message, configured in Leiningen"> 
<h1 id="The_ASCII_codes_and_their_colours">The ASCII codes and their colours</h1><p>To make the above customisation easier to read, here are the actual colours of the ASCII codes I used above.</p>
<ul>
<li><code>\u001B[32m</code> is green for the brackets around the namespace</li>
<li><code>\u001B[34m</code> is blue for the name space name</li>
<li><code>\u001B[33m</code> is yellow for the Lambda character (yellow matches my shell prompt ~)</li>
<li><code>\u001B[m</code>   resets the colour changes back to the default (white in this case)</li>
</ul>
<blockquote>
<p>If there was a way to use colour names rather than ASCII codes in the prompt configuration, that would make the configuration so much nicer to work with.  This may be a limitation of the terminal though, rather than Leiningen.</p>
</blockquote>
<h1 id="Other_REPL_prompt_tweaks">Other REPL prompt tweaks</h1><p>Other customisations you could make to your REPL prompt include adding the project name, version, etc.  As the customisation is specified in your Clojure <code>project.clj</code> then your prompt can be as project specific as you like.</p>
<h1 id="Adding_the_Lambda_symbol_using_Emacs">Adding the Lambda symbol using Emacs</h1><p>I am using Emacs for my editor, so a quick look on Stack Overflow showed me <a href="http://stackoverflow.com/questions/10192341/how-to-enter-greek-characters-in-emacs" target="_blank" rel="external">how to enter Greek characters in Emacs</a> to create the Lambda character in the prompt.  The way to add the lambda symbol to a file in Emacs is with the command:</p>
<pre><code>M-x ucs-<span class="operator"><span class="keyword">insert</span> <span class="number">03</span>bb</span>
</code></pre><p>The <code>03bb</code> code is Unicode for the lambda symbol - λ.</p>
<h1 id="Create_your_own_Leiningen_Clojure_templates">Create your own Leiningen Clojure templates</h1><p>Assuming you like the custom prompt and want it in all your projects,  you can use the <a href="https://github.com/tcw/lein-create-template" target="_blank" rel="external">lein-create-template</a> plugin to create your own project template for lein new.  So when you create a new project with leiningen you can run the command:</p>
<pre><code>lein new my-custom-<span class="keyword">template</span> project-name
</code></pre><h1 id="In_Summary">In Summary</h1><p>Its quick and easy to customise your Clojure REPL prompt when using Leiningen,  so why not make the developer experience just that little bit nicer and maybe prevent typing code into the wrong terminal window.</p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="http://4.bp.blogspot.com/-pc_s02W-R9w/TzFLaS-sQcI/AAAAAAAAEbU/xWhovBljYE8/s1600/clojure-logo-with-name.png" class="img-topic"> 
<p>Sometimes its the little things that make a difference and after seeing how easily customise the Clojure REPL prompt with <a href="http://leiningen.org/">Leiningen</a> I had a little hack with words, symbols and colours and came up with something nicer (in my opinion).</p>]]>
    
    </summary>
    
      <category term="clojure" scheme="http://jr0cket.co.uk/tags/clojure/"/>
    
      <category term="emacs" scheme="http://jr0cket.co.uk/tags/emacs/"/>
    
      <category term="leiningen" scheme="http://jr0cket.co.uk/tags/leiningen/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Defining Custom Task Workflows With Emacs Org-Mode]]></title>
    <link href="http://jr0cket.co.uk/2013/08/defining-custom-workflow-with-Emacs-org-mode.html.html"/>
    <id>http://jr0cket.co.uk/2013/08/defining-custom-workflow-with-Emacs-org-mode.html.html</id>
    <published>2013-08-27T11:00:00.000Z</published>
    <updated>2015-03-18T15:08:46.204Z</updated>
    <content type="html"><![CDATA[<img src="http://1.bp.blogspot.com/-PLeobToC6lc/TzFJCfBSLPI/AAAAAAAAEbE/zSx1cOgHzZE/s1600/emacs128x128icon.png" class="img-thumbnail">
<p>Org-mode is a great way to track tasks and manage all those to-do items in one place, although Org-mode has a very simple workflow by default <strong>(TODO | DONE)</strong>.  To track your tasks in more detail you can define extra stages or create a completely workflow.</p>
<a id="more"></a>
<p>Previously I covered <a href="http://jr0cket.co.uk/2013/08/config-emacs-org-mode-to-manage-tasks.html" target="_blank" rel="external">how to set up Org-mode &amp; Org-capture</a> for the built in workflow.  In this article I show how to configure Org-mode to use my own custom workflow or define your own multiple workflows should the need arise.</p>
<h1 id="My_Kanban_workflow">My Kanban workflow</h1><p>I like to <a href="http://jr0cket.co.uk/2011/09/two-years-on-kanban.html" target="_blank" rel="external">organise my work using Kanban</a>, an agile technique that focuses on getting work done by managing workload and learning through fast feedback.  To implement this Kanban approach I define 4 stages for my task workflow:</p>
<img src="http://2.bp.blogspot.com/-oLZ24RvCtxw/UhugLxfVpyI/AAAAAAAAK50/p-M0BRiZR6Q/s1600/emacs-org-mode-kanban-coloured-stages.png" class="img-code"> 
<h1 id="Emacs_Org-mode_for_managing_TODO’s_using_a_Kanban_style_workflow">Emacs Org-mode for managing TODO’s using a Kanban style workflow</h1><p><strong>TODO</strong> - tasks I have not started yet.  If I have an idea for a task, I can make a quick note and get back to what I was doing without loosing focus or worrying about forgetting to do something.</p>
<p><strong>DOING</strong> - tasks I have started working on.  I try to keep the number of tasks I am doing as low as possible so I am not task switching.  This helps me get things done</p>
<p><strong>BLOCKED</strong> - tasks that I started working on but cant continue with for some unexpected reason.  I wont start working on these until I have more time set aside to unblock them.  If I block a task with sub-tasks then I will not work on any of those sub-tasks either (I have not seen anything in org-mode to automatically block and unblock sub-tasks if its parent is blocked or unblocked, that would be useful).</p>
<p><strong>REVIEW</strong> - tasks I have completed but want to check if there something I can learn or share from the experience of doing that task.  This can help me define other tasks related to the one I just completed.</p>
<p><strong>DONE</strong> - tasks that are completed.  I keep the done tasks around for the week so I have a feeling of accomplishment and avoid repeating myself.</p>
<p><strong>ARCHIVE</strong> - an optional stage to put tasks in if I want a longer term record of completing that task</p>
<h1 id="Defining_additional_task_stages">Defining additional task stages</h1><p>You can create a new workflow for your tasks by defining setting a sequence of text strings to the variable <code>org-todo-keywords</code></p>
<p>I am using Emacs Live as a base configuration, so I put all my Org-mode configurations into a file called:</p>
<pre><code>~<span class="regexp">/.live-packs/</span>jr0cket-pack<span class="regexp">/config/</span>org-mode.el
</code></pre><p>If you are not using Emacs Live you can place them in <code>~/.emacs.d/init.el</code>.</p>
<p>Here is an example that implements my Kanban workflow:</p>
<pre><code><span class="list">(<span class="keyword">setq</span> org-todo-keywords 
  '<span class="list">(<span class="list">(<span class="keyword"><span class="built_in">sequence</span></span> <span class="string">"TODO"</span> <span class="string">"DOING"</span> <span class="string">"BLOCKED"</span> <span class="string">"REVIEW"</span> <span class="string">"|"</span> <span class="string">"DONE"</span> <span class="string">"ARCHIVED"</span>)</span>)</span>)</span>
</code></pre><p>The  vertical bar <code>|</code> defines the possible end states for your task.  Org-mode can be configured to add content to your task upon entering an end state, such as setting a <code>CLOSED</code> variable to the current date and time stamp.  This is useful if you want track your time spent on tasks.  I will cover this in a follow on article, or see the section on <a href="http://orgmode.org/org.html#Progress-logging" target="_blank" rel="external">Progress Logging</a> of the Orgmode tutorial.</p>
<h1 id="Defining_multiple_workflows">Defining multiple workflows</h1><p>You can also define multiple workflows so long as all the task stage names are unique.  Here is an <a href="http://orgmode.org/org.html#Workflow-states" target="_blank" rel="external">example of multiple workflows</a> from the org-mode.org website:</p>
<pre><code><span class="list">(<span class="keyword">setq</span> org-todo-keywords  '<span class="list">(<span class="list">(<span class="keyword"><span class="built_in">sequence</span></span> <span class="string">"TODO"</span> <span class="string">"|"</span> <span class="string">"DONE"</span>)</span>
  <span class="list">(<span class="keyword"><span class="built_in">sequence</span></span> <span class="string">"REPORT"</span> <span class="string">"BUG"</span> <span class="string">"KNOWNCAUSE"</span> <span class="string">"|"</span> <span class="string">"FIXED"</span>)</span>
  <span class="list">(<span class="keyword"><span class="built_in">sequence</span></span> <span class="string">"|"</span> <span class="string">"CANCELED"</span>)</span>)</span>)</span>
</code></pre><p>I haven’t found a use for this approach as yet, but will add it to my <code>TODO</code> list to investigate.</p>
<h1 id="Making_workflow_stages_more_distinct_with_colour">Making workflow stages more distinct with colour</h1><p>The default colours for Org-mode tasks are pink for TODO and Green for DONE.  As we are creating additional steps it helps me scan my task states if they are colour coded.</p>
<p>Here is an example of defining colours for each of the states of my Kanban workflow.  Most of the colours are defined using the text of the name.  The org-warning is used to set the TODO stage to the standard org-mode colour for TODO.</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">;; Setting Colours (faces) <span class="keyword">for</span> todo states <span class="keyword">to</span> give clearer view <span class="keyword">of</span> work </span><br><span class="line">(setq org-todo-keyword-faces</span><br><span class="line">  '((<span class="string">"TODO"</span> . org-warning)</span><br><span class="line">   (<span class="string">"DOING"</span> . <span class="string">"yellow"</span>)</span><br><span class="line">   (<span class="string">"BLOCKED"</span> . <span class="string">"red"</span>)</span><br><span class="line">   (<span class="string">"REVIEW"</span> . <span class="string">"orange"</span>)</span><br><span class="line">   (<span class="string">"DONE"</span> . <span class="string">"green"</span>)</span><br><span class="line">   (<span class="string">"ARCHIVED"</span> .  <span class="string">"blue"</span>))) **&lt;/span&gt;</span><br></pre></td></tr></table></figure>
<h1 id="More_Org-mode_customisation_to_consider">More Org-mode customisation to consider</h1><p>There are lots more customisations that can be made to Org-mode to help you manage tasks.  Here are some aspects I am considering next.</p>
<h2 id="Creating_more_templates_for_Org-capture">Creating more templates for Org-capture</h2><p>By default Org-capture only has one template, the task template.  This task template only a time stamp of when it was created and a link to the file.  All the TODO items created with this template go under the main heading of Tasks, so I could create templates for other headings such as Personal, Financial, Household, etc.</p>
<h2 id="Triggering_actions_on_Org-mode_stages">Triggering actions on Org-mode stages</h2><p>When I mark my tasks as done, I’d like to have that tasked automatically date stamped so I know when I completed it.  This would add a <code>CLOSED</code> parameter to the task in question.  If I also have time stamps for each of the states then I can track my cycle time and check to see if I am keeping too many tasks in the DOING state.</p>
<p>A lot more features of Org-mode can be found at the excellent <a href="http://orgmode.org/" target="_blank" rel="external">Orgmode.org</a> website.</p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="http://1.bp.blogspot.com/-PLeobToC6lc/TzFJCfBSLPI/AAAAAAAAEbE/zSx1cOgHzZE/s1600/emacs128x128icon.png" class="img-thumbnail">
<p>Org-mode is a great way to track tasks and manage all those to-do items in one place, although Org-mode has a very simple workflow by default <strong>(TODO | DONE)</strong>.  To track your tasks in more detail you can define extra stages or create a completely workflow.</p>]]>
    
    </summary>
    
      <category term="emacs" scheme="http://jr0cket.co.uk/tags/emacs/"/>
    
      <category term="orgmode" scheme="http://jr0cket.co.uk/tags/orgmode/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Configuring Emacs Org-Mode to Managing Your Tasks]]></title>
    <link href="http://jr0cket.co.uk/2013/08/configure-emacs-org-mode-to-manage-your-tasks.html.html"/>
    <id>http://jr0cket.co.uk/2013/08/configure-emacs-org-mode-to-manage-your-tasks.html.html</id>
    <published>2013-08-26T20:44:00.000Z</published>
    <updated>2015-03-18T15:08:46.204Z</updated>
    <content type="html"><![CDATA[<img src="http://1.bp.blogspot.com/-PLeobToC6lc/TzFJCfBSLPI/AAAAAAAAEbE/zSx1cOgHzZE/s1600/emacs128x128icon.png" class="img-thumbnail"> 
<p><a href="http://blog.jr0cket.co.uk/2013/08/manage-dev-life-with-emacs-org-mode.html" target="_blank" rel="external">Emacs Org-mode</a> has a feature called Org-capture that makes it easy to keep track of all the to-do’s that crop up as we work on projects.  With Org-capture you can make comments across all your files and projects and link to them all from one place. </p>
<p>Here is how to configure Emacs Org-capture so you can quickly create new tasks relevant to specific files and easily manage them all in one place.  If you are not familiar with Emacs Org-mode, take a look at my article: <a href="http://blog.jr0cket.co.uk/2013/08/manage-dev-life-with-emacs-org-mode.html" target="_blank" rel="external">Manage your developer life with Org-mode</a>.</p>
<a id="more"></a>
<blockquote>
<p>I use <a href="http://overtone.github.io/emacs-live/" target="_blank" rel="external">Emacs Live</a> as a base configuration for Emacs, although everything here will work with any setup as Org-mode and Org-capture are both part of Emacs itself.  If you are not using Emacs live, you can place the configurations in your <code>~/.emacs.d/init.el</code> file rather that the locations specified here.</p>
</blockquote>
<h1 id="Using_Org-capture_todo_file_to_track_tasks">Using Org-capture todo file to track tasks</h1><p>Org-capture creates a list of all those tasks you want to do across all the text files you are working with in a single file, by default this file is called <code>.notes</code> and lives in the root folder of your account.  However, the file managing your tasks should really have a <code>.org</code> extension so that Emacs automatically puts it into org-mode when its loaded. </p>
<p>You should also consider creating your todo list file where it is easy to manage with Git or a synchronisation service like Dropbox.</p>
<img src="http://2.bp.blogspot.com/-1pQtvXL1elc/Uhu9VLK7gXI/AAAAAAAAK6E/4KbFDRdE3oE/s1600/emacs-org-mode-tasks-example.png" class="img-code">
<h1 id="Managing_tasks_using_Org-mode_and_Org-capture">Managing tasks using Org-mode and Org-capture</h1><h2 id="Define_where_your_tasks_are_kept">Define where your tasks are kept</h2><p>Define a variable called <code>org-gefault-notes-file</code> to set the path and file name for the todo file.</p>
<p>I put this variable definition in a new file I created to hold all my Org-mode configurations:</p>
<pre><code>~<span class="regexp">/.live-packs/</span>jr0cket-pack<span class="regexp">/config/</span>org-mode.el
</code></pre><p>Then I edited this file and add the following definition for the todo file:</p>
<pre><code>;; Define <span class="operator">the</span> location <span class="operator">of</span> <span class="operator">the</span> <span class="built_in">file</span> <span class="built_in">to</span> hold tasks
(setq org-default-notes-<span class="built_in">file</span> <span class="string">"~/.todo-list.org"</span>)
</code></pre><h2 id="Calling_the_custom_org-mode_settings_the_Emacs_Live_way">Calling the custom org-mode settings the Emacs Live way</h2><p>As I am using Emacs Live, I follow the convention of placing sets of configurations into their own file and calling that from my live-pack init.el.  Editing my <code>init.el</code> file I added:</p>
<pre><code>~<span class="regexp">/.live-packs/jr</span>0cket-pack/init.el
</code></pre><p>and added a new line to load in the configuration from the <code>org-mode.el</code> file:</p>
<pre><code><span class="list">(<span class="keyword">live-load-config-file</span> <span class="string">"org-mode.el"</span>)</span>
</code></pre><h2 id="Adding_key_bindings_for_org-capture">Adding key bindings for org-capture</h2><p>I set up a keyboard binding for org-capture using <code>C-c c</code> (control key and c, followed by c).  I opened an existing binding file I have in my live pack</p>
<pre><code>~<span class="regexp">/.live-packs/</span>jr0cket-pack<span class="regexp">/config/</span>bindings.el
</code></pre><p>and added a definition to call org-capture</p>
<pre><code><span class="list">(<span class="keyword">define-key</span> global-map <span class="string">"C-c c"</span> <span class="quoted">'org-capture</span>)</span>
</code></pre><h2 id="Create_a_notes-org_file">Create a notes.org file</h2><p>Create the file that will hold all your tasks by either opening and saving a file of that name in Emacs or using the command:</p>
<pre><code>touch ~/<span class="class">.todo-list</span><span class="class">.org</span>
</code></pre><p>Emacs is now setup to capture all your todos via Org-capture, so lets look at how we use Org-capture</p>
<h1 id="Creating_a_task_using_Org-capture">Creating a task using Org-capture</h1><p>Open up a source code file or other text file you want to work on.  Create a comment in that file about a TODO / task you want to do.  With the cursor still on your comment, use the org-capture command or the keyboard combo:</p>
<pre><code><span class="keyword">M</span>-x org-<span class="keyword">capture</span>
C-c c
</code></pre><p>You are prompted to choose a template for the type of entry you want to create.  By default there is only one called task.  Press the letter <code>t</code> to select the task template.</p>
<p>The cursor will now be in the Org-mode task file you created earlier allowing you to type in a descriptoin of the task.  Updated the task list with this new task using the keyboard combo</p>
<pre><code><span class="keyword">C</span>-c <span class="keyword">C</span>-c
</code></pre><p>You can save the tasks file as usual with <code>C-x C-s</code>.</p>
<h2 id="Following_links">Following links</h2><p>To open the file that your task links too, or open a web addresses you have added to the task, place the cursor anyware on the link and use</p>
<pre><code><span class="keyword">C</span>-c <span class="keyword">C</span>-o
</code></pre><h1 id="Adding_TODO’s_manually">Adding TODO’s manually</h1><p>As has been mentioned previously, org-mode manages tasks using a plain text file, so its easy to add your own tasks by manually editing the file.  You can indicate a task using the * notation.</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">*</span> Level 1 heading</span><br><span class="line"><span class="keyword">*</span><span class="keyword">*</span> Level 2 heading</span><br><span class="line"><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span> Level 3 heading and so ....</span><br></pre></td></tr></table></figure>
<p>By default the org-capture function has only one template, Tasks.  So all todo’s created with org-capture will be level 2 headings under * Tasks…</p>
<p>** description of task</p>
<h1 id="Navigating_and_using_your_org-mode_task_list"><strong>Navigating and using your org-mode task list</strong></h1><p>When <code>~/.todo-list.org</code> file is in org mode, you may only see the text <code>Tasks...</code>.  The three dots after Tasks indicates that this is a heading that contains more underneath.  Using the <code>Tab</code> key you can expand the contents and repeatedly tabbing will cycle through different levels of expansion.  To work on all headings at once, you can use the <strong>Shift-Tab</strong> key combination.</p>
<p><strong>M - Enter</strong></p>
<ul>
<li>creates another line in the same style as the current one the cursor is on.  If you do Alt-Enter at the end of a Task line, a new task is created.  At the end of a list line, a new list item is created, etc.</li>
</ul>
<p><strong>Shift- left/right arrows</strong></p>
<ul>
<li>on a TODO text cycles through the states of the task workflow</li>
</ul>
<p><strong>M - left/right arrows</strong></p>
<ul>
<li>promotes or demotes the task, giving an quick way to create sub-tasks.  A task line must start at the beginning of the line.  If you indenting a task line with spaces means it is no longer recognised as a task.</li>
</ul>
<p><strong>M-Shift- left/right arrows</strong></p>
<ul>
<li>promotes / demotes a whole structure.  For example, if there is a level 2 heading with several level 3 headings underneath, then promoting the level 2 heading to level 1 also promotes the level 3 headings to level 2.</li>
</ul>
<p><strong>M-Shift- up/down arrows</strong></p>
<ul>
<li>move tasks and list items up or down within the same level</li>
</ul>
<p><strong>Shift - up/down arrows</strong></p>
<ul>
<li>when on task ** will cycle through the priority of a tasks [A, B, C, none]</li>
</ul>
<h1 id="In_Summary">In Summary</h1><p>Emacs Org-mode is a great way to organise your busy developer life - and life in general if you are that way inclined.  As Org-mode is a part of Emacs already, then all you need to do is add a couple of lines of configuration and you are off.</p>
<p>As any Org-mode file is just a text file underneath, then you are not trapped into a format you cannt use anywhere else.</p>
<p>Hope you have a great time organising yourself with Org-mode.</p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="http://1.bp.blogspot.com/-PLeobToC6lc/TzFJCfBSLPI/AAAAAAAAEbE/zSx1cOgHzZE/s1600/emacs128x128icon.png" class="img-thumbnail"> 
<p><a href="http://blog.jr0cket.co.uk/2013/08/manage-dev-life-with-emacs-org-mode.html">Emacs Org-mode</a> has a feature called Org-capture that makes it easy to keep track of all the to-do’s that crop up as we work on projects.  With Org-capture you can make comments across all your files and projects and link to them all from one place. </p>
<p>Here is how to configure Emacs Org-capture so you can quickly create new tasks relevant to specific files and easily manage them all in one place.  If you are not familiar with Emacs Org-mode, take a look at my article: <a href="http://blog.jr0cket.co.uk/2013/08/manage-dev-life-with-emacs-org-mode.html">Manage your developer life with Org-mode</a>.</p>]]>
    
    </summary>
    
      <category term="emacs" scheme="http://jr0cket.co.uk/tags/emacs/"/>
    
      <category term="orgmode" scheme="http://jr0cket.co.uk/tags/orgmode/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Manage Your Developer Life With Emacs Org-Mode - an Overview]]></title>
    <link href="http://jr0cket.co.uk/2013/08/manage-dev-life-with-emacs-org-mode.html.html"/>
    <id>http://jr0cket.co.uk/2013/08/manage-dev-life-with-emacs-org-mode.html.html</id>
    <published>2013-08-22T12:39:00.000Z</published>
    <updated>2015-03-18T15:08:46.208Z</updated>
    <content type="html"><![CDATA[<img src="http://1.bp.blogspot.com/-PLeobToC6lc/TzFJCfBSLPI/AAAAAAAAEbE/zSx1cOgHzZE/s1600/emacs128x128icon.png" class="img-thumbnail"> 
<p>As a busy developer I end up working on several projects, documents &amp; books at the same time. &nbsp;I want a simple way to capture notes where I don’t have to worry about formatting. &nbsp;I also want to keep a track on all the things I am working on. &nbsp;As I do most of my coding &amp; writing with Emacs, then I was sure it had something that could help.</p>
<a id="more"></a>
<h2 id="Enter_Org-mode">Enter Org-mode</h2><p>Org-mode is a really simple and beautiful way to take notes, create presentations, organise thoughts and help you manage tasks across all your work. &nbsp;The latest versions of Emacs (23.x / 24.x) have Org-mode built in, so you can use it straight away with <code>M-x org-mode</code>.</p>
<p>Org-mode documents are plain text, so they are easy to write and understand even outside of Emacs. &nbsp;The magic is happens when Org-mode interacts with that text. &nbsp;Org-mode understands the structure of the text and lets you easily organise everything into something useful.</p>
<p>I have written <a href="http://jr0cket.co.uk/2013/08/config-emacs-org-mode-to-manage-tasks.html" target="_blank" rel="external"><strong>a simple guide to configuring Org-mode and Org-capture</strong></a>, as well as<strong> <a href="http://jr0cket.co.uk/2013/08/defining-custom-workflow-with-Emacs-org-mode.html" target="_blank" rel="external">a guide to creating your own task workflow</a></strong> for Org-mode.</p>
<p>Here is a quick YouTube video overview of Org-mode for Emacs by <a href="http://www.youtube.com/user/rpdillon?feature=watch" target="_blank" rel="external">Richard Dillon</a>, to understand the keyboard short-cuts used (key bindings) then see his <a href="https://github.com/rpdillon/hack-emacs-notes" target="_blank" rel="external">Org-mode notes</a> on Github. &nbsp;Or if you are already hooked on the idea of Org-mode then see the In-depth guide at the end of this article.</p>
<div class="video-container"><iframe src="//www.youtube.com/embed/6W82EdwQhxU" frameborder="0" allowfullscreen></iframe></div> 
<p><em>Hack Emacs: Introduction to Org-mode</em></p>
<p>You can also take a look at&nbsp;<a href="http://www.youtube.com/watch?v=oJTwQvgfgMM" target="_blank" rel="external">Carsten Dominik&nbsp;talking about Org-mode</a> from the Google Tech Talks back in 2008, the content is still relevant.</p>
<div class="video-container"><iframe src="//www.youtube.com/embed/oJTwQvgfgMM" frameborder="0" allowfullscreen></iframe></div>
<h2 id="Using_Org-capture_to_track_tasks">Using Org-capture to track tasks</h2><p>Org-capture provides an easy way to create a list of all those tasks you want to do across all the text files you are working with. &nbsp;You create a comment in the file you are working in then with the cursor over that comment you create a new task using <strong>org-capture</strong>.  This opens up a file that holds your current tasks and using a template it creates a task that links back to the file where you made your comment. &nbsp;When you open this link it takes you back to the file and to the exact position you created the task from.</p>
<p>I will show you how to set up and use org-capture with Emacs and Emacs live in the next article of this series.</p>
<h2 id="Creating_presentations_for_developers">Creating presentations for developers</h2><p>You can easily create an interactive presentation with org-mode and more importantly for developers interact with real source code in a tool that knows how to process that code. &nbsp;If you want to publish this you can put your <code>.org</code> file on Github or export your presentation as HTML and other formats.</p>
<p>so you dont need to spend time on creating fancy spinning presentations with JavaScript or yet another boring power point presentation and fill it with static screen shots.</p>
<h2 id="Learning_Org-mode">Learning Org-mode</h2><p>The best place to start learning Org-mode is its website:&nbsp;<a href="http://orgmode.org/" target="_blank" rel="external">http://orgmode.org/</a>. &nbsp;I found the <a href="http://orgmode.org/guide/" target="_blank" rel="external">compact guide</a> a great introduction and it got me going quickly. &nbsp;I will also be writing a few follow-on articles on specific topics like task management and presentations.</p>
<p>You can also watch the <a href="http://www.youtube.com/watch?v=nsGYet02bEk" target="_blank" rel="external">Emacs Org-mode In-depth video</a>, again by&nbsp;<a href="http://www.youtube.com/user/rpdillon?feature=watch" target="_blank" rel="external">Richard Dillon</a></p>
<div class="video-container"><iframe src="//www.youtube.com/embed/nsGYet02bEk" frameborder="0" allowfullscreen></iframe></div>
<p><em>Emacs Org-mode in depth</em></p>
<p>Thank you.</p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="http://1.bp.blogspot.com/-PLeobToC6lc/TzFJCfBSLPI/AAAAAAAAEbE/zSx1cOgHzZE/s1600/emacs128x128icon.png" class="img-thumbnail"> 
<p>As a busy developer I end up working on several projects, documents &amp; books at the same time. &nbsp;I want a simple way to capture notes where I don’t have to worry about formatting. &nbsp;I also want to keep a track on all the things I am working on. &nbsp;As I do most of my coding &amp; writing with Emacs, then I was sure it had something that could help.</p>]]>
    
    </summary>
    
      <category term="emacs" scheme="http://jr0cket.co.uk/tags/emacs/"/>
    
      <category term="orgmode" scheme="http://jr0cket.co.uk/tags/orgmode/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Getting Started With Nodejs and Express Framework]]></title>
    <link href="http://jr0cket.co.uk/2013/08/getting-started-with-nodejs-and-express.html.html"/>
    <id>http://jr0cket.co.uk/2013/08/getting-started-with-nodejs-and-express.html.html</id>
    <published>2013-08-19T14:12:00.000Z</published>
    <updated>2015-03-18T15:08:46.208Z</updated>
    <content type="html"><![CDATA[<img src="http://4.bp.blogspot.com/-iCH8QV8CGAY/UgfW0SNj9bI/AAAAAAAAK3I/qE6rmyNEhOI/s1600/nodejs-logo-nodes.png" class="img-thumbnail"> 
<p><a href="http://nodejs.org/" target="_blank" rel="external">nodejs</a> is an important aspect in making JavaScript so popular for modern development and frameworks like <a href="http://expressjs.com/" target="_blank" rel="external">Express</a> make development with node more productive.  It is really easy to get going with <a href="http://nodejs.org/" target="_blank" rel="external">nodejs</a> &amp; <a href="http://expressjs.com/" target="_blank" rel="external">Express</a> and you can deploy your app live via <a href="https://www.heroku.com/" target="_blank" rel="external">Heroku</a> too.</p>
<a id="more"></a>
<h1 id="Express_Framework">Express Framework</h1><p><a href="http://expressjs.com/" target="_blank" rel="external">Express</a> is a minimal and flexible node.js web application framework. You can easily create single &amp; multi-page web apps or use it with other languages to build hybrid web applications. Express makes using node.js much less of a learning curve, although you can still get to the raw node power once you are ready. </p>
<h1 id="Creating_your_first_nodejs_Express_app">Creating your first nodejs Express app</h1><p>Assuming you already have nodejs installed (<a href="http://blog.jr0cket.co.uk/2013/03/starting-nodejs-development-on-ubuntu.html" target="_blank" rel="external">install node on Ubuntu</a>) along with npm ,the nodejs package manager, then you are good to go.</p>
<h1 id="Create_your_project">Create your project</h1><p>Create a folder for your application</p>
<pre><code><span class="built_in">mkdir</span> <span class="keyword">first</span>-node-express
</code></pre><h1 id="Define_project_dependencies">Define project dependencies</h1><p>Create a <code>package.json</code> file to define your project and its dependencies.  Express is treated as a dependency for the project and you simply specify the version of Express you want to include.</p>
<p>To see what version of express is available, use the node package manager to find out</p>
<pre><code><span class="title">npm</span> <span class="built_in">info</span> express version
</code></pre><p>Edit the <code>package.json</code> file and define your project as follows</p>
<pre><code>{
  "<span class="attribute">name</span>": <span class="value"><span class="string">"node-express-simple"</span></span>,
  "<span class="attribute">description</span>": <span class="value"><span class="string">"A simple node express based website"</span></span>,
  "<span class="attribute">version</span>": <span class="value"><span class="string">"0.0.1"</span></span>,
  "<span class="attribute">private</span>": <span class="value"><span class="literal">true</span></span>,
  "<span class="attribute">dependencies</span>": <span class="value">{
    "<span class="attribute">express</span>": <span class="value"><span class="string">"3.3.5"</span>
  </span>}
</span>}
</code></pre><blockquote>
<p>the name of the project should not contain spaces</p>
</blockquote>
<h1 id="Add_libraries_that_Express_and_Node_require">Add libraries that Express and Node require</h1><p>Now the project dependencies are defined, use the node package manager to pull down those dependencies from the Internet.</p>
<pre><code>npm <span class="keyword">install</span>
</code></pre><p>You can view the dependencies of your project at any time by using the command:</p>
<pre><code><span class="built_in">npm</span> ls
</code></pre><h1 id="Create_a_simple_route">Create a simple route</h1><p>In a text file called <code>web.js</code> define a simple route that will handle a request sent to the default address of your application, for example <code>/</code>. </p>
<blockquote>
<p>You can call this file anything you like, but its often web.js, app.js or server.js</p>
</blockquote>
<pre><code><span class="comment">// define a simple text response</span>
app.<span class="keyword">get</span>(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span><span class="params">(request, responce)</span></span>{
  responce.send(<span class="string">'Hello nodejs express World'</span>);
});
</code></pre><p>In the above example we are using response.send() to add a Content type and Content-Length to the response so they dont have to define them manually.</p>
<img src="http://4.bp.blogspot.com/-iCH8QV8CGAY/UgfW0SNj9bI/AAAAAAAAK3I/qE6rmyNEhOI/s1600/nodejs-logo-nodes.png" class="img-code"> 
<h1 id="Define_a_node_server_to_listen_to_requests">Define a node server to listen to requests</h1><p>In the same <code>web.js</code> file as above, add code to listen on a specific port and also send any logging information to the console from where your node app was run from.</p>
<pre><code>// <span class="keyword">bind</span> to a port &amp;amp; <span class="keyword">listen</span> <span class="keyword">for</span> connections 
app.<span class="keyword">listen</span>(<span class="number">3000</span>);
console.<span class="keyword">log</span>(<span class="string">'Node express app listening on port 3000'</span>);
</code></pre><blockquote>
<p>It can be useful to define a $PORT variable and use that variable in your code, especially if you use multiple environments like development, testing and production.  Also some platform as a service approaches provide a port variable on which your application must listen (eg. Heroku.com).</p>
</blockquote>
<h1 id="Run_the_app_locally_with_the_node_command">Run the app locally with the node command</h1><p>To run your application, use the command called <code>node</code> and pass it the name of the file your application is in.  In this case <code>web.js</code>.</p>
<pre><code><span class="title">node</span> web.js
</code></pre><p>You should see output on the console showing you that node is running and listening on the port you specified.</p>
<pre><code>Node express app listening <span class="function_start"><span class="keyword">on</span></span> port <span class="number">3000</span>
</code></pre><p>You can now <a href="http://localhost:3000/" target="_blank" rel="external">open your new node express website</a>.   You should just see the text messages displayed in your browser.</p>
<h1 id="Update_your_Node_Express_app_code_a_little_for_Heroku">Update your Node Express app code a little for Heroku</h1><p>To make the application a little more robust lets make a couple of changes to the port it runs on and the logging message.</p>
<p>Edit the <code>web.js</code> file and change the <code>app.listener</code> code to be set by an Heroku environment variable (or default to port 5000 if no variable set).  The console log code is also changed to include the port the app is running on just to be sure.</p>
<pre><code><span class="keyword">var</span> port = process.env.PORT || <span class="number">5000</span>;
app.listen(port, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{
  <span class="built_in">console</span>.log(<span class="string">"Listening on "</span> + port);
});
</code></pre><p>We are also going to tell Heroku the process we want to run for our application, using a simple text file called <code>Procfile</code></p>
<blockquote>
<p>the file name is Procfile without any extension and P should be capitalised, it should be in the root of your project folder.</p>
</blockquote>
<p>Edit the <code>Procfile</code> and add the following line to run a web process using node and our application file.</p>
<pre><code><span class="attribute">web</span>: <span class="string">node web.js</span>
</code></pre><h1 id="Add_your_project_to_a_local_git_repository">Add your project to a local git repository</h1><p>I’m assuming you have Git already installed.  </p>
<blockquote>
<p>If you need to install Git, visit the <a href="http://git-scm.com/" target="_blank" rel="external">Git-SCM Website</a> or install the <a href="https://toolbelt.heroku.com/" target="_blank" rel="external">Heroku toolbelt</a></p>
</blockquote>
<p>Commit your code to your local git repository using the following commands:</p>
<pre><code>git init
git add Procfile web<span class="class">.js</span> package<span class="class">.json</span>
git commit -m <span class="string">"new project created"</span>
</code></pre><h1 id="Create_an_Heroku_application_for_deployment">Create an Heroku application for deployment</h1><p>Assuming your project is managed with git and you have an <a href="https://www.heroku.com/" target="_blank" rel="external">Heroku account</a> and the <a href="https://toolbelt.heroku.com/" target="_blank" rel="external">Heroku toolbelt</a>, then you can simply create a space for your application on Heroku with the command:</p>
<pre><code>heroku <span class="built_in">create</span>
</code></pre><p>This adds a remote URL for the git repository on Heroku that your application will be deployed from.  You can use <code>git remote -v</code> to check it has been added.</p>
<h1 id="Deploy_your_application_to_Heroku">Deploy your application to Heroku</h1><p>Your code is managed by your local Git repository as one or more commits, so all you have to do is push those commits to Heroku and trigger a deployment.</p>
<pre><code>git <span class="keyword">push</span> heroku master
</code></pre><h1 id="Start_your_application_on_Heroku">Start your application on Heroku</h1><p>The final step to get your application running is to tell Heorku to run a process for your node server.  The following command will use the process defined in the Profile you created earlier.</p>
<pre><code><span class="attribute">heroku ps:scale web</span>=<span class="string">1</span>
</code></pre><p>Now you can see your application running live on the Internet by navigating to the application address shown at the end of the deployment (URL) or simply type:</p>
<pre><code>heroku <span class="keyword">open</span>
</code></pre><h1 id="In_Summary">In Summary</h1><p>Creating a web app with Nodejs and Express is pretty quick and deploying on Heroku is easy, giving you a live app you can continue to build upon.</p>
<p>Next I’ll look at doing more interesting things with Express, such as using it to generate an application skeleton.</p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="http://4.bp.blogspot.com/-iCH8QV8CGAY/UgfW0SNj9bI/AAAAAAAAK3I/qE6rmyNEhOI/s1600/nodejs-logo-nodes.png" class="img-thumbnail"> 
<p><a href="http://nodejs.org/">nodejs</a> is an important aspect in making JavaScript so popular for modern development and frameworks like <a href="http://expressjs.com/">Express</a> make development with node more productive.  It is really easy to get going with <a href="http://nodejs.org/">nodejs</a> &amp; <a href="http://expressjs.com/">Express</a> and you can deploy your app live via <a href="https://www.heroku.com/">Heroku</a> too.</p>]]>
    
    </summary>
    
      <category term="nodejs" scheme="http://jr0cket.co.uk/tags/nodejs/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Developing on MacOSX Is More Human With Ubuntu Fonts]]></title>
    <link href="http://jr0cket.co.uk/2013/08/developing-on-macosx-more-human-with.html.html"/>
    <id>http://jr0cket.co.uk/2013/08/developing-on-macosx-more-human-with.html.html</id>
    <published>2013-08-12T19:50:00.000Z</published>
    <updated>2015-03-18T15:08:46.208Z</updated>
    <content type="html"><![CDATA[<p>As a developer you sit in front of your laptop all day (and night) so why not make it a more human experience by using the set of beautifully clear fonts from Ubuntu. &nbsp;Its really quick and simple to add them to your MacOSX machine (and probably windows), so give it a try.</p>
<a id="more"></a>
<h1 id="The_Ubuntu_font_family">The Ubuntu font family</h1><img src="http://3.bp.blogspot.com/-3zqHH9zVZ4s/Ugk10_CFuGI/AAAAAAAAK3Y/l06Tqnyb2o0/s1600/Ubuntu_Font_Family.png" class="img-topic"> 
<p>The Ubuntu font family has been professionally designed and is freely available from <a href="http://font.ubuntu.com/" target="_blank" rel="external">font.ubuntu.com</a>.</p>
<p>The fonts are available in a range of weights as well as different natural languages. &nbsp;As developers there is also a really beautiful mono-type font too called Ubuntu Mono!</p>
<p>Here is a simple example of some Clojure code in the Ubuntu Mono font:</p>
<img src="http://2.bp.blogspot.com/-eFL0wzEJQK0/Ugk7322THJI/AAAAAAAAK4k/3xLH4l_82pQ/s1600/ubuntu-fonts-core.clj-example.png" class="img-code"> 
<p>And a further example of some markdown (as used by Github, etc.)</p>
<img src="http://2.bp.blogspot.com/-9L5jxUlsc7A/Ugk8HVfwFWI/AAAAAAAAK4s/RD3lwVChM-8/s1600/ubutnu-fonts-index.md-example.png" class="img-code">
<img src="http://2.bp.blogspot.com/--h8jdygzyyI/Ugk3gdRijiI/AAAAAAAAK30/cibAauJPaus/s1600/ubuntu-font-family-list.png" class="img-code">
<h1 id="Adding_Fonts_to_MacOSX_is_a_simple_drag_and_drop">Adding Fonts to MacOSX is a simple drag and drop</h1><p>Download the Ubuntu fornts zip file and extract it (open the zip file in MacOSX extracts it).</p>
<p>Drag and drop all the files with a .ttf extension (true type font) to the folder containing all the fonts on your Mac:</p>
<img src="http://2.bp.blogspot.com/-ieiw0icjWdw/Ugk4JviIQtI/AAAAAAAAK38/Tj8OY04lP9I/s1600/ubuntu-fonts-macosx-library-fonts-path.png" class="img-code">
<p>Now all your applications on the Mac should be able to use the Ubuntu fonts.</p>
<h1 id="Tweaking_your_developer_tools">Tweaking your developer tools</h1><img src="http://1.bp.blogspot.com/-PLeobToC6lc/TzFJCfBSLPI/AAAAAAAAEbE/zSx1cOgHzZE/s1600/emacs128x128icon.png" class="img-topic">
<p>I use Emacs for most of my development on the Mac, but any app should be able to pick up the Ubuntu fonts you have added. </p>
<p>I have Emacs configured with the Emacs Live setup, so I simply add the Ubuntu Mono font as the default in the configuration file:</p>
<pre><code>~<span class="regexp">/.live-packs/accountname</span>-pack/init.el
</code></pre><p>The Emacs Lisp code to set the font to Ubuntu Mono as a font size of 16 (good for demos) is:</p>
<pre><code>(live-<span class="keyword">set</span>-<span class="keyword">default</span>-font <span class="string">"Ubuntu Mono 16"</span>)
</code></pre><p>This code looks much better in Emacs with the new Ubuntu Mono font of course.<br><img src="http://3.bp.blogspot.com/-Pb4STT7KHYI/Ugk6n6491LI/AAAAAAAAK4U/SZr9rieU8XE/s1600/ubuntu-font-emacs-init.el-example.png" class="img-code"></p>
<h1 id="In_Summary">In Summary</h1><p>Chaning fonts may seem like a small change to make, but anything you can do to make your development environment as enaging and enjoyable as possible is worth doing.  After all I certainly spend a lot of time in my developer environment.</p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>As a developer you sit in front of your laptop all day (and night) so why not make it a more human experience by using the set of beautifully clear fonts from Ubuntu. &nbsp;Its really quick and simple to add them to your MacOSX machine (and probably windows), so give it a try.</p>]]>
    
    </summary>
    
      <category term="mac" scheme="http://jr0cket.co.uk/tags/mac/"/>
    
      <category term="ubuntu" scheme="http://jr0cket.co.uk/tags/ubuntu/"/>
    
      <category term="ubuntu" scheme="http://jr0cket.co.uk/categories/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hack and Learn With Polyglot Developers in Beautiful Birmingham]]></title>
    <link href="http://jr0cket.co.uk/2013/08/hack-and-learn-with-polyglot-developers.html.html"/>
    <id>http://jr0cket.co.uk/2013/08/hack-and-learn-with-polyglot-developers.html.html</id>
    <published>2013-08-08T14:36:00.000Z</published>
    <updated>2015-03-18T15:08:46.208Z</updated>
    <content type="html"><![CDATA[<img src="http://3.bp.blogspot.com/-LBA04JPAvuM/UgOqJL9PEoI/AAAAAAAAKys/Kv2DM3kmyWg/s1600/hackference_logo.png" class="img-thumbnail"> 
<p><a href="http://hackference.co.uk/" target="_blank" rel="external">Hackference Birmingham</a> at the end of August is a great opportunity to discover new ideas from polyglot developers at a one day conference, then try those ideas out over a weekend hackathon. </p>
<a id="more"></a>
<p>I’d also forgotten that Birmingham is also a great city to explore, with lots of history and modern design to take in (including the <a href="http://www.fazeleystudios.com/" target="_blank" rel="external">Fazeley Studios</a> venue).  So I’m going to spend a little extra time discovering all it has to offer.  All of this is within a few minutes walk of Birmingham New Street station.</p>
<blockquote>
<p><a href="http://hackference.co.uk/buy" target="_blank" rel="external">Sign up by 9th August for the early bird discount </a></p>
</blockquote>
<h1 id="Hackference:_The_Conference">Hackference: The Conference</h1><img src="http://4.bp.blogspot.com/-yK4Trdo9HA0/UgOig4F70HI/AAAAAAAAKyM/sVUEtN_FXDU/s1600/Hackference-Fazeley-Studios.png" class="img-topic"> 
<p>The beautiful <a href="http://www.fazeleystudios.com/" target="_blank" rel="external">Fazeley Studios</a> </p>
<p>The one day conference on Friday offers a diverse set of topics, covering everything from API design, MongoDB, NodeJS, Clojure and even Go.</p>
<p>There is a great line up of experienced speakers, although not the ones you see very often so its a chance to hear some different viewpoints.  I am especially looking forward to hearing from <a href="https://twitter.com/lornajane" target="_blank" rel="external">Lorna Mitchell</a> about her experiences with API design.</p>
<p>It will also be great to see the guys from Twillio, PayPal and SoundCloud.  All these companies are highly innovative and doing some great things with technology.</p>
<p>As I have been drawn to the <a href="http://clojure.org/" target="_blank" rel="external">Clojure</a> language for the last few years it will be great to hear from <a href="http://hackference.co.uk/speakers#joe-littlejohn" target="_blank" rel="external">Joe Littlejohn</a> and <a href="http://hackference.co.uk/speakers#mark-godfrey" target="_blank" rel="external">Mark Godfrey</a> on why we should be looking at Clojure and what developers we can gain from the language.  I am intrigued as to how they have been using Clojure at Nokia.</p>
<h1 id="Hackference:_The_Hackathon">Hackference: The Hackathon</h1><img src="http://3.bp.blogspot.com/-ih47wFTJQsE/UgOq-7kfD4I/AAAAAAAAKy4/ihETCQQwppY/s1600/Hackference_-_A_developer_s_dream.png" class="img-topic"> 
<p><a href="http://en.wikipedia.org/wiki/Hackathon" target="_blank" rel="external">Hackathons</a> are a great chance to focus on learning new things and improving your skills.  With a host of companies there to help you try out their API’s and also win prizes for your app then it truly is a weekend for fun and profit.</p>
<p>I’ll also be running workshops on <a href="http://git-scm.com/" target="_blank" rel="external">Git</a>, <a href="http://github.com/" target="_blank" rel="external">Github</a> and <a href="https://www.heroku.com/" target="_blank" rel="external">Heroku</a>, to help you develop and deploy your applications collaboratively.  I’ll be on hand to help out teams throughout the hackathon as well as writing some apps in Clojure and JavaScript.</p>
<p>An of course its just great to have some time to scratch that itch you have with the stuff you wanted to create but never had time.  With a weekend to focus you can really get in the zone and get creative.</p>
<h1 id="Hackference:_The_City">Hackference: The City</h1><img src="http://1.bp.blogspot.com/-nqSDbM7BxbU/UgOmWTPGl2I/AAAAAAAAKyc/e5eXoqVxLGQ/s1600/hackference-hotel-rotunda.png" class="img-topic"> 
<p>Birmingham is so easy to get to from most cities, that its a shame I havent taken the time to visit more often.  There are some great hotels to stay at, such at the <a href="http://www.stayingcool.com/birmingham.aspx" target="_blank" rel="external">Rotunda</a> with great views of the city.</p>
<p>If you are looking for culture then there are some world class galleries and museums.  I like the sound of the <a href="http://visitbirmingham.com/explore-birmingham/places/thinktank-incorporating-the-giant-screen/" target="_blank" rel="external">Thinktank Birmingham Science Museu</a>, a ten themed galleries of immense, inspiring, interactive fun with everything from full size locomotives and aircraft to intestines and taste buds.  Another pleasure would be the planetarium which presents breathtaking images on a 360° domed ceiling.</p>
<p>You can see yourself on TV at <a href="http://visitbirmingham.com/explore-birmingham/places/bbc-birmingham-public-space/" target="_blank" rel="external">BBC Birmingham’s Public Space</a> at The Mailbox or go on a tour of the BBC studios.  For the indulgent there is also the <a href="http://visitbirmingham.com/explore-birmingham/places/cadbury-world/" target="_blank" rel="external">Cadbury World</a>, a bit like Willy Wonka’s chocolate factory in real life :)</p>
<p>So there is a <a href="http://visitbirmingham.com/what-to-do/attractions/" target="_blank" rel="external">whole range of things to do</a> for you or if you want to entertain your family whist you hack.</p>
<h1 id="Hackference:_Register">Hackference: Register</h1><p>Talk a look at the conference <a href="http://hackference.co.uk/schedule" target="_blank" rel="external">schedule</a> and <a href="http://hackference.co.uk/speakers" target="_blank" rel="external">speakers list</a>. If you <a href="http://hackference.co.uk/buy" target="_blank" rel="external">sign up</a> before the 9th August you can get the <a href="http://hackference.co.uk/buy" target="_blank" rel="external">early bird discount</a> too.</p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="http://3.bp.blogspot.com/-LBA04JPAvuM/UgOqJL9PEoI/AAAAAAAAKys/Kv2DM3kmyWg/s1600/hackference_logo.png" class="img-thumbnail"> 
<p><a href="http://hackference.co.uk/">Hackference Birmingham</a> at the end of August is a great opportunity to discover new ideas from polyglot developers at a one day conference, then try those ideas out over a weekend hackathon. </p>]]>
    
    </summary>
    
      <category term="hackference" scheme="http://jr0cket.co.uk/tags/hackference/"/>
    
      <category term="events" scheme="http://jr0cket.co.uk/categories/events/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Getting to Grips With Git - Understanding the Git & Github Workflow]]></title>
    <link href="http://jr0cket.co.uk/2013/08/getting-to-grips-with-git-understanding-the-simple-workflow.html.html"/>
    <id>http://jr0cket.co.uk/2013/08/getting-to-grips-with-git-understanding-the-simple-workflow.html.html</id>
    <published>2013-08-01T10:09:00.000Z</published>
    <updated>2015-03-18T15:08:46.208Z</updated>
    <content type="html"><![CDATA[<img src="http://git-scm.com/images/logo.png" class="img-thumbnail">
<p>Learning to use Git to version your development projects can seem a little strange at first, although once you have a few basics it quickly becomes a natural and fast tool to use.</p>
<p>Here are some of the basics of the Git and Github workflow in word and pictures, created from my mission to teach the world (starting with London) to use Git effectively. &nbsp;If you just want an overview of the basic commands, see my <a href="http://jr0cket.github.io/developer-guides/git-quickstart-guide.pdf" target="_blank" rel="external">Git Quickstart Guide</a>.</p>
<a id="more"></a>
<h1 id="Understanding_the_basic_Git_workflow">Understanding the basic Git workflow</h1><p>Git has several stages in the basic workflow:</p>
<p><code>Working copy</code>: the project source code and configurations</p>
<p><code>Staging</code>: add the changes that you want to make a part of the next commit</p>
<p><code>Local repository</code>: the full history of your projects as a series of commits, contained within a folder called <code>.git</code> in the root folder of your project.</p>
<h1 id="Why_have_a_staging_area?">Why have a staging area?</h1><p>The staging area allows you a little more room to consider what the next commit should contain. &nbsp;Its much simpler to change your mind about what will go into the commit by un-staging changes. &nbsp;You also do not have to be concerned about re-writing commit history.</p>
<p>Once you have made a commit, then you should avoid making changes to that commit. &nbsp;Its usually better to fix anything in another commit than to change the first one. </p>
<p>Once you share a commit with others, eg. via Github or CI server, then you should consult with everyone concerned before making a change to a commit.</p>
<h1 id="A_Git_and_Github_workflow">A Git and Github workflow</h1><p>You can version changes for your project to your local repository as often as you need without conflict as you are the only collaborator. &nbsp;This also means you can work off-line too.</p>
<p>When you want to collaborate on projects you can set up a shared repository that you work on as a team, pushing the commits you made in your local repository to the shared repository.</p>
<p>The most well known example of shared repositories is Github.</p>
<img src="http://1.bp.blogspot.com/-n8gwrM5Bf04/UfosDLuuDUI/AAAAAAAAKwg/2aE3V0NDk-g/s1600/git-and-github-workflow.png" class="img-code">
<p>In the example, John has started work on a project on his laptop and created a local repository using the command <code>git init</code>.</p>
<p>John then stages changes using <code>git add filename</code> or <code>git add .</code> if he wants to add everything.  When John is happy with the changes he has staged and has though of a good commit message, then he creates a new commit with the command <code>git commit -m &quot;meaningful commit message&quot;</code>.</p>
<p>John now wants to share code with others, so visits the <a href="https://github.com" target="_blank" rel="external">Github.com</a> website and creates a new repository (having first created an account and added his public key to his Github account).</p>
<p>John then tells his local repository about the new Github repository using the command <code>git remote add remote-alias-name github-repo-url</code> - where <code>remote-alias-name</code> is an alias used to refer to the remote repo and <code>git-repo-url</code> is the web address of the Github repository as stated on its github page.</p>
<p>John can then push his changes contained within the local repository to the Github repository using the command <code>git push remote branch</code> - where <code>remote</code> is the alias for the github repository URL and <code>branch</code> is <code>master</code> as no other branches have been created at this point. </p>
<h2 id="Collaborating_via_Github">Collaborating via Github</h2><p>Carlos sees this new repository created by John on Github and decides to get a copy by using the command <code>git clone remote-repo-url</code> - where <code>remote-repo-url</code> is the web address of the Github repository as stated on its github page.</p>
<p>By cloning the Github repository made by John, Carlos has a new local repository and can see the full history of commits. &nbsp;Carlos can edit the working copy as well as stage and commit his own changes to this new repository. &nbsp;Carlos cannot push changes back to the repository on Github though, so if he did git push it would fail. &nbsp;To update the github repository, John would need to add Carlos as a contributor first.</p>
<p>Sam has also seen the Github repository that John created and rather than take a copy using git clone, she has used the Github website to create a fork. &nbsp;A fork is an exact copy of a Github repository, in this case Sam now has an exact copy of Johns repo but under her Github account and fully accessible by her.</p>
<p>Sam gets a copy of her forked repo on her laptop by using the command <code>git clone remote-repo-url</code>. </p>
<p>Now Sam can edit the code in her working copy and commit those changes to her local repository.  She can also push those committed changes to her forked repository on Github.</p>
<p>If Sam wants to share her new commits with John, then from the web page of her forked Github repository she can <a href="https://help.github.com/articles/using-pull-requests" target="_blank" rel="external">create a pull request</a>. &nbsp;This sends a message to John to let him know that there are changes in the forked repository that he may want to pull into his Github repository.</p>
<p>Should John accept the pull request made by Sam, then he will also need to update his local repository using the command <code>git pull remote branch</code></p>
<p>Once you are sharing changes thorugh remote repositories, you need to make sure you keep your local repositories up to date with other peoples changes that are pulled into those remote repositories, otherwise it may prevent you from pushing your changes…</p>
<h1 id="In_Summary">In Summary</h1><p>Using Git and Github may feel a little strange at first, but once you have some practice and if you keep your workflow simple then using Git will become very natural and fast.</p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="http://git-scm.com/images/logo.png" class="img-thumbnail">
<p>Learning to use Git to version your development projects can seem a little strange at first, although once you have a few basics it quickly becomes a natural and fast tool to use.</p>
<p>Here are some of the basics of the Git and Github workflow in word and pictures, created from my mission to teach the world (starting with London) to use Git effectively. &nbsp;If you just want an overview of the basic commands, see my <a href="http://jr0cket.github.io/developer-guides/git-quickstart-guide.pdf">Git Quickstart Guide</a>.</p>]]>
    
    </summary>
    
      <category term="git" scheme="http://jr0cket.co.uk/tags/git/"/>
    
      <category term="github" scheme="http://jr0cket.co.uk/tags/github/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hacked - a Judges View of 500 Developers Creativity in London]]></title>
    <link href="http://jr0cket.co.uk/2013/07/hackedio-500-developers-getting.html.html"/>
    <id>http://jr0cket.co.uk/2013/07/hackedio-500-developers-getting.html.html</id>
    <published>2013-07-26T16:40:00.000Z</published>
    <updated>2015-03-18T15:08:46.208Z</updated>
    <content type="html"><![CDATA[<p>As a judge at <a href="http://hacked.io/" target="_blank" rel="external">Hacked</a> I was amazed by all the developer talent concentrated into one weekend Hackathon.  There were lots of great ideas realised into apps in such a short space of time.  With 500 developer making up <a href="https://www.hackerleague.org/hackathons/hacked/hacks" target="_blank" rel="external">74 teams</a>, it was a challenge to pick out winners. </p>
<p>As Heroku were a major sponsor we decided to give out <a href="http://hacked.io/almanac/heroku/" target="_blank" rel="external">prizes</a> to 5 teams, even then it was still a challenge to choose only 5.  We also gave out lots of swag and the t-shirts and moleskin notebooks went down a storm.</p>
<p>With so many diverse creations on show Hacked really lived up to its tagline: Learn ,Build, Share.</p>
<h1 id="Hacked-io:_Learn">Hacked.io: Learn</h1><p>I ran a workshop introducing <a href="https://go.heroku.com/" target="_blank" rel="external">Heroku</a>, a service to allow developers to deploy there apps quickly without worrying about complex scripts or managing servers.  There were lots of questions about Heroku, <a href="https://postgres.heroku.com/" target="_blank" rel="external">Postgres</a> database on demand and other <a href="https://addons.heroku.com/" target="_blank" rel="external">addons</a>.  It was great to see enthusiasm from developers wanting to make the most out of the cloud.</p>
<p>I also ran a workshop on Git, so everyone could put their code up on Github or deploy on Heroku.  As Heroku uses Git for code deployments, then once you are comfortable with basics of Git, deploying in this way seems very natural.</p>
<p><a href="https://twitter.com/neilmiddleton" target="_blank" rel="external">@neilmiddleton</a> also gave a workshop on the new Heroku API, allowing you to create apps, scale them and monitor them from your own applications.</p>
<p>The BBC, Nokia and lots of other sponsors also gave great talks and help with their APIs.  The BBC had a whole bank of TVs available to hack real TV apps on.</p>
<h1 id="Hacked-io:_Build">Hacked.io: Build</h1><p>Everyone pretty quickly got into teams to start hacking.  There were physical hacks, api hacks, music hacks, TV hacks and some really bizzar hacks going on all through the weekend.</p>
<p>When not running workshops, I interrupted teams hacking away to find out what they were up to.</p>
<p>The Heroku team had a few spare minutes free to build an app too.  Using the Heroku API, we built an app that would show a snippet of your logs when ever someone connected to one of your running apps, showing the location of the users IP on a map.</p>
<h1 id="Hacked-io:_Share">Hacked.io: Share</h1><p>It was great to get so many teams sharing their amazing creations.  The diversity of the crowd produced a feast for the eyes and ears.  I’ve only captured a few of my own highlights in this post.</p>
<h1 id="Getting_Organised">Getting Organised</h1><p>One of the apps I liked the most was the <strong>Event board for organiser</strong> by <a href="https://twitter.com/EChesters" target="_blank" rel="external">@EChesters</a> as running developer events on the scale of Hacked is a big challenge.  The Hacked team did very well, although having a good app to managing all aspects of an event in real time would help any team run a event more smoothly.  I especially liked the real time alerts mobile app.  Lets hope this team takes the app further.</p>
<img src="http://3.bp.blogspot.com/-SBMbodpj9fE/UfKrfRx_7rI/AAAAAAAAKwA/f4muQ-9xtfw/s1600/hacked-machines-3d-printing.png" class="img-topic">
<h1 id="Rise_of_the_Machines">Rise of the Machines</h1><p>There were many hardware hacks at the event, especially with <a href="http://nodecopter.com/" target="_blank" rel="external">node copters</a>, micro node copters, nano node copters and copters controlled by Playstation Move controllers.  My favourite amongst these was Wild thumper, a node copter that could follow a remote controlled car just by attaching a small ring of lights to the car, that was really cool.  <a href="http://www.arduino.cc/" target="_blank" rel="external">Arduino</a> powered controller for remote controlled car, with <a href="http://www.raspberrypi.org/" target="_blank" rel="external">Raspberry Pi</a> camera driving the copter.</p>
<h1 id="The_world_needs_more_cuteness">The world needs more cuteness</h1><p>There were cute hacks like the <a href="http://tiny.cc/bunzorcam" target="_blank" rel="external">Bunzor Cam</a> by <a href="http://www.twitter.com/danielknell" target="_blank" rel="external">@danielknell</a>, <a href="http://www.twitter.com/mfujica" target="_blank" rel="external">@mfujica</a>, <a href="http://www.twitter.com/motoko_k" target="_blank" rel="external">@motoko_k</a> and fudge the rabbit, because there are just not enough cute bunnies on the web.</p>
<p>Other cute hack involved a knitted darlek and a chrome extension that changed any pictures on a web page to that of a cat… great fun if you do a Google image search for dogs and watch them all change to different cats!</p>
<img src="http://1.bp.blogspot.com/-F6AIhd1p1xY/UfKozY_9lKI/AAAAAAAAKvk/WjFnAnVpZ64/s1600/philps-lightbox-wires.png" class="img-topic">
<h1 id="Let_there_be_light">Let there be light</h1><p>It seems the Hue Light boxes from Philips caught a fair bit of attention.  These were a 3 bulb array that you could connect to over WiFi or Ethernet and control the colours and sequencing of the lights.  The most useful hack for me was the BusBulb.  This hack tapped into Transport for London open data on transport and gave you a lighting countdown to when you needed to leave for your bus.  This would save me a lot of checking of my phone for the time and save batter.</p>
<h1 id="The_Hacked-io_Hackathon_Winners">The Hacked.io Hackathon Winners</h1><p>It was tough deciding on winners when there were so many great submissions to choose from.  I spent time finding out what the teams were building as its hard to get a true picture just from the 90 second demo at the end.</p>
<p>There was one app that all the judges quickly agreed was the winner, FlashMed.  This app was quite simple but provided a very important service, managing a medication regime for the elderly.  Most elderly people have to take a range of medicines and these are all colour coded to help them.  However its easy to forget the schedule you need to take.  So the app connects to a Phillips Hue lightbox and displays the colour of the medication at the time you are supposed to take it.  Once you have taken it then the light will switch off.  If you fall asleep then the light shows which medications you need to catch up on.  Simple and effective</p>
<p>The peoples choice went to the crazy kids who won two giant lego Starwars kits, the death star and millenium falcon.  That should keep them busy next weekend.</p>
<h1 id="The_Heroku_Winners">The Heroku Winners</h1><img src="http://2.bp.blogspot.com/-Aa5-sCTus4w/UfKpnTsSMlI/AAAAAAAAKvw/sIbH0AMTxy4/s1600/hacked-prizes-heroku-excitement.png" class="img-topic"> 
<h1 id="API_Unifier"><a href="https://www.hackerleague.org/hackathons/hacked/hacks/heroku-api-using-restapiunifier" target="_blank" rel="external">API Unifier</a></h1><p><a href="https://twitter.com/theNeomatrix369" target="_blank" rel="external">@theNeomatrix369</a> created a wrapper around the Heroku API to help Java developers create cool applications easily with the Heroku API.</p>
<p>The API Unifier is a lightweight Java library that brings together a collection of RESTful APIs under one roof!  This simplifies the use and maintenance of dependencies on external APIs. This library creates an abstraction layer between your application and APIs from disparate vendors to increase cohesion, reduce coupling.<div></div></p>
<h1 id="MusicMatch-io"><a href="https://www.hackerleague.org/hackathons/hacked/hacks/musicmatch" target="_blank" rel="external">MusicMatch.io</a></h1><p>MusicMatch is a social music competition where you need to guess the correct 10 second clip to build up points to get you up the leader board.  The quicker you answer the more points you get, but get the answer wrong and you and you lose points.</p>
<p>The application was developed with Nodejs and uses Nokia music API to get the music tracks.  Redis (Heroku addon) is used to manage the leader board and the app was deployed on Heroku.</p>
<h1 id="Boomerang"><a href="https://www.hackerleague.org/hackathons/hacked/hacks/boomerang" target="_blank" rel="external">Boomerang</a></h1><p>This app is a really fun idea and adds a different dimension to the experience at an event.  With Boomerang you take a picture and throw it out there and see what picture you get back in return.  You never get your own picture back, so you get to experience a little of what everyone else at an event experiences.</p>
<p>The team built this as a native android application with a back-end service running on Heroku to manage which images you received.  The app could also be passed to your friends or strangers at the event if they have a NFC enabled phone.</p>
<h1 id="99hours">99hours</h1><p>This app helps people develop their ideas and get thought the barriers to turn those ideas into apps.  99hours connects people with those ideas  to those who can help them out.  The goal is to create a highly collaborative place to nurture ideas into projects.  This collaboration is realised in features such as feedback from the community on ideas by up-voting, or providing a variation on the kick-starter model and allowing direct donations to a project you want to support.</p>
<h1 id="Pigeon">Pigeon</h1><p>Tom Morris created an app called pidgeon as a kind of location brokarage service, a personal api for your location.  Deployed on Heroku, this app has a simple API to post location information into forsquare to give real time updates of where you are.  To display map information on the website, the hack was written using Rails and used MapBox, OpenStreetmap and MogoLab Heroku addon.  Sometimes you want to hide your location, so the app also had rules to hide your location when you are at home or other personal locattions.  To test the app, Tom also used Macosx controlPlane to simulate different networks.</p>
<h1 id="The_Next_Hackathon">The Next Hackathon</h1><p>It does take a few days for the adreneline and lack of sleep to balance themselves out after a Hackathon.  Lucklly then there is a few weeks before Leeds Hack.  Leeds hack is great, especially if you want to get your children involved in coding.</p>
<p>I’ll be at Hackference Birmingham next, the first event of its kind in Birmingham, so it should be a great event.  I’ll be doing workshops around Heroku &amp; Git and it seems there is lots of interest around Clojure, functional programming on the JVM. </p>
<img src="http://si0.twimg.com/profile_images/3687034314/640a734aa1b7d887be40fedac191679f_normal.jpeg" class="img-topic">
<blockquote><p>Mike Elsmore - I cordially invite everyone who went to <a href="https://twitter.com/HACKEDio" target="_blank" rel="external">@HACKEDio</a> to come to <a href="https://twitter.com/hackferencebrum" target="_blank" rel="external">@hackferencebrum</a> and help me make something awesome <a href="http://t.co/8lvxK8Qa9e" title="http://hackference.co.uk" target="_blank" rel="external">http://hackference.co.uk</a></p>
<footer><strong>ukmadlz</strong><cite><a href="https://twitter.com/ukmadlz/status/359011375110045696" target="_blank" rel="external">twitter.com/ukmadlz/status/359011375110045696</a></cite></footer></blockquote>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>As a judge at <a href="http://hacked.io/" target="_blank" rel="external">Hacked</a> I was amazed by all the developer talent concentrated]]>
    </summary>
    
      <category term="hackathon" scheme="http://jr0cket.co.uk/tags/hackathon/"/>
    
      <category term="events" scheme="http://jr0cket.co.uk/categories/events/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Designing Your Own Commit Graph With Git]]></title>
    <link href="http://jr0cket.co.uk/2013/06/designing-your-own-commit-graph-with-git.html.html"/>
    <id>http://jr0cket.co.uk/2013/06/designing-your-own-commit-graph-with-git.html.html</id>
    <published>2013-06-22T18:40:00.000Z</published>
    <updated>2015-03-18T15:08:46.204Z</updated>
    <content type="html"><![CDATA[<img src="http://git-scm.com/images/logo.png" class="img-thumbnail">
<p>Git log is a very powerful tool for tracking all your changes, even across different branches and multiple repositories.  However <span style="font-family: Courier New, Courier, monospace;">git log</span> default output is verbose and not a great way to visualise the commit history.</p>
<p>Fortunately Git is very customisable, both for humans and tools.  This article covers one way to creating your own customised output for git log that helps you work with branches and track changes through local and remote (eg. Github) repositories.</p>
<a id="more"></a>
<h1 id="Using_git_log_options">Using git log options</h1><p>In a <a href="http://blog.jr0cket.co.uk/2013/01/git-log-makes-multiple-repos-easier-to.html" target="_blank" rel="external">previous article</a> I covered the different git log options that could be combined into a good visualisation:</p>
<pre><code><span class="comment">git</span> <span class="comment">log</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">graph</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">decorate</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">relative</span><span class="literal">-</span><span class="comment">date</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">oneline</span>
</code></pre><p>This is a very simple way to configure the log, but there is a lot more you can do to tweak this.</p>
<h1 id="Hacking_the_pretty_format">Hacking the pretty format</h1><p>For any git output you can use the <code>--pretty=format:</code> option to define your own visualisation of the information.  There are some built in formats you can use with this option or with a bit of googling its not to hard to create your own specific layouts and colours.</p>
<p>Lets look at an example git log configuration:</p>
<pre><code>git log --graph --date=relative 
<span class="label">        --pretty=format:</span>'<span class="var_expand">%Cred%</span>h<span class="var_expand">%Creset -%</span>C(yellow)<span class="var_expand">%d%</span>Creset <span class="var_expand">%s %</span>Cgreen(<span class="var_expand">%cr)%</span>Creset'
</code></pre><p>Show the git log graph with date relative times to the last commit made.  Commit numbers are in red, branches and remote repositories are in yellow, commits in white and relative commit times in green.</p>
<img src="http://4.bp.blogspot.com/-8qgVMXGUang/UcXd207WTwI/AAAAAAAAJyg/FXf3u6vSi4c/s1600/git-log-pretty-one.png" class="img-code">
<p>Lets add commit author details to the configuration too:</p>
<pre><code>git log --graph --<span class="built_in">date</span>=relative 
        --pretty=<span class="built_in">format</span>:'<span class="envvar">%Cred%</span>h%Creset -<span class="envvar">%C(yellow)%</span>d%Creset %s <span class="envvar">%Cgreen(%</span>cr) %C(bold blue)&amp;lt;<span class="envvar">%an&amp;gt;%</span>Creset'
</code></pre><p>The author information is added to the end of each line in blue.</p>
<img src="http://2.bp.blogspot.com/-k3GFOHCIE3Y/UcXeFBv-ZaI/AAAAAAAAJyo/PV1fyHbgbzU/s1600/git-log-pretty-two.png" class="img-code">
<p>This example shows you the full history of your git log </p>
<pre><code>git log --graph --full-history --all --<span class="built_in">color</span> --<span class="built_in">date</span>=short 
        --pretty=<span class="built_in">format</span>:'<span class="envvar">%Cred%</span>x09%h <span class="envvar">%Creset%</span>ad<span class="envvar">%Cblue%</span>d %Creset %s <span class="envvar">%C(bold)(%</span>an)%Creset'
</code></pre><p>A simpler git log in graph form </p>
<pre><code>git log --graph 
<span class="label">        --pretty=format:</span>'<span class="var_expand">%Cred%</span>h<span class="var_expand">%Creset - %</span>C(yellow)<span class="var_expand">%d%</span>Creset <span class="var_expand">%s %</span>Cgreen<span class="var_expand">%cr %</span>C(cyan)[<span class="var_expand">%aN]%</span>Creset'
</code></pre><p>You can also create a simple commit graph by date, without showing the numbers.  This is useful if you are just going off the branches or tags. </p>
<pre><code>git log --graph --<span class="built_in">date</span>=short
        --pretty=<span class="built_in">format</span>:'<span class="envvar">%Cgreen%</span><span class="built_in">cd</span>%Creset - <span class="envvar">%C(yellow)%</span>d%Creset %s <span class="envvar">%C(cyan)[%</span>aN]%Creset' 
</code></pre><h1 id="Adding_Shortcuts_for_git_log_options">Adding Shortcuts for git log options</h1><p>You can add these commands and many more to your git config file as aliases to save your typing them all out and having to remember them too.  You can use git config or add them directly to your <code>~/.gitconfig</code> file as follows:</p>
<script src="//gist.github.com/4649149.js"></script>
<h1 id="Understanding_the_Git_Pretty_Format_codes">Understanding the Git Pretty Format codes</h1><p>There is a complete <a href="http://opensource.apple.com/source/Git/Git-19/src/git-htmldocs/pretty-formats.txt" target="_blank" rel="external">guide to git</a> formats and codes, however these are probably the main codes you need to know</p>
<ul>
<li><p>output text in the colour colour-name<br>  %Ccolour-name </p>
</li>
<li><p>reset the output text colour<br>  %Creset</p>
</li>
<li><p>commit number / hash (in short form due to the <code>--abbrev-commit</code>option)<br>  %h</p>
</li>
<li><p>repository (—decorate)<br>  %d</p>
</li>
<li><p>commit message<br>  %s</p>
</li>
<li><p>time stamp / commit relative<br>  %cr</p>
</li>
<li><p>author / account name<br>  %an</p>
</li>
</ul>
<h1 id="Abbreviating_Commit_numbers">Abbreviating Commit numbers</h1><p>Since git version 1.7.6, git config has gained a <code>log.abbrevCommit</code> option which always abreviate commit numbers in any git output.  </p>
<pre><code>git config <span class="subst">--</span><span class="built_in">global</span> <span class="keyword">log</span><span class="built_in">.</span>abbrevCommit <span class="literal">true</span>
</code></pre><p>If you are using the <code>--oneline</code> option on git log, then the commit number is abreviated regardless of this setting.</p>
<h1 id="In_Summary">In Summary</h1><p>Have fun configuring your git log as if you use git on the command line you will be working with the log quite often.  However, dont spend all your time tweaking the format of the log, you still need to write some code for your apps :)</p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="http://git-scm.com/images/logo.png" class="img-thumbnail">
<p>Git log is a very powerful tool for tracking all your changes, even across different branches and multiple repositories.  However <span style="font-family: Courier New, Courier, monospace;">git log</span> default output is verbose and not a great way to visualise the commit history.</p>
<p>Fortunately Git is very customisable, both for humans and tools.  This article covers one way to creating your own customised output for git log that helps you work with branches and track changes through local and remote (eg. Github) repositories.</p>]]>
    
    </summary>
    
      <category term="git" scheme="http://jr0cket.co.uk/tags/git/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hacking for Good at the Accessibility Hackathon]]></title>
    <link href="http://jr0cket.co.uk/2013/06/hacking-for-good-at-accessibility.html.html"/>
    <id>http://jr0cket.co.uk/2013/06/hacking-for-good-at-accessibility.html.html</id>
    <published>2013-06-10T15:32:00.000Z</published>
    <updated>2015-03-18T15:08:46.208Z</updated>
    <content type="html"><![CDATA[<img src="http://2.bp.blogspot.com/-wGEV9bfpLx4/UcVjxp_edtI/AAAAAAAAJxc/EmQZVqvM2Eg/s1600/accessibility_collage_2.jpg" class="img-thumbnail"> 
<p>Its not often you get a chance to make a difference the way people live their lives.  As my role of judge at the recent Accessibility hackathon by Barclays I met lots of teams spending their weekend doing just that.</p>
<p>The hackathon started with an amazing set of stories from the charities involved.  These stories gave the teams a great insight into the challenges people in these communities faced.  The presence of the the accessibility community through the hackathon helped teams stay focused and create relevant apps that would make a significant difference.</p>
<h1 id="The_Charities">The Charities</h1><img src="http://2.bp.blogspot.com/-N_FfhpLYUOg/UcVpkH-nddI/AAAAAAAAJyA/tDGOs5J3-Vs/s1600/accessibility-hack-charities-banner.png" class="img-code"> 
<h1 id="Judging_the_Hackathon">Judging the Hackathon</h1><img src="http://3.bp.blogspot.com/-ep3jXQK20sQ/UcVwLHOAwRI/AAAAAAAAJyQ/Gd0WHl0Bseg/s1600/mm-judging.jpg" class="img-topic"> 
<p>With all the great ideas generated by the teams taking part, it made the judging quite tough.  Although not as tough as hacking an app together in less that one weekend :)</p>
<p>At the end of the hackathon, each team had 3 minutes to present there app, which is really no time at all.  However, as a judge I had been going round the teams over the weekend to get to know them and find out what they were doing.  This also gave me insight into how they had progress over the weekend.  One of the things we were looking for was if the team could carry on developing there apps afterwards, so their capability and cohesiveness played a factor in our final decision.</p>
<p>It was vital to have members of the accessibility community on the <a href="http://accessibilityhack.com/#judges" target="_blank" rel="external">judging panel</a> to be able to judge the impact of each app presented.  There were several judges who had physical challenges who related closely to the value of each teams app.</p>
<h1 id="Accessibility_Apps_that_made_a_difference">Accessibility Apps that made a difference</h1><p>With 19 teams to choose from, the judges had a challenge on their hands to come up with 3 winners.  At one point we asked if there could be a couple more prizes.  The apps that really stood out for me though were:</p>
<ul>
<li><strong>Soundbyte</strong> - filtering out noise for different types of hearing loss </li>
<li><strong>Visual-eyes</strong> - creating a very detailed and highly accurate description of the scene in a pictue  (fantastic concept)</li>
<li><strong>Gesture Touch</strong> - controlling HTML5 apps and games simply</li>
<li><strong>Elephants, ears for everyone</strong> -  transcripting conversations in real time</li>
<li><strong>Real assistance</strong> - guiding peoples journeys and assisting the last meters</li>
<li><strong>Say what you mean</strong> - navigate the web by voice</li>
<li><strong>MemoryBox</strong> - helping those suffering dementia to recall memories easily</li>
</ul>
<h1 id="Accessibility_Apps_in_detail">Accessibility Apps in detail</h1><p>What follows is a summary of what I thought of some of the apps presents.</p>
<h2 id="Soundbyte">Soundbyte</h2><p>I really liked the concept this team opened wiht “We have all experienced sound loss”, it helped make the project very relevant.  Also the way the team got everyone to stand up and clap to simulate the experience was very striking.</p>
<p>The project itself was great.  Having a smart phone as a hearing aid takes away some of the stigma around the hearing impaired. Although phones can cancel out background noise in phone calls, this Android application can eat the sounds that you don’t need.  As the app cancels out the background noise in near real time, you can then listen to only that which is valuable, based on filters defined for different types of hearing loss.  The team had already created a number of options to help you find out the best sounds based on a persons hearing ability and situation.</p>
<p>This was a very striking project and is high on the list as it also has implications for a wider audience, not just those with hearing loss.  As the app was available on the Android Play store in about an hour after they presented, the project seemed very sustainable.</p>
<h2 id="Visual-eyes">Visual-eyes</h2><p>This team only came together at the hackathon and found a vision inspired from talks given by the charities.  There vision was simple and very relevant to the theme of the hackathon.  Photos are everywhere and people love to share them with family and friends.  However, its not possible to share photos in an easy way with those who are visually impaired  </p>
<p>Their app, Visual Eyes, returns a meningful description of any picture provided.  I liked that the team used random images from Facebook as they are representative of the images people share.  As the images were random, then you saw how credible the software was at describing the images.  I was very struck how detailed the descriptions could be, including if people were wearing sunglasses!</p>
<p>This app was very impressive and therefore high on my list due to the detail of description of each picture.  The team had already integrated it their app with Facebook and there were many other integration possibilities.  I was very confident this team would carry on developing their app.</p>
<p>The team were looking to open source the whole processing so that costs from 3rd party services are taken out of the process.  The team are also considering the use of tags to help make the description even more relevant.</p>
<h2 id="Real_Assistance">Real Assistance</h2><p>This app stood out immediately.  The ability to record your favourite journeys and play them back to help you find your way seemed like a real win for those with vision issues. It would give those people a lot more confidence when they are navigate to their favourite places.</p>
<p>This app could also be useful for a wider audience, for example to help navigate to a place in a new location or a foreign country. </p>
<p>This app really stood out when the final part of the app was shown, the assisted guidance for the last few meters. To be able to call someone who can direct you using the camera on your mobile device and be guided in real time was a great idea.  It can be a challenge finding entrances and then navigating steps and doors, so this is a great way to deal with that issue too.</p>
<p>The app uses existing phone technologies and WebRTC so the team seemed to have a fully working app come time for the demo.</p>
<p>The team had an eye on future features, such as pre-program points of interest (Banks, restaurants).  This demonstrated that they are willing to take this app further.</p>
<h2 id="Gesture_Touch">Gesture Touch</h2><p>The team created a way of helping those with physical challenges to interact with HTML5 based apps, especially games.  The team created different modes and controls to help users find the best way of interacting.</p>
<p>I liked that the team had simulated using their app using a device that restricted movements in the hand and what they produced looked quite effective.</p>
<p>This team also had future plans for their apps, including integrating voice recognition, so it seems that they will carry on with their development efforts.</p>
<h2 id="Elephants_-_ears_for_everyone">Elephants - ears for everyone</h2><p>The team develop a real time transcription of conversations taking place, aimed at those with hearing disabilities.  They had tried to get hold of some Google Class equipment so that they could have had real time sub-titles when talking to other people.</p>
<p>The team instead created a simple and clean mobile app, allowing you to open up a “channel” in which two or more people could talk and the text of their conversation would be displayed in a similar form to modern text apps.</p>
<p>The team did a great demo, although there was some doubt about how effective this would be if there was background noise.  The team seemed keen to keep on with the development if they got positive feedback, so if they can also include filtering of the background noise I believe they have a valuable app.</p>
<h2 id="Say_what_you_mean">Say what you mean</h2><p>I appreciated that the team invested time in the experience of being blind and accessing the web.  That they discussed ideas with the people from RNIB helped them identify a real need, that the key desire people had was to go faster.  Screen readers linearised the experiences when people acutally wanted a content driven experiences</p>
<p>The app had a very simple user interface, press a key and say a word.  You are then sent to a link that matches that word.  This is acceptable for websites your are familiar with.</p>
<p>For other sites you don’t know well, then its used like a search that returns the links at the start of the page so you don’t have to go hunting for them.</p>
<p>As their app works as a browser extension, then it works for all web sites without specific configuration.</p>
<p>It was great that the team have considered future functionality, like related terms and filtering search criteria.  I can see this app being quite useful to many.</p>
<h1 id="Teams_that_had_a_great_idea_but_had_not_gone_far_enough_with_the_development">Teams that had a great idea but had not gone far enough with the development</h1><h2 id="Food_for_though">Food for though</h2><p>The team had a great presentation and I really appreciated the use of using Alice as a persona to help us understand who the audience was the were trying to reach.</p>
<p>The concern they were talking was memmory loss which affects a great number of people.  Without a good memory your experiences from a human perspective is about having your independence.</p>
<p>The team continued to tell the story around the persona.  Alice does not always eat properly, because she forgets if she hasnt eaten.  The app the team developed reminds Alice of key meals, helps her select from different meals and talks her through the making of the meal she has selected.  The meals can be put together by family members, doctors or nutritionist, to give more diversity to Alice’s diet.</p>
<p>Although this was a great concept, I felt that the team had not developed the application far enough in the time they had.  There were unanswered questions and I hope that the team are able to get more of the app developed.</p>
<h2 id="MemoryBox">MemoryBox</h2><p>The team chose a really powerful sounding topic, remenicance therapy.  This was a great technique for helping family and friends to engage with those with dementia   By creating a wide range of media to form a collection that would trigger memories about events and people, it would help those with the condition feel more positive and help them relive experiences.</p>
<p>The challenge was to create something that would easily create this experience and be significant improvement on the basic photo collections you can do with many online services.  The app would need to help the supporting family members create these collections easily and relate them to specific memory categories.  An app would also need to help the family members by relating images to each other automatically, I guess in the same way that Amazon relates other products.</p>
<h2 id="Leap_Motion_accessibility_device">Leap Motion accessibility device</h2><p>The sole developer on this personally driven project - his grandmother has difficulties with her hands and finds interaction with computing devices almost impossible.  However, she has a very active mind and the developer wanted a way to help her engage with the Internet which most of us take for granted.</p>
<p>The <a href="http://bit.ly/a11yhack" target="_blank" rel="external">project</a> was quite simple, more like a proof of concept as no real substantial application was created.  The developer used an open source project and a Chrome extension to support the leap motion device.  Whilst this is a great device, I was looking for something specific to be built from this concept. </p>
<p>Although this was a enthusiastic developer that may create some good ideas, he didnt really create much of an app to realise this concept.</p>
<h2 id="Library_accessibility">Library accessibility</h2><p>I liked the idea of improve accessibility of other apps by identifying libraries that apps that are used, then sending in patches to make them have accessibility features.  This was a great effort by one developer, although if its only one developer I was not sure on the impact.  This wasnt an app that made it easier for people to improve libraries or even encourage other developers to get involved.</p>
<p>Its a very worthwhile effort on this sole developers behalf.  I would have like to have seen something that would help lots of other developers do the same thing.</p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="http://2.bp.blogspot.com/-wGEV9bfpLx4/UcVjxp_edtI/AAAAAAAAJxc/EmQZVqvM2Eg/s1600/accessibility_collage_2.jpg" class="img-thumbnail"]]>
    </summary>
    
      <category term="hackathon" scheme="http://jr0cket.co.uk/tags/hackathon/"/>
    
      <category term="events" scheme="http://jr0cket.co.uk/categories/events/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Starting Nodejs Development on Ubuntu]]></title>
    <link href="http://jr0cket.co.uk/2013/03/starting-nodejs-development-on-ubuntu.html.html"/>
    <id>http://jr0cket.co.uk/2013/03/starting-nodejs-development-on-ubuntu.html.html</id>
    <published>2013-03-25T14:37:00.000Z</published>
    <updated>2015-03-18T15:08:46.212Z</updated>
    <content type="html"><![CDATA[<img src="http://4.bp.blogspot.com/-bIFaJwok1vI/UVA3jCluB-I/AAAAAAAAJM0/-rtRbVUQ4no/s1600/Nodejs_logo_light.png" class="img-thumbnail"> 
<p><strong>Outdated: please disregard this article as it is out of date.  I install node in my local filespace on Ubuntu now as its so much easier to manage.  Basicaly I download the Linux binaries and put them in ~/apps/nodejs/current, then add ~/apps/nodejs/current/bin to my path using my shell profile (~/.profile).  This makes using npm -g really easy and does not require the sudo command.</strong></p>
<p><a href="http://nodejs.org/" target="_blank" rel="external">nodejs</a> is a very popular framework for JavaScript development, but as I found out at the <a href="http://www.meetup.com/London-MongoDB-User-Group/events/106898042/" target="_blank" rel="external">MongoDB hackathon</a>  its not that straight forward to get going.  So here is a quick guide to get going with Node.js on <a href="http://www.ubuntu.com" target="_blank" rel="external">Ubuntu</a>.</p>
<a id="more"></a>
<h2 id="Installing_nodejs_on_Ubuntu">Installing nodejs on Ubuntu</h2><p>Whilst there is a nodejs package in Ubuntu, it is version 0.6.9 and therefore quite a way behind the current version on the nodejs website.  So lets do a manual install with the latest version, 0.10.1.</p>
<blockquote>
<p>I since found an <a href="http://slopjong.de/2012/10/31/how-to-install-the-latest-nodejs-in-ubuntu/" target="_blank" rel="external">alternative approach using ppa’s</a> but haven’t tried it out.</p>
</blockquote>
<img src="http://4.bp.blogspot.com/-WY7IRkhNpOU/UVA0m8Ly9cI/AAAAAAAAJMk/Sb1d7i8Mocs/s1600/nodejs-homepage-install.png" class="img-code">
<p>Download the install archive file and extract it.  I chose to do this in a folder called apps in my home folder.  Alternatively you could install it in <code>/opt/</code> or <code>/usr/local</code></p>
<pre><code>mkdir ~/apps/nodejs
tar zvxf node-v0.<span class="number">10.1</span><span class="class">.tar</span><span class="class">.gz</span>
</code></pre><h2 id="Compile_nodejs">Compile nodejs</h2><p>As we are doing a manual install, we need to build nodejs to get the actual executable files.  This requires a C compiler on your laptop which is not installed by default.  So either use the Ubuntu software center to install the package <code>g++</code> or use the command line</p>
<pre><code>sudo apt-<span class="keyword">get</span> install g++
</code></pre><p>To compile nodejs, first we run configuration to check all the neccessary external libraries are there and then we make node:</p>
<pre><code>./configure
<span class="built_in">make</span>
</code></pre><h2 id="Adding_node_to_your_command_path">Adding node to your command path</h2><p>Add the following to your environment in your <code>~/.bashrc</code> file (or <code>.zshrc</code> file if you are running zshell).  I moved the node executable file created by the compile process into a folder called bin, so I knew which was the right file to run.  Then I added that folder to the path.</p>
<pre><code><span class="built_in">export</span> NODEJS_HOME=/home/jr0cket/apps/nodejs/bin
<span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$NODEJS_HOME</span>
</code></pre><p>I am using an environment variable called NODEJS_HOME as a convienience.  You can just add the whole path in one line.</p>
<h2 id="Installing_NPM_-_the_node_package_manager">Installing NPM - the node package manager</h2><img src="http://3.bp.blogspot.com/-JJakqhflSfw/UVA4AMjSKAI/AAAAAAAAJM8/BbLzQXPlQbw/s1600/npm-logo.png" class="img-thumbnail"> 
<p>The node package manager is a great way to get additional libraries into  your node projects.  It does not come with node itself, so you have to install it seperately.  Npm also needs node installed first.</p>
<p>On the node package manager website, the install process is defined as the following command:</p>
<pre><code>curl http<span class="variable">s:</span>//npmjs.org/install.<span class="keyword">sh</span> | <span class="keyword">sh</span>
</code></pre><p>In my manual install (not using Ubuntu packages) then node and npm are created in different folders.  So I put the npm executable file in the same bin folder I created previously for node, which I had already added that to the executable path.</p>
<p>Once npm is installed you can search for and install packages.  If you the <code>-g</code> option for npm install then the modules will be installed globally, otherwise any modules will be local to your project in an npm-modules folder.</p>
<p>Search for modules:</p>
<pre><code><span class="built_in">npm</span> search mongodb <span class="reserved">native</span>
</code></pre><p>Install modules locally or globally:</p>
<pre><code>npm <span class="keyword">install</span> mongodb
npm <span class="keyword">install</span> -g mongodb
</code></pre><h2 id="Testing_out_node_locally">Testing out node locally</h2><p>You can run an interactive session for nodejs (the node REPL) using the command:</p>
<pre><code><span class="keyword">node</span>
</code></pre><p>Then you can just enter JavaScript code and it is evaluated immediately.  You can also run code in files by using the command:</p>
<pre><code><span class="title">node</span> filename.js
</code></pre><p>So lets create a simple “Hello World” app for nodejs in a file called web.js</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express.createServer(express.logger());</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span><span class="params">(request, response)</span> </span>&#123;</span><br><span class="line">  response.send(<span class="string">'Hello World!'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> port = process.env.PORT || <span class="number">5000</span>;</span><br><span class="line">app.listen(port, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Listening on "</span> + port);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>Running this with <code>node web.js</code> we get “Hello World” as the output.</p>
<h2 id="Testing_out_node_on_Heroku">Testing out node on Heroku</h2><p>nodejs is one of the languages supported on Heroku (a cloud service that gives developers a sane way to deploy and scale their apps).  Deploying this nodejs app on Heroku is therefore really trivial.</p>
<p>Heroku can usually work out what to do with many projects, based on the language and framework used.  However, just to be specific lets create a <code>Procfile</code> to tell node which is our entry point to our application.  In  this case we want node to start with the file <code>web.js</code></p>
<pre><code><span class="attribute">web</span>: <span class="string">node web.js</span>
</code></pre><p>Lets version the project with git</p>
<pre><code>git init
git <span class="keyword">add</span> .
git commit -m <span class="string">"Initial project setup"</span>
</code></pre><p>Then we can create an app on Heroku that we can deploy too - you will need an <a href="http://www.heroku.com" target="_blank" rel="external">Heroku account</a> and download the <a href="http://toolbelt.heroku.com" target="_blank" rel="external">Heroku toolbelt</a>.</p>
<pre><code>heroku <span class="built_in">create</span>
</code></pre><p>Heroku adds a new remote to our git project called heroku, so we can push our code to our app.</p>
<p>Now that our project is ready to deploy, lets push all the code to the  heroku application you created using git push, specifying the branch you are pushing (usually <code>master</code>)</p>
<pre><code>git <span class="keyword">push</span> heroku master
</code></pre><p>Now open the node website in a browser using the URL given after the upload of your code via git push, or just the command</p>
<pre><code>heroku <span class="keyword">open</span>
</code></pre><img src="http://1.bp.blogspot.com/-m6l3bhlBB-Q/UVAoqU5PTeI/AAAAAAAAJMU/7OwfgCtBlTY/s1600/nodejs-website-helloworld.png" class="img-code">
<p>There is a nice <a href="https://devcenter.heroku.com/articles/nodejs" target="_blank" rel="external">article about nodejs on heroku</a> with examples of wiring node up to various data sources too.</p>
<h2 id="Learning_JavaScript_nodejs">Learning JavaScript nodejs</h2><p>Now for the fun part, learning how to program in nodejs and seeing how much JavaScript I can remember.  Here are some resource I found in the few hours I spent trying to learn about nodejs.</p>
<p>David Crockford has lots of great resources to help you write great JavaScript: </p>
<ul>
<li><a href="http://javascript.crockford.com/" target="_blank" rel="external">JavaScript website</a></li>
<li><a href="http://www.youtube.com/results?search_query=crockford+on+javascript" target="_blank" rel="external">YouTube videos</a> </li>
<li><a href="http://yuiblog.com/crockford/" target="_blank" rel="external">Crockford on Javascript video series</a></li>
<li><a href="http://nodejs.org/" target="_blank" rel="external">NodeJS</a></li>
<li><a href="https://npmjs.org/" target="_blank" rel="external">Node Package Manager</a></li>
<li><a href="http://net.tutsplus.com/tutorials/javascript-ajax/node-js-for-beginners/" target="_blank" rel="external">Nodejs for beginners</a></li>
<li><a href="http://howtonode.org/" target="_blank" rel="external">HowToNode</a> - community supported blog to teach fundamental concepts for writing effective code along with various other tips.</li>
<li><a href="http://requirejs.org/" target="_blank" rel="external">RequireJS</a> - optimising file and module loader for JavaScript, can combine all your code into one file for faster loading</li>
<li><a href="https://github.com/dannycoates/node-inspector" target="_blank" rel="external">Node-inspector</a> - Web Inspector based nodeJS debugger</li>
<li><a href="http://docs.nodejitsu.com/" target="_blank" rel="external">Nodejitsu</a> - a growing collection of node.js how-to articles from the community, range from basic to advanced.</li>
<li><a href="http://superherojs.com/" target="_blank" rel="external">Superhero.js</a> - a collection of articles, presentations and videos </li>
<li><a href="https://groups.google.com/forum/?fromgroups=#!forum/nodejs" target="_blank" rel="external">Nodejs google group</a>** </li>
<li><a href="http://stackoverflow.com/questions/2353818/how-do-i-get-started-with-node-js" target="_blank" rel="external">Suggestions of learning materials on Stack Exchange</a></li>
</ul>
<h3 id="Some_semi-related_links">Some semi-related links</h3><ul>
<li><a href="http://blog.deadpansincerity.com/2011/05/setting-up-emacs-as-a-javascript-editing-environment-for-fun-and-profit/" target="_blank" rel="external">Setting up emacs as a javascript editing environment</a></li>
<li><a href="http://playground.webflow.com/" target="_blank" rel="external">Webflow CSS3 playground</a></li>
</ul>
<p>Good luck with your JavaScript and node projects.</p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="http://4.bp.blogspot.com/-bIFaJwok1vI/UVA3jCluB-I/AAAAAAAAJM0/-rtRbVUQ4no/s1600/Nodejs_logo_light.png" class="img-thumbnail"> 
<p><strong>Outdated: please disregard this article as it is out of date.  I install node in my local filespace on Ubuntu now as its so much easier to manage.  Basicaly I download the Linux binaries and put them in ~/apps/nodejs/current, then add ~/apps/nodejs/current/bin to my path using my shell profile (~/.profile).  This makes using npm -g really easy and does not require the sudo command.</strong></p>
<p><a href="http://nodejs.org/">nodejs</a> is a very popular framework for JavaScript development, but as I found out at the <a href="http://www.meetup.com/London-MongoDB-User-Group/events/106898042/">MongoDB hackathon</a>  its not that straight forward to get going.  So here is a quick guide to get going with Node.js on <a href="http://www.ubuntu.com">Ubuntu</a>.</p>]]>
    
    </summary>
    
      <category term="javascript" scheme="http://jr0cket.co.uk/tags/javascript/"/>
    
      <category term="nodejs" scheme="http://jr0cket.co.uk/tags/nodejs/"/>
    
      <category term="ubuntu" scheme="http://jr0cket.co.uk/tags/ubuntu/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Flying Planes With Clojure and FlightGear]]></title>
    <link href="http://jr0cket.co.uk/2013/03/flying-planes-with-clojure-and.html.html"/>
    <id>http://jr0cket.co.uk/2013/03/flying-planes-with-clojure-and.html.html</id>
    <published>2013-03-21T21:33:00.000Z</published>
    <updated>2015-03-18T15:08:46.208Z</updated>
    <content type="html"><![CDATA[<p>Dale Thatcher from the <a href="http://londonclojurians.org/" target="_blank" rel="external">London Clojure community</a> created a <a href="https://github.com/dalethatcher/flightgear" target="_blank" rel="external">Clojure project</a> that allows you to fly a plane in real time.  Now, Dale has not yet connected this to a real plane, instead he is using the open source flight simulator, <a href="http://www.flightgear.org/" target="_blank" rel="external">FlightGear</a>.</p>
<p>I took Dale’s project for a test flight and here are my experiences!</p>
<a id="more"></a>
<h1 id="Getting_set_up">Getting set up</h1><p>I am using Ubuntu 12.10 and FlightGear is in the software center, so its easy to add it.  Be aware that the file is 635MB in size (1.3GB once installed), so you need a decent Internet connection and a fair bit of space.</p>
<p>You can of course use <code>apt-get</code> on the command line too:</p>
<pre><code>sudo apt-<span class="keyword">get</span> install flightgear
</code></pre><img src="http://3.bp.blogspot.com/-xbgiADIrEtI/UUtjzKwkFwI/AAAAAAAAJLk/3CWfbfuBtRQ/s1600/flight-gear-ubuntu-software-center.png" class="img-code">
<h1 id="Running_FlightGear">Running FlightGear</h1><img src="http://1.bp.blogspot.com/-9ILGm7ZzlQg/UUtrWInCpRI/AAAAAAAAJL0/AAnahKbG9jg/s1600/flight-gear-telnet-port.png" class="img-topic">
<p>Whilst there are GUI tools to run FlightGear, I just went for the command line.  Following Dale’s guide, I ran the emulator with a specific Telnet port.  I am assuming this is what the library uses to communicate with.</p>
<p>Now you should see a plane cockpit, ready and waiting for you to jump into the controls.</p>
<img src="http://4.bp.blogspot.com/-7N9oGY9vJxw/UUtscbmeA7I/AAAAAAAAJL8/cwUFirHQW4A/s1600/flight-gear-cockpit.png" class="img-code">
<h1 id="Setting_up_the_Clojure_project">Setting up the Clojure project</h1><p>I created a basic Clojure project using Leingen, of course.</p>
<pre><code>lein <span class="keyword">new</span> my-flight
</code></pre><p>Editing the <code>my-flight/project.clj</code> project file, I added a dependency on Dale’s flightgear project</p>
<figure class="highlight clojure"><figcaption><span>project.clj</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">:dependencies</span> <span class="collection">[<span class="collection">[org.clojars.dalethatcher/flightgear <span class="string">"0.1.0-SNAPSHOT"</span>]</span>]</span></span><br></pre></td></tr></table></figure>
<p>The project file should look like this: </p>
<img src="http://3.bp.blogspot.com/-M1XTODPYNx0/UUts21J6I7I/AAAAAAAAJME/Pp81KaVtJMM/s1600/my-flight-project.clj.png" class="img-code"> 
<blockquote>
<p>You may have a newer version of Clojure than in the above example.</p>
</blockquote>
<p>I could write a few Clojure functions to control the airplane, but I dont know how responsive it will be.  So instead I fired up the REPL, connected to the flight simulator over the telnet port and started issuing command.</p>
<p>Much more fun and much faster feedback.</p>
<figure class="highlight clojure"><figcaption><span>Clojure REPL</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">use</span></span> 'flightgear.api)</span></span><br><span class="line"><span class="list">(<span class="keyword">connect</span> <span class="string">"localhost"</span> <span class="number">5401</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword">starter!</span> <span class="literal">true</span>)</span> <span class="comment">; wait until engine started</span></span><br><span class="line"><span class="list">(<span class="keyword">starter!</span> <span class="literal">false</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword">flaps!</span> <span class="number">0.5</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword">throttle!</span> <span class="number">1</span>)</span>  <span class="comment">; wait for a little while and you should be airbourne</span></span><br><span class="line"><span class="list">(<span class="keyword">rudder!</span> <span class="number">0.1</span>)</span> <span class="comment">; steer a bit to the right (single props tend to veer to one side)</span></span><br></pre></td></tr></table></figure>
<p>It works.  I am controlling the plane and am trundling off down the runway.</p>
<p>I am assuming this control interface mimics what you have to do in the simulator, as otherwise I’d have prefered the starter motor to turn itself off.  I know very little about flying planes.</p>
<h1 id="Learning_to_fly">Learning to fly</h1><p>All this has been fairly easy so far.  Well easy compared to actually being able to fly the plane without crashing after 30 seconds.</p>
<p>Using the Clojure REPL I can issue commands to tweak the flight of the plane, adusting thrust, flaps, etc.  As its a single propeller plane, it tends to vere about a bit, so needs constant input to keep it flying. </p>
<p>I think the best chance of flying this plane is to write a Clojure program to do it for me.  Luckily, Dale’s project included Telemetry information such as position, velocity and orientation.</p>
<p>Its going to be great fun learning to fly and I havent even looked at the game options such as weather (I may turn all that off at first!).</p>
<p>The FlightGear game and Dale’s Clojure project should give me hours of fun (assuming I can find the time).</p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Dale Thatcher from the <a href="http://londonclojurians.org/">London Clojure community</a> created a <a href="https://github.com/dalethatcher/flightgear">Clojure project</a> that allows you to fly a plane in real time.  Now, Dale has not yet connected this to a real plane, instead he is using the open source flight simulator, <a href="http://www.flightgear.org/">FlightGear</a>.</p>
<p>I took Dale’s project for a test flight and here are my experiences!</p>]]>
    
    </summary>
    
      <category term="clojure" scheme="http://jr0cket.co.uk/tags/clojure/"/>
    
      <category term="events" scheme="http://jr0cket.co.uk/categories/events/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Lenovo X1 Carbon - Unboxing Video]]></title>
    <link href="http://jr0cket.co.uk/2013/03/lenovo-x1-carbon-unboxing-video.html.html"/>
    <id>http://jr0cket.co.uk/2013/03/lenovo-x1-carbon-unboxing-video.html.html</id>
    <published>2013-03-17T13:22:00.000Z</published>
    <updated>2015-03-18T15:08:46.208Z</updated>
    <content type="html"><![CDATA[<p>I have not found any Ubuntu related video’s for the Lenovo X1 Carbon, but here is an unboxing video that gives you some idea of how slim this laptop actually is.</p>
<div class="video-container"><iframe src="//www.youtube.com/embed/KRLsanDdzGE" frameborder="0" allowfullscreen></iframe></div> 
<p>Thank you.<br><a href="https://www.twitter.com/jr0cket" target="_blank" rel="external">@JR0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>I have not found any Ubuntu related video’s for the Lenovo X1 Carbon, but here is an unboxing video that gives you some idea of how slim ]]>
    </summary>
    
      <category term="lenovo" scheme="http://jr0cket.co.uk/tags/lenovo/"/>
    
      <category term="ubuntu" scheme="http://jr0cket.co.uk/tags/ubuntu/"/>
    
      <category term="ubuntu" scheme="http://jr0cket.co.uk/categories/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Ubuntu on Lenovo X1 Carbon - Tweaking the Desktop]]></title>
    <link href="http://jr0cket.co.uk/2013/03/ubuntu-on-lenovo-x1-carbon-tweaking-the-desktop.html"/>
    <id>http://jr0cket.co.uk/2013/03/ubuntu-on-lenovo-x1-carbon-tweaking-the-desktop.html</id>
    <published>2013-03-16T14:42:00.000Z</published>
    <updated>2015-03-18T15:08:46.212Z</updated>
    <content type="html"><![CDATA[<img src="http://1.bp.blogspot.com/-pfixqqRGL5c/UUOcTFUeF4I/AAAAAAAAJLE/6sPtWcG4gEs/s1600/ubuntu-tweak-home-page.png" class="img-thumbnail">
<p>There are a few little tweaks that I find make using <a href="Ubuntu">http://www.ubuntu.com</a> desktop just that little bit nicer.  The easiest way I have found to make these changes is using <a href="http://ubuntu-tweak.com/" target="_blank" rel="external">Ubuntu Tweak</a>.</p>
<a id="more"></a>
<h2 id="Installing_Ubuntu_Tweak">Installing Ubuntu Tweak</h2><p>The easiest way is to go to the Ubuntu Tweak website and click on the Download Now button.  This asks you to save a .deb file.  Double clicking on this .deb file opens the Ubuntu software center and lets you install the software and any depenencies.</p>
<h2 id="Natural_Scrolling_(like_the_new_Mac_OSX)">Natural Scrolling (like the new Mac OSX)</h2><p>Having used a MacBook Pro for work for the last 6 months I got used to the <em>reversed</em> way of scrolling, introduced to make desktops scroll like tablets.  After a few weeks I grew to like this “reversed” scrolling so wanted it for the new laptop.</p>
<p>In the next version of Ubuntu, 13.04, this reversed scrolling is called Natural Scrolling.  For Ubuntu 12.04 it can be switched on using Ubuntu Tweak in the section <strong>Tweaks &gt; Accessories</strong></p>
<img src="http://3.bp.blogspot.com/-tXORsbuAXR8/UUOf11ZFPtI/AAAAAAAAJLM/qYLjs_kvQMw/s1600/ubuntu-tweak-natural-scrolling.png">
<h2 id="Virtual_Desktops">Virtual Desktops</h2><p>I usually like to have one application running per desktop and often have quite a few apps running at any one time.  Whilst Ubuntu has 4 virtual desktops by default, I prefer to go one level bigger and have 9.  Again this is easily done with Ubuntu Tweak in section <strong>Tweaks &gt; Workspaces</strong>.</p>
<img src="http://1.bp.blogspot.com/-BHqEWKbB6y4/UUOjQWG7ckI/AAAAAAAAJLU/AHQ-FE5ftsE/s1600/ubuntu-tweak-nine-workspaces.png">
<p>With nine virtual desktops I can now get going with some coding, once I have set up my development environments.  That will be in the next post.</p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="http://1.bp.blogspot.com/-pfixqqRGL5c/UUOcTFUeF4I/AAAAAAAAJLE/6sPtWcG4gEs/s1600/ubuntu-tweak-home-page.png" class="img-thumbnail">
<p>There are a few little tweaks that I find make using <a href="Ubuntu">http://www.ubuntu.com</a> desktop just that little bit nicer.  The easiest way I have found to make these changes is using <a href="http://ubuntu-tweak.com/">Ubuntu Tweak</a>.</p>]]>
    
    </summary>
    
      <category term="lenovo" scheme="http://jr0cket.co.uk/tags/lenovo/"/>
    
      <category term="ubuntu" scheme="http://jr0cket.co.uk/tags/ubuntu/"/>
    
      <category term="ubuntu" scheme="http://jr0cket.co.uk/categories/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Ubuntu on Lenovo X1 Carbon - Let There Be Light and Sound]]></title>
    <link href="http://jr0cket.co.uk/2013/03/ubuntu-on-lenovo-x1-carbon-let-there-be-light-and-sound.html"/>
    <id>http://jr0cket.co.uk/2013/03/ubuntu-on-lenovo-x1-carbon-let-there-be-light-and-sound.html</id>
    <published>2013-03-16T09:00:00.000Z</published>
    <updated>2015-03-18T15:08:46.212Z</updated>
    <content type="html"><![CDATA[<img src="http://3.bp.blogspot.com/-mIMpXCWQUw4/UUJJ1R0pADI/AAAAAAAAJJ8/oNaVgTQmlWA/s1600/lenovo-carbon1.jpg" class="img-thumbnail">
<p>So I bought the Lenovo X1 Carbon for development and an important part of that is having some good tunes to listen too.  As I also travel a lot, its also useful to have a good display for movies and screen-casts.</p>
<p>Well, the X1 Carbon give great results in both sound and vision.</p>
<a id="more"></a>
<h2 id="Testing_the_speakers">Testing the speakers</h2><img src="http://1.bp.blogspot.com/-HBV4FJ9nfD8/UUN6M0NG16I/AAAAAAAAJKs/N83SXlOiA14/s1600/Rhythmbox-Is-the-Default-Player-for-Ubuntu-12-04.jpg" class="img-code">
<p>Ubuntu comes with Rythmbox music player and manager installed by default, so all it took to test the sound was to copy over some mp3 and flac audio files. </p>
<blockquote><p>When installing Ubuntu, I selected the option to install the software needed to play proprietary music formats like mp3</p>
</blockquote>
<p>The sound came through brilliantly through stereo speakers located near the front of each side of the laptop.  There are two thin slits that let produce great sound without letting any dirt in.</p>
<p>As noted in <a href="http://jr0cket.co.uk/2013/03/ubuntu-on-lenovo-x1-carbon-first.html" target="_blank" rel="external">my first post on the X1 Carbon</a>, the volume controls work just fine in Ubuntu (although the mic mute button does not work).</p>
<h2 id="Testing_video_playback">Testing video playback</h2><p>To test the playback I fired up YouTube and played some HD def music videos.  I have been enjoying Lindsey Sterling the last few months, so I fired up a few of her videos.  There is a great one where she is in a man made giant ice structure.</p>
<div class="video-container"><iframe src="//www.youtube.com/embed/aHjpOzsQ9YI" frameborder="0" allowfullscreen></iframe></div>
<p>The video playback is just as great as the sound and not sign of jumping even with High Definition video.</p>
<img src="http://3.bp.blogspot.com/-lQv0hasSvy8/UUN81JyKaWI/AAAAAAAAJK0/n_SMXLPXX9E/s1600/Lindsey-Sterling-Crystalise-video-dark-sky.png" class="img-code"> 
<p>A screen grab of Lindsey Sterling, Crystallize from her <a href="http://www.youtube.com/user/lindseystomp" target="_blank" rel="external">YouTube channel</a>.  The screen-shot doesn’t really do the actual video playback justice.  Even on farily low brightness, the display really shows off the quality of the screen.</p>
<p>With a matt screen in widescreen format and IPS giving lots of brightness, the Lenovo X1 Carbon will be a a great portal movie player on long trips.</p>
<p>Finally I tested my <a href="http://www.amazon.co.uk/Logitech-981-000177-Gaming-Headset-G330/dp/B002KKM5GA/" target="_blank" rel="external">Logitech gaming headset</a> and Ubuntu detected them correctly and they show up in the Sound settings.</p>
<p>More adventures with Ubuntu on Lenovo in future posts.</p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="http://3.bp.blogspot.com/-mIMpXCWQUw4/UUJJ1R0pADI/AAAAAAAAJJ8/oNaVgTQmlWA/s1600/lenovo-carbon1.jpg" class="img-thumbnail">
<p>So I bought the Lenovo X1 Carbon for development and an important part of that is having some good tunes to listen too.  As I also travel a lot, its also useful to have a good display for movies and screen-casts.</p>
<p>Well, the X1 Carbon give great results in both sound and vision.</p>]]>
    
    </summary>
    
      <category term="lenovo" scheme="http://jr0cket.co.uk/tags/lenovo/"/>
    
      <category term="ubuntu" scheme="http://jr0cket.co.uk/tags/ubuntu/"/>
    
      <category term="ubuntu" scheme="http://jr0cket.co.uk/categories/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Ubuntu on Lenovo X1 Carbon - Tweaking the Bios and Added Security]]></title>
    <link href="http://jr0cket.co.uk/2013/03/ubuntu-on-lenovo-x1-carbon-tweaking-bios-and-security.html"/>
    <id>http://jr0cket.co.uk/2013/03/ubuntu-on-lenovo-x1-carbon-tweaking-bios-and-security.html</id>
    <published>2013-03-15T18:00:00.000Z</published>
    <updated>2015-03-18T15:08:46.212Z</updated>
    <content type="html"><![CDATA[<img src="http://3.bp.blogspot.com/-mIMpXCWQUw4/UUJJ1R0pADI/AAAAAAAAJKA/-3aHKq5wJwc/s1600/lenovo-carbon1.jpg" class="img-thumbnail"> 
<p>I have a lovely new Lenovo X1 Carbon and to make it even better I am installing <a href="http://www.ubuntu.com" target="_blank" rel="external">Ubuntu</a>.  The installation should be a breeze as Lenovo laptops are usually well supported, the only thing I configured was in the BIOS.  I wanted to check the boot order and see what the boot menu key was so I could install Ubuntu from a USB memory stick (boot menu key is F12).</p>
<a id="more"></a>
<p>Pressing the little “Thinkpad” button next to the volume controls whist the laptop is first booting gives you an option to go into the bios. </p>
<h2 id="Secure_Boot_and_the_boot_order">Secure Boot and the boot order</h2><p>Once the BIOS control panel had loaded up, In the overview section I noticed that Secure Boot was enabled.  So I looked through all the sections and found an option to turn it off.  I also changed the boot order so that USB memory sticks can be used to boot from.  Saving the changes rebooted the machine and I pressed F12 on restart to select the USB stick I had created for the Ubuntu installation.</p>
<p>Apart from thinking of a good name for my new laptop, the install was really easy.  I decided to use the whole hard drive (SSD) space for Ubuntu and ditch windows 8 completely.  There were 3 recovery partitions that come with the laptop if I wanted to keep windows for a later date.  I did not.</p>
<img src="http://3.bp.blogspot.com/-i09UXqkk_3E/UUMtyYQNciI/AAAAAAAAJKc/N1oz7QeNT5E/s1600/ubuntu-install-cfdisk.png" class="img-code">
<p><em>Disk partition information from: sudo cfdisk</em></p>
<h2 id="Added_security_and_partition_flexibility">Added security and partition flexibility</h2><p>I decided to encrypt the whole laptop and this works really well.  For the rare occasion I shut down or restart the laptop, I get prompted as Ubuntu starts up to enter the password to unlock the encrypt drive.</p>
<p>I also decided to install Logical Volume Managment (LVM), just in case I needed to play around with the partition sizes.  As I have a 180GB SSD hard drive, I probably wont need to but it should not add a noticeable overhead.</p>
<p>One thing that is missing is a swap partition, but the only upshot of this on a laptop with 8GB is that hibernate has knowhere to write to, so its currently disabled.  I’ll probably manually partition the laptop when Ubuntu 13.04 comes out (25th April).</p>
<p>To finish off the install I just chose a name for the laptop and the usual username/password and everything was done in less than 30 minutes. I didn’t need to do anything to boot into the installed version of Ubuntu.</p>
<p>Next I’ll check out how well sound and video works.</p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="http://3.bp.blogspot.com/-mIMpXCWQUw4/UUJJ1R0pADI/AAAAAAAAJKA/-3aHKq5wJwc/s1600/lenovo-carbon1.jpg" class="img-thumbnail"> 
<p>I have a lovely new Lenovo X1 Carbon and to make it even better I am installing <a href="http://www.ubuntu.com">Ubuntu</a>.  The installation should be a breeze as Lenovo laptops are usually well supported, the only thing I configured was in the BIOS.  I wanted to check the boot order and see what the boot menu key was so I could install Ubuntu from a USB memory stick (boot menu key is F12).</p>]]>
    
    </summary>
    
      <category term="lenovo" scheme="http://jr0cket.co.uk/tags/lenovo/"/>
    
      <category term="ubuntu" scheme="http://jr0cket.co.uk/tags/ubuntu/"/>
    
      <category term="ubuntu" scheme="http://jr0cket.co.uk/categories/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Ubuntu on Lenovo X1 Carbon - Great First Impressions]]></title>
    <link href="http://jr0cket.co.uk/2013/03/ubuntu-on-lenovo-x1-carbon-first.html.html"/>
    <id>http://jr0cket.co.uk/2013/03/ubuntu-on-lenovo-x1-carbon-first.html.html</id>
    <published>2013-03-14T23:21:00.000Z</published>
    <updated>2015-03-18T15:08:46.212Z</updated>
    <content type="html"><![CDATA[<img src="http://3.bp.blogspot.com/-mIMpXCWQUw4/UUJJ1R0pADI/AAAAAAAAJJ8/oNaVgTQmlWA/s1600/lenovo-carbon1.jpg" class="img-thumbnail">
<p>After a bit of research on the level of <a href="Ubuntu">http://www.ubuntu.com</a> support, I decided to get a Lenovo X1 Carbon for my new development machine.  </p>
<p>If you have never seen the X1 Carbon, its like a really special edition of a Mac Book Air, except much more awesome and more powerful.  Here are my impressions so far.</p>
<a id="more"></a>
<p>The things I value the most are:</p>
<ul>
<li>Fast Processor - i7 cpu @ 2GHz dual core &amp; hyperthreading CPU (virtual 4 cores)</li>
<li>Decent size RAM - 8 Gb</li>
<li>14” Matt screen display with IPS for a very bright screen</li>
<li>Thin bezel around the display means the 14” screen sits in a typical 13” form factor</li>
<li>High Definition resolution - 1600x900</li>
<li>Decent battery life, between 4 to 6 hours and a 30 minute quick charge to ~80% full</li>
<li>A really great keyboard - perfect for Emacs and command line junkies</li>
<li>A hardware switch for WiFi and  Bluetooth</li>
<li>It comes in black, as all technology should </li>
</ul>
<p>The most important thing is that it runs <a href="Ubuntu">http://www.ubuntu.com</a> and it runs Ubuntu very fast!!</p>
<h1 id="Great_Ubuntu_support_so_far">Great Ubuntu support so far</h1><img src="http://2.bp.blogspot.com/-2mypf120DAY/UUJbM-fswYI/AAAAAAAAJKE/DBZmPK7F9c0/s1600/ubuntulogo.png" class="img-topic">
<p>I have not found anything that does not work as yet (although its only been 2 hours).</p>
<p><strong>WiFi network</strong> - this worked without any problems (even after suspend).  I did pick up a USB ethernet connector just in case, but have not needed that as yet.  The WiFi is very fast, especially when connected to a 5GHz network.  The WiFi also works with 2.5GHz networks too.</p>
<p><strong>Back-light keyboard</strong> - use <code>Fn + Space</code> keys to cycle through 2 different levels of brightness and off.  Unlike the Mac, there is no low-light level detector, but I can provide that service myself :)</p>
<p><strong>Display brightness</strong> - use <code>Fn + F8 / F9</code> to change the brightness of the screen and there is a decent stepping range of brightness.</p>
<p><strong>Volume level &amp; sound mute</strong> - these buttons all work, although the microphone mute button does not seem to work.</p>
<p><strong>Suspend</strong> on closing the laptop lid works just fine and the WiFi network came back along with everything else when opening the lid.  The Ubuntu installer does not create a swap space by default (or this may be because I selected an encrypted disk partition), so hibernate does not work at present.</p>
<p><strong>Lock Screen</strong> button <code>Fn + F3</code> works just fine and is a quick way to put the screen to sleep.</p>
<p><strong>External monitor</strong> also tested okay.  I plugged in a Dell 24” monitor using the Display Port to VGA adaptor (additional purchase) and got the full 1920 x 1200 output.  The Lenovo display can also run its display of 1600x900 at the same time and I notice no loss of responsiveness in either display. </p>
<p><strong>Web Camera</strong> works very well and I tested it out via a Google hangout with myself.</p>
<img src="http://3.bp.blogspot.com/-KRS_H5QxupU/UUJbYAPH3aI/AAAAAAAAJKM/6j6wVSlJGjk/s1600/ubuntu1210installation-large_014.jpg" class="img-code">
<h1 id="Impressions_overall">Impressions overall</h1><p>The Lenovo X1 Carbon laptop is a pretty impressive piece of kit on paper.  I was excite when I was reading about it and worried it would not live up to the hype.</p>
<p>I didn’t have to worry.  From the moment I pulled it out of the box it has been a joy.  I still cant believe how light it is, it feels half the weight of any laptop I’ve ever held.  Despite the light weight, it feels very robust and seems like it will last a long time.</p>
<p>Using the laptop is a joy, mainly down to the keyboard.  Its a full size keyboard and has the keys laid out in there correct places.  I dont have to go hunting for the <code>@ ~ |</code> and <code>#</code> keys.</p>
<p>Battery life seems pretty good.  I have been writing this article on an off over the last 4 an a bit hours.  There is still an hour and a half left on the battery indicator.  Admittedly I haven’t run any websites running flash or played any games, but I am pretty sure I can last all day at a conference using WiFi.  I will test out the 30 minute quick charge over the next few days.</p>
<blockquote><p>Update: The Lenovo X1 Carbon charges up really quickly, easily charging to over 80% capacity in 30 minutes and full charge in about 45 minutes.</p>
</blockquote>
<p>Compared to the Mac Book Pro I was given via the company I work for, the Lenovo X1 Carbon wins on every count.</p>
<p>In the next few blogs I’ll cover setting up this great laptop to be an awesome development machine.</p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="http://3.bp.blogspot.com/-mIMpXCWQUw4/UUJJ1R0pADI/AAAAAAAAJJ8/oNaVgTQmlWA/s1600/lenovo-carbon1.jpg" class="img-thumbnail">
<p>After a bit of research on the level of <a href="Ubuntu">http://www.ubuntu.com</a> support, I decided to get a Lenovo X1 Carbon for my new development machine.  </p>
<p>If you have never seen the X1 Carbon, its like a really special edition of a Mac Book Air, except much more awesome and more powerful.  Here are my impressions so far.</p>]]>
    
    </summary>
    
      <category term="lenovo" scheme="http://jr0cket.co.uk/tags/lenovo/"/>
    
      <category term="ubuntu" scheme="http://jr0cket.co.uk/categories/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hack the Tower - February 2013]]></title>
    <link href="http://jr0cket.co.uk/2013/02/hack-tower-february-2013.html.html"/>
    <id>http://jr0cket.co.uk/2013/02/hack-tower-february-2013.html.html</id>
    <published>2013-02-22T14:08:00.000Z</published>
    <updated>2015-03-18T16:36:14.172Z</updated>
    <content type="html"><![CDATA[<img src="http://3.bp.blogspot.com/-6h-4Dv2fnf8/USeAlY8lgwI/AAAAAAAAJFw/OQheQYOK8zs/s1600/tower42-surrounded-by-blue-cranes.jpg)</div>A" class="img-thumbnail" title="full house (tower) was great to see at the February edition of Hack the Tower.  With over 97 developers and 1 robot signed across several technical communities in London, I could tell it was going to be a big one. 

<!--￼0-->

Luckily Github was not down for long.  As git is distributed, we were able to save our changes locally or topped up on Coffee whist we waited a few minutes for Github to come back.

# Dancing robot, curious developers

Everyone’s instant favourite project seemed to be the NVO robot.  Its an amazing piece of kit.  Essentially a programmable robot that can by default can play Japanese music and do Tai Chi.

<iframe allowfullscreen= frameborder=0 height=315 src=http://www.youtube.com/embed/rJnjmwtGQuE width=420></iframe> 

You can program the robot visually, by dragging and dropping actions and wiring them up together.  You can create a sequence of positions and get the software to work out the moves necessary to go from one position to another.  Just like digital animators use in software like blender.

You can drill down into each of these actions and program the robot in python or several other languages.

{% img img-thumbnail https://pbs.twimg.com/profile_images/304321293/2442675643_5ffdd15b3b-square_bigger.jpg">
<blockquote><p>Many thanks to @<a href="https://twitter.com/jr0cket" target="_blank" rel="external">jr0cket</a> for organising <a href="https://twitter.com/HackTheTower" target="_blank" rel="external">@HackTheTower</a> today! Introduced a bunch of developers to <a href="https://twitter.com/NaoRobot" target="_blank" rel="external">#NAORobot</a>, learnt stuff and had fun too</p>
<footer><strong>@davesnowdon</strong></footer></blockquote>
<p>The robot has stereoscopic cameras and can do face recognition, in that it recognises a face when  it is in front of it.  This means the robot will talk to you when you when it looks at you, although it cant tell one face from another by default.  The robot has pressure sensors and fingers so it can interact with its environment.</p>
<blockquote><p><a href="https://twitter.com/HackTheTower" target="_blank" rel="external">@HackTheTower</a> <a href="http://t.co/hfUIMWgT" target="_blank" rel="external">My view today</a></p>
<footer><strong>@gnorsilva</strong></footer></blockquote>
<h1 id="London_Scala_user_group">London Scala user group</h1><img src="http://2.bp.blogspot.com/-kIrzG80xsL4/UMcqsNDxzzI/AAAAAAAAIsU/hKMCeoPdGkk/s1600/lsug-logo.jpeg" class="img-thumbnail">
<p>There were a lot of developers from LSug  group and they ended up split into three smaller groups to focus on different problems.</p>
<p>Some of the team were working with MongoDB, some working on the RSVP via meetup.  All the events displayed on the Lsug website can now be joined directly, without having to visit the meetup site.  Perhaps the total number of Yes RSVP’s can be added to each meetup?</p>
<h1 id="Coding_board">Coding board</h1><blockquote>
<p><a href="https://twitter.com/villademor" target="_blank" rel="external">@villademor</a> Playing around with <a href="http://t.co/ReN3kzR5" target="_blank" rel="external">codingboard.org</a>, <a href="https://twitter.com/scala&quot;" target="_blank" rel="external">#Scala</a> on <a href="https://twitter.com/HackTheTower" target="_blank" rel="external">@HackTheTower</a> <a href="https://twitter.com/londonscala" target="_blank" rel="external">#LondonScala</a> with <a href="https://twitter.com/balopat" target="_blank" rel="external">@balopat</a>, <a href="https://twitter.com/gnorsilva" title="gnorsilva" target="_blank" rel="external">@gnorsilva</a> among others!</p>
</blockquote>
<p><a href="http://codingboard.org/" target="_blank" rel="external">Coding Board</a> is a small web application allowing developers to share code with each other in a hands-on session.  When we want to talk about the decisions we took as we approached a problem, its  nice to have the code itself shared on the screen in a syntax  highlighted way. </p>
<p><a href="https://twitter.com/balopat" target="_blank" rel="external">Balint Pato</a> started this project as a <a href="http://blog.balopat.com/2012/12/a-gift-for-christmas-to-the-software-craftsmanship-community.html" target="_blank" rel="external">Christmas gift</a> for the <a href="http://www.meetup.com/london-software-craftsmanship/" target="_blank" rel="external">London Software Craftsmanship Community</a> using:</p>
<ul>
<li><a href="http://www.scala-lang.org/" target="_blank" rel="external">Scala</a> and <a href="http://www.scalatra.org/" target="_blank" rel="external">Scalatra</a></li>
<li><a href="http://twitter.github.com/bootstrap/" target="_blank" rel="external">Twitter Bootstrap</a> for the front end framework</li>
<li><a href="http://docs.seleniumhq.org/" target="_blank" rel="external">Selenium Webdriver</a> and <a href="http://etorreborre.github.com/specs2/" target="_blank" rel="external"> Specs2</a> for “testing”</li>
<li><a href="http://www.heroku.com/" target="_blank" rel="external">Heroku</a> developer cloud service for easy deployment </li>
<li>and no persistence whatsoever..:) </li>
</ul>
<p>The project is under an open source license and the code is <a href="http://github.com/balopat/codingboard" target="_blank" rel="external">available on Github</a> for you to clone and fork. </p>
<blockquote><p>we went live: Syntax highlighting on edit, max 24 hours long boards, loads of small fixes, altogether 10 pull requests! <a href="https://twitter.com/HackTheTower" title="HackTheTower" target="_blank" rel="external">@HackTheTower</a> <a href="https://twitter.com/londonscala" target="_blank" rel="external">#LondonScala</a></p>
<footer><strong>@balopat</strong><cite><a href="https://twitter.com/balopat/status/300286147186282496" target="_blank" rel="external">twitter.com/balopat/status/300286147186282496</a></cite></footer></blockquote>
<p>Read <a href="http://blog.balopat.com/2013/02/hack-the-tower-experience.html" target="_blank" rel="external">a blog of the days events</a> for this project from Balint Pato himself. </p>
<blockquote><p><a href="https://twitter.com/balopat" title="balopat" target="_blank" rel="external">balopat</a> <a href="http://t.co/FX6Aqc8P" target="_blank" rel="external">meetup photos</a> :) <a href="https://twitter.com/HackTheTower" title="HackTheTower" target="_blank" rel="external">@HackTheTower</a></p>
<footer><strong>@balopat</strong></footer></blockquote>
<h1 id="London_Clojurians_-_getting_going_with_Clojure">London Clojurians - getting going with Clojure</h1><img src="http://3.bp.blogspot.com/-te_MuKdFBTQ/TzFLahe2BxI/AAAAAAAAEbY/Bn_JPN_s3qU/s1600/clojure-logo-500x.png" class="img-thumbnail">
<p>Two of us helped out a developer relatively new to Clojure, although they did have some past experience with Lisp.  We helped them get ther environment set up, which was a bit more of a challenge as the were running Windows 8.</p>
<p>Luckily its still fairly easy to set up a working Clojure environment on Windows, although just about every command seemed to ask for the Administrators password!  On the <a href="http://leiningen.org/" target="_blank" rel="external">Leiningen website</a>, there is reference to a 3rd party bat file for getting going with windows.  The problem with this bat file is that its dependant on either wget or curl, neither of which were available on this machine.</p>
<p>We got round the problem by manually doing what the leiningen bat file did, downloading the .jar file and putting it in ~/.lein/self-install/…jar</p>
<p>A problem still remand with running lein.  The version in the .bat file was different from the ..jar file, so lein attempted to use and download a different version, which it couldnt find.  As we didnt have curl or wget to download the version in the bat file, we simply changed the bat file manually.</p>
<p>Some other aspects to setting up Clojure on windows 8 included:</p>
<ul>
<li>make sure javac is on the path, we only had java and lighttable failed</li>
<li>install leiningen - there is a bat file or use cygwin</li>
<li>install lighttable</li>
<li>use lein to create a new project and connect to a REPL</li>
</ul>
<h1 id="Salesforce_for_charity">Salesforce for charity</h1><img src="http://2.bp.blogspot.com/-TF122Sgsv-4/UPxdX3gUFHI/AAAAAAAAI70/4WG-fXrH-yE/s1600/force_800x800.png" class="img-thumbnail">
<p>Another team formed around the <a href="http://developer.salesforce.com/" target="_blank" rel="external">Salesforce platform</a>.  The were developing a tool to extract data from charity sites like Virgin Just Giving, helping fund raising organisations improve their fund-raising capabilities and getting a better view on where funds were coming from.</p>
<p>The data captured is filtered for the valuable data and the tool would allow you to match the incoming data with existing information you have.</p>
<p>The project is open source and <a href="https://github.com/stony-tsit/UK-Fundraising-Salesforce-App" target="_blank" rel="external">available on Github</a>.</p>
<h1 id="Java,_Java,_Java">Java, Java, Java</h1><p>A team was also working on Java and some of the technical activity around the  Java Community Process (JCP).  The JCP is a way for others to help shape the future of the Java language and define the specifications for the language.  </p>
<h1 id="Coding_through_the_night?">Coding through the night?</h1><img src="http://2.bp.blogspot.com/-x6RUGJlfAto/USJUmLxp4BI/AAAAAAAAJEg/KEuS-PZUAZ8/s1600/london-by-night-from-the-tower.png" class="img-thumbnail">
<p>I did wonder at one point if we would still be here coding through Sunday as there were teams coding well into the evening.  By about 6pm everyone had got headed off into the beautiful London night.</p>
<blockquote>
<p><a href="https://twitter.com/villademor" title="villademor" target="_blank" rel="external">villademor</a> <a href="https://twitter.com/sandromancuso" title="sandromancuso" target="_blank" rel="external">@sandromancuso</a> <a href="https://twitter.com/HackTheTower" title="HackTheTower" target="_blank" rel="external">@HackTheTower</a> <a href="https://twitter.com/balopat" title="balopat" target="_blank" rel="external">@balopat</a> <a href="https://twitter.com/gnorsilva" title="gnorsilva" target="_blank" rel="external">@gnorsilva</a> we really had a good time Sandro! Shame we couldn’t catch up with you!</p>
</blockquote>
<blockquote><p><a href="https://twitter.com/sandromancuso" title="sandromancuso" target="_blank" rel="external">sandromancuso</a> <a href="https://twitter.com/villademor" title="villademor" target="_blank" rel="external">@villademor</a> Seems you guys are having loads of fun. Shame I could not make it. /cc <a href="https://twitter.com/HackTheTower" title="HackTheTower" target="_blank" rel="external">@HackTheTower</a> <a href="https://twitter.com/balopat" title="balopat" target="_blank" rel="external">@balopat</a> <a href="https://twitter.com/gnorsilva" title="gnorsilva" target="_blank" rel="external">@gnorsilva</a></p>
<footer><strong>@sandromancuso</strong><cite><a href="https://twitter.com/sandromancuso/status/300283052507160576" target="_blank" rel="external">twitter.com/sandromancuso/status/300283052507160576</a></cite></footer></blockquote>
<h1 id="Join_us_for_the_next_HackTheTower_event">Join us for the next HackTheTower event</h1><p>Come along and join the fun.  If you are a developer who likes to learn and share experiences with others, then all you need is a laptop and some enthusiasm (laptop optional).</p>
<p>Sign up at either:</p>
<ul>
<li><a href="http://www.meetup.com/LondonSalesforceDevelopers/events/98334042/" target="_blank" rel="external">London Salesforce Developer community</a></li>
<li><a href="http://www.meetup.com/london-scala/events/105841122/" target="_blank" rel="external">London Scala user group</a></li>
<li><a href="http://www.meetup.com/Londonjavacommunity/events/100797272/" target="_blank" rel="external">London Java Community</a></li>
</ul>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="http://3.bp.blogspot.com/-6h-4Dv2fnf8/USeAlY8lgwI/AAAAAAAAJFw/OQheQYOK8zs/s1600/tower42-surrounded-by-blue-cranes.jpg)</div>A" cla]]>
    </summary>
    
      <category term="hackday" scheme="http://jr0cket.co.uk/tags/hackday/"/>
    
      <category term="events" scheme="http://jr0cket.co.uk/categories/events/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Leiningen - Quick Peek Underneath the Defproject Clojure Macro]]></title>
    <link href="http://jr0cket.co.uk/2013/02/leiningen-quick-peek-underneath-defproject-Clojure-macro.html.html"/>
    <id>http://jr0cket.co.uk/2013/02/leiningen-quick-peek-underneath-defproject-Clojure-macro.html.html</id>
    <published>2013-02-21T21:30:00.000Z</published>
    <updated>2015-03-18T15:08:46.208Z</updated>
    <content type="html"><![CDATA[<img src="http://1.bp.blogspot.com/-rxD8__T6tzA/TzFNNTKKLwI/AAAAAAAAEb8/k10iLxa3I70/s1600/leiningen-face.jpg" class="img-thumbnail">
<p><a href="http://leiningen.org/" target="_blank" rel="external">Leiningen</a> is a project automation tool (think build tool and them some) that uses a Clojure macro to make it easy for <a href="http://clojure.org/" target="_blank" rel="external">Clojure</a> developers to manage their project lifecycle.</p>
<p>A Clojure project managed by Leiningen uses a simple clojure file called <code>project.clj</code> which allows developers to define a whole range of stuff about their projects.  To get started you only have to define a name, a version of Clojure and any dependencies in your <code>project.clj</code> and Leininge does the rest.  </p>
<p>So lets take a quick look under the hood of Leiningen and its defproject macro to see what is going on.</p>
<a id="more"></a>
<h1 id="The_defproject_macro">The defproject macro</h1><p>The defproject macro when run creates a simple map of your project to work with.&nbsp; Here is an example map for my project, generated by the command</p>
<pre><code>lein pprint <span class="keyword">project</span>.clj
</code></pre><img src="http://4.bp.blogspot.com/-kGfaBdi_Tj8/USp12muKPKI/AAAAAAAAJG8/XVRCj23X89Q/s1600/clojure-leiningen-pprint-project-map-whats-my-salary.png" class="img-code">
<p>If you add something to your <code>project.clj</code> file and wonder what is has changed underneath, then looking at the project map is very useful.</p>
<p>Using the project map to understand what dependencies you have pulled in could be a great way to streamline your project, or help debug it if something when wrong after adding a new dependency.</p>
<p>Leiningen also merges your profile configuration <code>~/.lein/profiles.clj</code> along with your <code>project.clj</code> settings when creating the project map.&nbsp; This can be seen in the above example.&nbsp; Near the end of the file is a <code>:plugins keyword</code>, the following 3 lines are plugins I defined in my profile.&nbsp; Leiningen will work out the smartest way to merge your <code>profile.clj</code> and <code>project.clj</code>.  If in doubt, you can check the project map.</p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="http://1.bp.blogspot.com/-rxD8__T6tzA/TzFNNTKKLwI/AAAAAAAAEb8/k10iLxa3I70/s1600/leiningen-face.jpg" class="img-thumbnail">
<p><a href="http://leiningen.org/">Leiningen</a> is a project automation tool (think build tool and them some) that uses a Clojure macro to make it easy for <a href="http://clojure.org/">Clojure</a> developers to manage their project lifecycle.</p>
<p>A Clojure project managed by Leiningen uses a simple clojure file called <code>project.clj</code> which allows developers to define a whole range of stuff about their projects.  To get started you only have to define a name, a version of Clojure and any dependencies in your <code>project.clj</code> and Leininge does the rest.  </p>
<p>So lets take a quick look under the hood of Leiningen and its defproject macro to see what is going on.</p>]]>
    
    </summary>
    
      <category term="clojure" scheme="http://jr0cket.co.uk/tags/clojure/"/>
    
      <category term="leiningen" scheme="http://jr0cket.co.uk/tags/leiningen/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Create Github Repos on the Command Line With Hub]]></title>
    <link href="http://jr0cket.co.uk/2013/02/create-github-repos-on-command-line.html.html"/>
    <id>http://jr0cket.co.uk/2013/02/create-github-repos-on-command-line.html.html</id>
    <published>2013-02-17T16:54:00.000Z</published>
    <updated>2015-03-18T15:08:46.204Z</updated>
    <content type="html"><![CDATA[<img src="http://1.bp.blogspot.com/-qlVcL6zWbjY/TzFMw8PPiGI/AAAAAAAAEbs/-Ozv0X_6mrQ/s1600/github-logo.png" class="img-thumbnail">
<p>Its easy to create a new repository on <a href="https://github.com/" target="_blank" rel="external">Github</a> website and then use your git tool or command line to clone it or add that remote repository to your project on your development machine. It would be even easier if you could just do it all from the command line with one command. Well, if you install <strong><a href="http://defunkt.io/hub/" target="_blank" rel="external">Hub</a></strong> then you can!</p>
<a id="more"></a>
<h1 id="Installing_Hub">Installing Hub</h1><p>Its easy to install <strong><a href="http://defunkt.io/hub/" target="_blank" rel="external">hub</a></strong> as its essentially a compiled Ruby script that used your git client to do a lot of the work for it.  If you are using <a href="http://mxcl.github.com/homebrew/" target="_blank" rel="external">homebrew</a> on Mac OSX then you can run:</p>
<pre><code>brew <span class="keyword">install</span> hub
</code></pre><p>I havent got round to using homebrew yet, so I just installed hub in my home binaries directory:</p>
<pre><code>curl <span class="symbol">http:</span>/<span class="regexp">/defunkt.io/hub</span><span class="regexp">/standalone -sLo ~/bin</span><span class="regexp">/hub</span>
</code></pre><p>Then I just make hub executable and I am good to go</p>
<img src="http://2.bp.blogspot.com/--PmUXufBddE/USEGAdGkGhI/AAAAAAAAJD8/HgWOMkVd8Bg/s1600/github-hub-install.png" class="img-code">
<p>I could alias hub as the git command as suggested by the hub website, however I want to see the advantages of hub before I fully commit to it. </p>
<h1 id="Creating_a_Github_repo_without_using_the_website">Creating a <a href="https://github.com/" target="_blank" rel="external">Github</a> repo without using the website</h1><p>In this example I am putting my configuration files onto <a href="https://github.com/" target="_blank" rel="external">Github</a> (because after I installed rvm it started rewriting things) so I can manage them better and share them with others.</p>
<p>As usual, I start by creating a local repository for my project files.  This case I am in the home directory. </p>
<img src="http://2.bp.blogspot.com/-GNsUIzUKsxU/USEE-qL762I/AAAAAAAAJC8/3G-sAxlLhJ4/s1600/github-hub-git-init.png" class="img-topic">
<p>To start with I am just going to add my global git configuration files to the repository.&nbsp; I’ll add more later.</p>
<img src="http://2.bp.blogspot.com/-neIzVzzUoJg/USEE-q3dtsI/AAAAAAAAJDI/-xASTudbyfg/s1600/github-hub-add-git-global-files.png" class="img-code">
<p>Using <code>git status</code> I can see I have the desired files ready to be committed.  So lets commit them to my local repository with a suitably clear message.</p>
<img src="http://1.bp.blogspot.com/--6TpvMsdlMc/USEE-jQi2KI/AAAAAAAAJDM/ffpK4A_I67c/s1600/github-hub-commit-git-global-files.png" class="img-code"> 
<p>Now my git global configuration files are committed locally, so if they change I will be able to compare then to what is in git.</p>
<p>So far I haven’t needed to use Hub, but now I want to share these configuration files via <a href="https://github.com/" target="_blank" rel="external">Github</a>.&nbsp; I could go onto the website and then come back to the command line and add a remote for the <a href="https://github.com/" target="_blank" rel="external">Github</a> repository I just added.&nbsp; Using hub, I can just stay in the command line.</p>
<p>Using hub create command I can create a repository on <a href="https://github.com/" target="_blank" rel="external">Github</a>, specifying the name of the repository and using the -d option I can also include a description </p>
<img src="http://1.bp.blogspot.com/-f1QQzjVV6Jw/USEFALeFKkI/AAAAAAAAJDY/JKx8RdRgDJw/s1600/github-use-hub-to-create-repo-from-local.png" class="img-code"> 
<p>A repository on <a href="https://github.com/" target="_blank" rel="external">Github</a> has been created and the remote address was automatically added to my local git project. Yay!</p>
<p>To make absolutely sure just this first time, I have a quick look on the <a href="https://github.com/" target="_blank" rel="external">Github</a> website and sure enough there is my new repository.</p>
<img src="http://1.bp.blogspot.com/-BPYXNYU2cRs/USEFAFe9VsI/AAAAAAAAJDo/OQ7jVN9HoYE/s1600/github-hub-github-repo-created-on-website.png" class="img-code"> 
<p>Okay, so now I have a shiny new repo on github, its time to push my changes to it from my local repository.&nbsp; Again, we are back to just using git commands.</p>
<img src="http://4.bp.blogspot.com/-u0yQgPNi2Yw/USEFAaUo7KI/AAAAAAAAJDg/o_NgrFROnB8/s1600/github-hub-push-git-global-files.png" class="img-code"> 
<p>To check everything is up to date on both the local and remote repositories, I do a quick git log and see (thanks to <a href="http://blog.jr0cket.co.uk/2013/01/git-log-makes-multiple-repos-easier-to.html" target="_blank" rel="external">my git log customisations</a>) that the remote repository (origin/master) is at the same commit version as my local repository (master).</p>
<img src="http://3.bp.blogspot.com/-hCvA5-QYM-U/USEE_Ufk1rI/AAAAAAAAJDE/Pku_XLfEXpI/s1600/github-hub-git-lg.png" class="img-code">
<h1 id="Summary_of_Hub">Summary of Hub</h1><p>There is a lot more to hub that I will try out, but the most immediate use is to be able to create a <a href="https://github.com/" target="_blank" rel="external">Github</a> repository without having to switch from the command line.</p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="http://1.bp.blogspot.com/-qlVcL6zWbjY/TzFMw8PPiGI/AAAAAAAAEbs/-Ozv0X_6mrQ/s1600/github-logo.png" class="img-thumbnail">
<p>Its easy to create a new repository on <a href="https://github.com/">Github</a> website and then use your git tool or command line to clone it or add that remote repository to your project on your development machine. It would be even easier if you could just do it all from the command line with one command. Well, if you install <strong><a href="http://defunkt.io/hub/">Hub</a></strong> then you can!</p>]]>
    
    </summary>
    
      <category term="github" scheme="http://jr0cket.co.uk/tags/github/"/>
    
      <category term="hub" scheme="http://jr0cket.co.uk/tags/hub/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Global Git Ignores Make Collaborative Development Easier]]></title>
    <link href="http://jr0cket.co.uk/2013/02/global-git-ignores-make-collaborative-development-easier.html.html"/>
    <id>http://jr0cket.co.uk/2013/02/global-git-ignores-make-collaborative-development-easier.html.html</id>
    <published>2013-02-08T15:22:00.000Z</published>
    <updated>2015-03-18T15:08:46.208Z</updated>
    <content type="html"><![CDATA[<img src="http://git-scm.com/images/logo.png" class="img-thumbnail">
<p>Lots of developers are using git, especially when working on projects together.&nbsp; However there is not one single developer tool that every one uses, so there is potential for a lot of unwanted files to end up in your project.</p>
<p>Rather than pollute the .gitignore file for the project with every development tool under the sun, its much more effective to add development tool specific files to your own global ignore file <code>~/.gitignore_global</code>.</p>
<a id="more"></a>
<h1 id="Creating_my_own_global_ignores">Creating my own global ignores</h1><p>In the <code>~/.gitconfig</code> of my home directory I have a section called <code>[core]</code> where a global excludes file is defined</p>
<pre><code>[core]
  excludesfile = <span class="regexp">/Users/jstevenson</span><span class="regexp">/.gitignore_global&lt;/span</span>&gt;
</code></pre><p>By adding file name patters to the <code>.gitignore_global</code> file for Emacs, I can add my own personal excludes without adding unnecessary stuff to each project I work on.  It also means its one  less thing to remember when I am working with git projects.</p>
<p>In the root of your home directory, simple create or update the file <code>.gitignore_global</code> with all the file names and patterns that relate to the tools you use.</p>
<h1 id="Ignore_patterns">Ignore patterns</h1><p>To help you out, here are some ignore patterns for some of the most common developer tools.&nbsp; There are lots of ignore patterns on the <a href="https://github.com/github/gitignore/tree/master/Global" target="_blank" rel="external">Git Ignore github repository</a></p>
<h2 id="Emacs_ignore_patterns">Emacs ignore patterns</h2><img src="http://1.bp.blogspot.com/-PLeobToC6lc/TzFJCfBSLPI/AAAAAAAAEbE/zSx1cOgHzZE/s1600/emacs128x128icon.png" class="img-thumbnail">
<p>I use Emacs for much of my development projects, so here are some ignore patters I add to my <code>.gitignore_global</code> file</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*~&#10;\#*&#10;\#&#10;/.emacs.desktop&#10;/.emacs.desktop.lock&#10;.elc&#10;auto-save-list&#10;tramp&#10;.\#*</span><br></pre></td></tr></table></figure>
<h2 id="Org-mode">Org-mode</h2><p>I also create a lot of developer content using Emacs Org-mode, so here are the ignore patterns I add for this.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.org-id-locations&#10;*_archive</span><br></pre></td></tr></table></figure>
<h2 id="Vi_/_Vim">Vi / Vim</h2><p>.*.s[a-w][a-z]</p>
<h2 id="IntelliJ_ignore_patterns">IntelliJ ignore patterns</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*.iml&#10;*.ipr&#10;*.iws&#10;.idea/</span><br></pre></td></tr></table></figure>
<h2 id="Netbeans_ignore_patters">Netbeans ignore patters</h2><img src="http://2.bp.blogspot.com/-EjfbbP6MpJo/URUV9U3X4ZI/AAAAAAAAJCY/RagOD9XWMZs/s1600/netbeans-logo.jpg" class="img-thumbnail"> 
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nbproject/private/&#10;build/&#10;nbbuild/&#10;dist/&#10;nbdist/&#10;nbactions.xml&#10;nb-configuration.xml&#10;&#10;&#10;## Eclipse ignore patters&#10;&#10;&#123;% img img-thumbnail http://1.bp.blogspot.com/-RmrjIrvG7dE/URUVuk2P5QI/AAAAAAAAJCQ/RGcprIpBxjc/s1600/Eclipse_Icon_by_flosweb.png %&#125;&#10;&#10;``` .gitignore_global&#10;*.pydevproject &#10;.project &#10;.metadata &#10;bin/** &#10;tmp/** &#10;tmp/**/* &#10;*.tmp &#10;*.bak &#10;*.swp &#10;*~.nib &#10;local.properties &#10;.classpath &#10;.settings/ &#10;.loadpath &#10;.externalToolBuilders/ &#10;*.launch &#10;.cproject&#10;.buildp</span><br></pre></td></tr></table></figure>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="http://git-scm.com/images/logo.png" class="img-thumbnail">
<p>Lots of developers are using git, especially when working on projects together.&nbsp; However there is not one single developer tool that every one uses, so there is potential for a lot of unwanted files to end up in your project.</p>
<p>Rather than pollute the .gitignore file for the project with every development tool under the sun, its much more effective to add development tool specific files to your own global ignore file <code>~/.gitignore_global</code>.</p>]]>
    
    </summary>
    
      <category term="git" scheme="http://jr0cket.co.uk/tags/git/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MonkiGras 2013 Aftermath - Bigger, Bolder and Craftier]]></title>
    <link href="http://jr0cket.co.uk/2013/02/monkigras-2013-aftermath-bigger-bolder.html.html"/>
    <id>http://jr0cket.co.uk/2013/02/monkigras-2013-aftermath-bigger-bolder.html.html</id>
    <published>2013-02-05T11:49:00.000Z</published>
    <updated>2015-03-18T15:08:46.212Z</updated>
    <content type="html"><![CDATA[<img src="http://4.bp.blogspot.com/-k14DzhO7g38/TzASLJEEtpI/AAAAAAAAEa0/yHjSub8rNSg/s1600/monki-gras-2012-banner.jpg" class="img-thumbnail"> 
<p>Monki Gras conference has only just had its second outing and already its become a bit of a legend.  Its one of those conferences that is highly social and highly stimulating and also quite exhausting in a good way.  Here is some of the excitmemet I managed to capture.</p>
<a id="more"></a>
<p>Amazingly this years event only started half an hour late and was even bigger than <a href="http://jr0cket.co.uk/2012/02/monki-gras-london-craft-of-conferences.html" target="_blank" rel="external">last year</a>.  Here are some highlights from the 2013 event.</p>
<h1 id="James_Governor_setting_the_tone">James Governor setting the tone</h1><img src="http://3.bp.blogspot.com/-8gOVnx6gJWQ/UHg6D67NjrI/AAAAAAAAIYM/um3MEP7lMOM/s1600/james-govenor.jpg" class="img-thumbnail"> 
<p>In the passed, companies turned to mass production to optimise for productivity and  by consequence turned people who work in that environment into faceless drones.</p>
<p>What we need are tools and practices that support people rather than replace people.</p>
<p>As developers we have a thirst for learning how to use our tools well and how to adopt and adapt a variety of practices to improve our work.  This is now starting to become wide-spread across many other industries.</p>
<h1 id="Coffee_as_collaboration_at_Heroku">Coffee as collaboration at <a href="http://www.heroku.com/" target="_blank" rel="external">Heroku</a></h1><img src="http://farm6.static.flickr.com/5297/5396355671_d21981c6db.jpg" class="img-thumbnail">
<p><a href="https://twitter.com/craigkerstiens" target="_blank" rel="external">Craig Kerstiens</a> &amp; <a href="https://twitter.com/mattt" target="_blank" rel="external">Matt Thompson</a> - <a href="http://www.heroku.com/" target="_blank" rel="external">Heroku</a></p>
<p>Some revellers enjoyed a rather liquid breakfast, for those that felt it was just a little too early for beer then it was coffee time with Heroku. </p>
<p>Matt and Craig Kerstiens talked about how the team at <a href="http://www.heroku.com/" target="_blank" rel="external">Heroku</a>, the Herokai, manage to maintain the collaboration within a growing startup.</p>
<p><a href="http://www.heroku.com/" target="_blank" rel="external">Heroku</a> now has 85 people, loosely organised into 21 teams.  Overall the company manages 5000 internal heroku apps and schedules 500 releases a day.  Much of the code is available in close to 200 <a href="https://github.com/organizations/heroku" target="_blank" rel="external">public Github repos</a>.</p>
<p>As a developer you spend a lot of time with your head down working and that limits your level of communicating.  A good balance is important for a healthy company.  Communication however is different from interruption and its well agreed fact that one interruption costs 20 minutes.  What is less well understood is that a developer gets typically 2 hours of uninterrupted working in an 8 hour day. </p>
<h2 id="So_how_do_you_encourage_communication_with_Coffee?">So how do you encourage communication with Coffee?</h2><p>Actually, its very hard to make a single cup of coffee at the Heroku office.  All the coffee making machines are geared up for several cups.  So you have to find someone to share coffee with you and you end up having a conversation as you are waiting.</p>
<p>Making Coffee in this way is also a great way break the ice.  Its easy to learn and as a simple craft you can show new people how to make coffee as a way of introduction to the company.  The Coffee mentioning role gives a way to demonstrate and convey some of the values of the company at the same time.</p>
<img src="http://sphotos-b.xx.fbcdn.net/hphotos-ash4/300731_349185285162367_2128347492_n.jpg" class="img-thumbnail">
<h2 id="Headphone_rule">Headphone rule</h2><p>Its an unwritten rule in Heroku that when someone has their headphones on it means “Do not disturb”.  This allows developers to focus on their work without haviing to justify that focus to anyone else.</p>
<p>In Heroku this approch is seen as an engineers thing and sometimes others in the company dont get it at first.</p>
<h2 id="Makers_day_is_Thursday">Makers day is Thursday</h2><p>Every Thursday is sacred at Heroku and no meetings should be scheduled.  This allows engineers to easy to turn down a meeting on makers day without feeling awkward.</p>
<p>On Wednesdays Heroku have their all hands day right after lunch.  Because of this interuption, engineers typically arrange all their meetings that day.  This makes the rest of the week pretty effective for getting things done.  It also encourages others to think about the value of a meeting.</p>
<blockquote>
<p><a href="https://twitter.com/sjmaple" target="_blank" rel="external">sjmaple</a> Great heroku talk! At ZeroTurnaround you’re not allowed to book meetings on Wednesday or Thursday! productivity++ #monkigras</p>
</blockquote>
<h2 id="Encouraging_ad-hoc_Communication">Encouraging ad-hoc Communication</h2><p>Sometimes the best conversations happen at random, so lunch is catered every day.  As well as a great perk it also is very communal.  The dining area has a few long tables for about 12 people, helping group discussions.  The eclectic variety of food make people more willing to communicate, often asking “how do we eat this”.</p>
<p>Friday is beer day.  This is more than just drinking beer, Herokai are encouraged to suggest drinks that should be ordered.  Its also a great way to get everyone reflect on the week just gone.</p>
<h2 id="Challenges_still_remaining">Challenges still remaining</h2><p>There is an increasing number of remote employees and maintaining regular communication is tough.</p>
<p>There is also the effect of the <a href="http://en.wikipedia.org/wiki/Allen_curve" target="_blank" rel="external">Allen curve</a>, which shows the exponential drop in freqnuecy of communication between engineers as the distance between them grows.</p>
<img src="http://1.bp.blogspot.com/-lSm0m8MOyj4/URDjKBU15UI/AAAAAAAAJAk/f1aAuDtuHdE/s1600/curva-allen-curve.png" class="img-code"> 
<p>To help everyone understand the challenges and crowd source for ideas, Heroku hold a remote week where their office is closed.  Everyone in the company works remotely, from home, on the road or out and about in their location.</p>
<p>This type of activity could also help with focusing on common tools and service consolidation.  As each team has ownership of their own practices, then tools and services have exponentially spread.  Some concensus and culling of stuff would be help communication.</p>
<h1 id="Making_for_makers">Making for makers</h1><p><a href="https://twitter.com/mnowster" target="_blank" rel="external">Mazz Mosley</a> &amp; <a href="https://twitter.com/nickstenning" target="_blank" rel="external">Nick Stenning</a> - GDS</p>
<p>Imaging you are a craftsman with years of experience, what would happen if all of the people you dealt with were gone?  Could you imaging the emmense chain of resorces that allow you to practice your craft?</p>
<h2 id="Enter_Quantum_Physics">Enter Quantum Physics</h2><p><a href="http://bouman.chem.georgetown.edu/general/feynman.html" target="_blank" rel="external">I think I can safely say that nobody understands quantum mechanics - Richard P. Feynman_</a>.  There are very few people who claim to understand quantum physics, although every JavaScript programmer fundamentally relies on the principles of quantum mechanics.  Rather than make JavaScript developer spend years studying quantum physics they use <a href="http://angeleah.com/blog/2012/11/02/black-box-abstraction.html" target="_blank" rel="external">black box abstraction</a>.</p>
<p>We have relationships with people who can do all the things we need to do our almost everything we use is an abstraction that allows us to use it effectively rather than trying to understand how its made.  The exception being soap which is a harder abstraction than the process it is supposed to encapsulate.</p>
<h2 id="Users_are_users_even_if_they_are_makers-">Users are users even if they are makers.</h2><blockquote>
<p>Or in my words “Developers are people too” @jr0cket</p>
</blockquote>
<p>You should  understand the complexity that you pass on to your users, especially if you want to keep them!</p>
<blockquote>
<p>kenneth reitz <a href="http://kennethreitz.org/expressions/how-i-develop-things-and-why" target="_blank" rel="external">the user api is all that matters everything else is secondary </a></p>
</blockquote>
<h2 id="Scaling_the_new_Government_website">Scaling the new Government website</h2><img src="http://3.bp.blogspot.com/-ndLKp9hcA5Q/URDt3Uyc3zI/AAAAAAAAJBU/-rPdlzH2TQQ/s1600/alpha_homepage_grab.jpg" class="img-topic">
<p>In 12 weeks, a dozen people built alpha.gov.uk website from scratch to deployment and much rejoycing was had by all.</p>
<p>In 8 months, a team of 48 people built the beta version of the website.  In october 2012, the real site was launched using a team of 200 people.</p>
<p><em>So how did they scale the team in a short amount of time?</em></p>
<p>No rockstar, wizzards or ninjas were hired.  These types of developer egos all seem to drink from the ego boosting cool aid, making the same kind of mistakes as they have the same kind of attitude.  Rockstars are bullsh*t, Rockstars are not webscale!.  Rockstars are not used to listening to there users and that includes those other developers they work with every day.  A good team needs diverse set of people, to create a passionate team.</p>
<p><em>Assembling a team is a skill in its own right.</em></p>
<p>At GDS it was about hiring people who understood what the company was trying to achieve. When something is hard and not very well defined the best way to deal with this is to give it to people,  lots of diverse people who understand the goal you are working towards and have a diverse set of experiences to draw from.</p>
<p>On paper, going from alpha to beta to production in such a short time frame you need to leave your ego at the door to get stuff done</p>
<blockquote>
<p>Mazz, Uncle Bob &amp; Stan Lee: With great diversity comes great collective intelligence and power!</p>
</blockquote>
<h1 id="Scaling_happiness">Scaling happiness</h1><p><a href="https://twitter.com/tnm" target="_blank" rel="external">Ted Nyman</a> - Github </p>
<blockquote><p>Why do you love someone?  If you love someone for intelligence or bone structure,  then you should also love people who have even nicer examples of these things.</p>
<footer><strong>Plato</strong><cite>On Love</cite></footer></blockquote>
<img src="http://3.bp.blogspot.com/-10Ndc3AUd7c/URDsrM19YBI/AAAAAAAAJBI/4BC0CmkLKTg/s1600/perks-are-best-here.jpg" class="img-topic"> 
<p>Perks do not make people happy, they come and go and you cant build culture with tokens.  Token freedom perks are transitory and eventually make you wonder why a positive thing is only available a small part of the time.  If your company said you could go out in the sun for two hours once a month then you have to come inside.  You would quickly come to realise that going back inside is not where you want to be.</p>
<p>The real way you make people happy is in the organisation of the people in the company.  At Github there are no formal managers.  Cultural and technology adaptations grow naturally from this.  For example, everyone becomes part of the traditional management functions and that role becomes dispersed.  Everyone becomes responsible from hiring and ensuring people are happy.</p>
<p>If you create the structure that lets the culture form, then a culture grows to reinforces that structure.  The structure at Github being that we dont have a structure.  Everything that people need taken care of get taken care of as otherwise people complain.  Sometimes this means people doing things for themselves, or collaborating with others to get it done.</p>
<p>There are probably good managers out there, Ted just cant thing of any, well except for <a href="http://en.wikipedia.org/wiki/Julius_Caesar" target="_blank" rel="external">Julius Caesar</a>, he was a good manager!</p>
<p>The challenge remaining is that nothing actually scales, this is especially true when it comes to people.</p>
<h2 id="Summary">Summary</h2><p>There is so much more to Monki Gras that what I managed to capture here (or would care to share in public).  The conference is really engaging and it will take a while for all the ideas and practices I experienced to peculate through my brain.</p>
<p>The evening event was amazing too, with fine food arranged to match the Craft brewed beer we were sampling.  Its a good job the conference ends on Fridays, so I could recover over the weekend.</p>
<p>Thank you.</p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="http://4.bp.blogspot.com/-k14DzhO7g38/TzASLJEEtpI/AAAAAAAAEa0/yHjSub8rNSg/s1600/monki-gras-2012-banner.jpg" class="img-thumbnail"> 
<p>Monki Gras conference has only just had its second outing and already its become a bit of a legend.  Its one of those conferences that is highly social and highly stimulating and also quite exhausting in a good way.  Here is some of the excitmemet I managed to capture.</p>]]>
    
    </summary>
    
      <category term="monkigras" scheme="http://jr0cket.co.uk/tags/monkigras/"/>
    
      <category term="events" scheme="http://jr0cket.co.uk/categories/events/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Git Log Makes Multiple Repos Easier to Track]]></title>
    <link href="http://jr0cket.co.uk/2013/01/git-log-makes-multiple-repos-easier-to.html.html"/>
    <id>http://jr0cket.co.uk/2013/01/git-log-makes-multiple-repos-easier-to.html.html</id>
    <published>2013-01-29T00:42:00.000Z</published>
    <updated>2015-03-18T15:08:46.208Z</updated>
    <content type="html"><![CDATA[<img src="http://git-scm.com/images/logo.png" class="img-thumbnail"> 
<p>Git is a great developer tool for managing and sharing code.  Its really easy to get started with, especially with services such as <a href="https://github.com/" target="_blank" rel="external">Github</a> and their excellent <a href="http://try.github.com/" target="_blank" rel="external">try.github.com</a> website.  I quickly became comfortable with the basic developer cycle: </p>
<pre><code>git init
git status 
git add filename
git commit -m <span class="string">"useful message"</span>
git push
;; <span class="keyword">back</span> <span class="keyword">to</span> git status...
</code></pre><p>To keep track of changes when you just have a local repository is easy with <code>git status</code>.</p>
<a id="more"></a>
<h1 id="Git_log_for_tracking_multiple_repositories">Git log for tracking multiple repositories</h1><p>When you start sharing a remote repository then changes are distributed and developers start using <code>git log</code> to track changes across repositories.  The challenge with <code>git log</code> is that by default you have to scroll through a lot of text to see what is happening.  This gets a bit tedious really quickly.</p>
<img src="http://2.bp.blogspot.com/--Oj7Ocw5ddA/UQavWR8_1oI/AAAAAAAAI-M/g1hbsrRRbJ4/s1600/git-log-default-output.png" class="img-code">
<p>Luckily, the <code>git log</code> output is very configurable so its really easy to get a clearer picture.  The most useful options to git log include </p>
<p><code>--abbrev-commit</code> - only shows the last part of the very long commit name, the sha.  This is now a default option since Git 1.7.x</p>
<p><code>--graph</code> - show an ascii art graph of the commit history, also known as the commit graph.</p>
<p><code>--pretty=oneline</code> or <code>--oneline</code> - print each commit entry on a sigle line, which can be scrolled horizontally to see longer commit messages.  The one-line value is one of several built in formats to the —pretty option and in this case can be used as an option on its own.</p>
<p><code>--decorate</code> - shows the forks, branches and tag names relative to the commit history, helping you keep track of latest commit on each branch and across all your remote repositories.  Decorate therefore provides a quick way to see which commits have been merged or pushed.</p>
<p>Putting all these options together you get a much simpler and easier to follow view of the commit history.</p>
<img src="http://2.bp.blogspot.com/-s_hKo72A__c/UQcUcUJP71I/AAAAAAAAI_M/Zf0G9Zi_1b0/s1600/git-log-commit-graph-decorate-oneline-abbrev-commit.png" class="img-code"> 
<h1 id="Creating_git_aliases">Creating git aliases</h1><p>Rather than type git log and all these options each time (or scroll through your shell history), you can create a git alias as a shortcut for this long command line</p>
<p>I create an alias called <code>lg</code> for git log as follows:</p>
<pre><code><span class="comment">git</span> <span class="comment">config</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">global</span> <span class="comment">alias</span><span class="string">.</span><span class="comment">lg</span> <span class="comment">'log</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">graph</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">oneline</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">decorate'</span>
</code></pre><p>This will add the alias called lg to your <code>~/.gitconfig</code> file.  You could also edit this file directly and add aliases manually.</p>
<pre><code>&lt;pre&gt;`[<span class="type">alias</span>]
    lg = <span class="command">log</span> <span class="comment">--graph --oneline --decorate</span>
</code></pre><h1 id="The_commit_graph">The commit graph</h1><p>Visualising the commit graph is my must-have tool when using git, I use it nearly as often as <code>git status</code>.  The commit graph shows a history of commits and the position of repos in that history.  When there are branches, this is rendered as a tree-like structure and it is easy to see the relative status of your local and remote repositories attached to the project.</p>
<img src="http://1.bp.blogspot.com/-iDu7u9zb1oA/UQcU1yeQWyI/AAAAAAAAI_U/ML7tNMPDmRc/s1600/git-commit-graph-stylised.png" class="img-code">
<p>Most common status in git is to have your local repository ahead of the remote masters in terms of commits, with <strong>HEAD</strong> pointing to you local repo. Its quite common to do a group of related commits locally before pushing then to a shared remote repo.  When the remote repo is behind your local repo, this is quite obvious from the commit graph, as its on an earlier commit version and therefore a different line of the graph.</p>
<p>You can see when a push happens to a remote repository from your local repo, as the branch merges into the trunk.  When everything that has been committed locally has been pushed then you can see the remote branch at the same commit version as the local.</p>
<p>In the situation where you have multiple repositories, for different stages of the development workflow (for example testing, staging, CI), the commit graph really makes the status of your different repositories really clear.  You can see at a glance the commit version each repo is on.  The commit graph also helps you understand which commits to push to which repos.  This is also invaluable when merging two longer running branches (should you get to that situation).</p>
<h1 id="Designing_your_own_commit_graph">Designing your own commit graph</h1><p>In the next article I will cover how to create your own design for the git commit graph, creating several aliases for different levels of information </p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="http://git-scm.com/images/logo.png" class="img-thumbnail"> 
<p>Git is a great developer tool for managing and sharing code.  Its really easy to get started with, especially with services such as <a href="https://github.com/">Github</a> and their excellent <a href="http://try.github.com/">try.github.com</a> website.  I quickly became comfortable with the basic developer cycle: </p>
<pre><code>git init
git status 
git add filename
git commit -m <span class="string">"useful message"</span>
git push
;; <span class="keyword">back</span> <span class="keyword">to</span> git status...
</code></pre><p>To keep track of changes when you just have a local repository is easy with <code>git status</code>.</p>]]>
    
    </summary>
    
      <category term="git" scheme="http://jr0cket.co.uk/tags/git/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Git Interactive Cheetsheet for Visually Oriented Developers]]></title>
    <link href="http://jr0cket.co.uk/2013/01/git-interactive-cheetsheet-for-visually.html.html"/>
    <id>http://jr0cket.co.uk/2013/01/git-interactive-cheetsheet-for-visually.html.html</id>
    <published>2013-01-28T14:43:00.000Z</published>
    <updated>2015-03-18T15:08:46.208Z</updated>
    <content type="html"><![CDATA[<img src="http://git-scm.com/images/logo.png" class="img-thumbnail">
<p>Sometimes reading a big book or looking at a long list of commands is the last thing you want to do when discovering how to use a new tool.  So it was great to find a very visual way to show the git commands and how they work.</p>
<a id="more"></a>
<h1 id="Git_Interactive_Cheetsheet">Git Interactive Cheetsheet</h1><p>The <a href="http://ndpsoftware.com/git-cheatsheet.html" target="_blank" rel="external">Git Interactive Cheetsheet</a> from <a href="http://ndpsoftware.com/" target="_blank" rel="external">NDP Software</a> does exactly that.  By clicking on different stages of your development workflow, you can see the related commands that you can use.  Hover over a specific command and you get a short description of what it will do.  The site also shows you the direction in which those commands work, supporting your understanding of those commands.</p>
<img src="http://2.bp.blogspot.com/-J9v-PxiEsUc/UQaNN7xzNxI/AAAAAAAAI9s/RvGXB5Q68fw/s1600/git-interactive-cheetsheet-local-repo-commands.png" class="img-code">
<h1 id="In_Summary">In Summary</h1><p>It would be great if more tools have this kind of visualisation around them, especially involving the developer workflow that they support.</p>
<p>I have created some basic visualisation of developer workflows using Inkscape, an open source drawing tool.  The results can be seen at my developer guides on Github pages.</p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="http://git-scm.com/images/logo.png" class="img-thumbnail">
<p>Sometimes reading a big book or looking at a long list of commands is the last thing you want to do when discovering how to use a new tool.  So it was great to find a very visual way to show the git commands and how they work.</p>]]>
    
    </summary>
    
      <category term="git" scheme="http://jr0cket.co.uk/tags/git/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[London Salesforce Developer Meetup - January 2013]]></title>
    <link href="http://jr0cket.co.uk/2013/01/london-salesforce-developer-meetup.html.html"/>
    <id>http://jr0cket.co.uk/2013/01/london-salesforce-developer-meetup.html.html</id>
    <published>2013-01-23T20:30:00.000Z</published>
    <updated>2015-03-18T15:08:46.208Z</updated>
    <content type="html"><![CDATA[<p>Its been a cold week in London so its great to see so many venture out to the latest meetup of the London Salesforce Developer community.</p>
<p>Thanks to our hosts, <a href="http://www.makepositive.com/" target="_blank" rel="external">Make Positive</a>, there was plenty of pizza to warm everyone up and plenty of drinks to cool everyone down again.  Make positive have a very roomy office to work in and its a great space to talk to other developers and admins involved in forcedotcom projects.</p>
<a id="more"></a>
<p>We had a great talk from Rob Cowel, giving his insight into developing applications and system integrations across three cloud platforms: forcedotcom, heroku and <a href="https://www.iriscouch.com/" target="_blank" rel="external">IrisCouch</a> (CouchDB).</p>
<p>I also gave a quick update of Salesforce news, up coming events, new organisers for the community and a collection of resources for developers getting started with the force.</p>
<iframe allowfullscreen frameborder="0" height="356" marginheight="0" marginwidth="0" mozallowfullscreen="" scrolling="no" src="http://www.slideshare.net/slideshow/embed_code/16138024" style="border-width: 1px 1px 0; border: 1px solid #CCC; margin-bottom: 5px;" width="427"> </iframe> 

<p><a href="http://www.slideshare.net/JR0cket/london-salesforce-developers-meetup-january-2013" title="London Salesforce Developers Meetup January 2013" target="_blank" rel="external">London Salesforce Developers Meetup January 2013</a> from <a href="http://www.slideshare.net/JR0cket" target="_blank" rel="external">John Stevenson</a></p>
<p>t of people whist not playing ping pong. As always there is a good mix of people, including Salesforce staff, the Make Postive team, developers from Tquila and many more.</p>
<p>I met a developer who has been working on a blog, <a href="http://www.cloudfollows.com/" target="_blank" rel="external">www.cloudfollows.com</a>, with others around the world aimed at those relatively new to the forcedotcom platform.  A quick glance had me very interested.  It looks a well presented site with lots of handy tips.</p>
<p>I caught up with Salesforce MVP’s Francis Pindar and Keir Bowden and they are keen to run some workshops to help people gain experience with the platform.  We’ll be running our first workshops in Tower42 on the 11th April.  There will be room for approximately 10 developers. </p>
<p>There is always so much conversation going on and I often hate to break it up for the talks.</p>
<h2 id="The_Talks">The Talks</h2><p>I  gave a quick overview of coding events we are running for the community.  This includes <strong><a href="http://jr0cket.co.uk/2013/02/hack-tower-february-2013.html" target="_blank" rel="external">Hack the Tower</a></strong> and the upcoming coding dojo for Salesforce developers at Tquila.</p>
<p><strong>John Mahoney, Clerisoft.com</strong> gave a quick demo of Steroid, a custom components framework for the forcedotcom platform.  It provides a  library of re-usable custom components for both desktops &amp; mobile  devices.  Clerisoft developers pick ideas that are requested on … but are not planned to be added to the platform by Salesforce engineers.</p>
<p>John was looking for feedback on the concept, what components developers would find valuable and any for pepole to go try them out.</p>
<p><strong>Keir Bowden, Salesforce MVP</strong> gave a quick run  through of the <a href="http://certification.salesforce.com/Developers" target="_blank" rel="external">developer certification</a> process.  Each level of certification has been designed to help you grow your  skills and get great roles in industry.  Salesforce and it customers really value the certification process, as it gives a measure of confidence in the ability to deliver projects successfully.</p>
<p>Keir is also driving the  formation of the EMEA TA review board, which is a peer review process  for the top level of Salesforce developer certification.</p>
<p>Keir has now experienced the review board from the inquisitor side, being involved in the first EMEA review board. As Keir is now on the EMEA review board he is no longer in a position to offer advice on how to pass the TA certification.</p>
<p>Keir invited Chris Eales along to share his experiences, as Chris is the latest Technical Architect to pass the certification level.</p>
<h2 id="Next_months_meetup">Next months meetup</h2><p>The next monthly meetup for the <a href="http://www.meetup.com/LondonSalesforceDevelopers/events/96135922/" target="_blank" rel="external">London Salesforce developers</a> is at Make Positive on the 27th March.  If you want to speak about anything please get in touch or leave a message on the meetup event. </p>
<p>Sign up at: <a href="http://www.meetup.com/LondonSalesforceDevelopers/events/96135922/" target="_blank" rel="external">http://www.meetup.com/LondonSalesforceDevelopers/events/96135922/</a></p>
<p>See you there.<br>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Its been a cold week in London so its great to see so many venture out to the latest meetup of the London Salesforce Developer community.</p>
<p>Thanks to our hosts, <a href="http://www.makepositive.com/">Make Positive</a>, there was plenty of pizza to warm everyone up and plenty of drinks to cool everyone down again.  Make positive have a very roomy office to work in and its a great space to talk to other developers and admins involved in forcedotcom projects.</p>]]>
    
    </summary>
    
      <category term="salesforce" scheme="http://jr0cket.co.uk/tags/salesforce/"/>
    
      <category term="events" scheme="http://jr0cket.co.uk/categories/events/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Markdown Driven Developer Sites on Heroku - Easily Create an Online Workshop]]></title>
    <link href="http://jr0cket.co.uk/2013/01/markdown-driven-developer-sites-on.html.html"/>
    <id>http://jr0cket.co.uk/2013/01/markdown-driven-developer-sites-on.html.html</id>
    <published>2013-01-21T13:58:00.000Z</published>
    <updated>2015-03-18T15:08:46.208Z</updated>
    <content type="html"><![CDATA[<img src="http://2.bp.blogspot.com/-yIBn-HYfxeA/UI_UGVJF6AI/AAAAAAAAIdo/MLPDWYCbX2Q/s1600/heroku-logo-light-300x100.png" class="img-thumbnail"> 
<p><a href="http://www.heroku.com/" target="_blank" rel="external">Heroku</a> is a great platform to deploy your web apps, in a way that just works  for developers.  What isnt obvious is you can also deploy static sites too.</p>
<p>As Markdown is now common way for developers to  create documentation, why not use Heroku to deploy your markdown driven content site.</p>
<a id="more"></a>
<h2 id="Collaborating_force">Collaborating force</h2><p>The <a href="http://developer.salesforce.com/" target="_blank" rel="external">Salesforce developer evangelist team</a> are doing just this, creating workshops written in markdown.  The workshops are deployed on Heroku and we collaborate via Github.  This is a really effective way to collaborate as we are remote workers and often on our travels. </p>
<h2 id="Markdown_is_simple">Markdown is simple</h2><img src="http://2.bp.blogspot.com/-vdbLJDFnR7Q/UPxhMffM05I/AAAAAAAAI8k/1HLAKXNX5jU/s1600/markdown-logo.gif" class="img-topic"> 
<p>Markdown is really easy to learn and really easy to read.  Its much better to read in its raw form than most Wiki Markup languages.  If you have a good editor (Emacs &amp; Emacs Live) then reading and writing markdown is a great experience.</p>
<p>Its also pretty easy to convert Markdown to different formats such as HTML and PDF.</p>
<p>I picked up all the markdown syntax from working with Github readme.md files and from writing markdown in Emacs.  SimpleCode.me also has a really good <a href="http://www.simplecode.me/2011/12/11/getting-started-with-markdown/" target="_blank" rel="external">getting started with markdown guide</a>. </p>
<h2 id="Creating_the_content_in_markdown">Creating the content in markdown</h2><img src="http://2.bp.blogspot.com/-hiVZZWkLlbg/UPAGL_h-U4I/AAAAAAAAI5Q/J3CzFdhvziw/s1600/emacs-live-docs-themed.png" class="img-topic"> 
<p>Any editor can be used two work on the content for the workshops, this is another beauty of markdown.  I recommend Emacs with <a href="http://blog.jr0cket.co.uk/2013/01/emacs-live-great-clojure-developer.html" target="_blank" rel="external">Emacs Live setup</a> or you are using MacOSX, then <a href="http://mouapp.com/" target="_blank" rel="external">Mou</a> gives you live rendering of you content as you type.</p>
<p>To make the markdown render in HTML and PDF similar to the style used on github, a fairly simple css file is added to the project. </p>
<h2 id="Creating_your_app_on_Heroku">Creating your app on Heroku</h2><p>As Heroku and Github are both going to be used then the projects are versioned with Git.  A git repository is created on Github at the start of a new workshop.  A github  organisation is used to keep al the projects together.  The new Github repository is cloned and development of the content commences.</p>
<blockquote>
<p>As its a static site then there is not much need for a .gitignore file, assuming you have <a href="http://jr0cket.co.uk/2012/12/gitignore-for-clojure-and-emacs-ignore.html" target="_blank" rel="external">a ~/.gitignore_global file for any backup files</a> that your editor creates.  </p>
</blockquote>
<p>Once the workshop content is good enough to deploy, a new Heroku application is created.  A specific <a href="https://devcenter.heroku.com/articles/buildpacks" target="_blank" rel="external">build pack</a> is used to tell Heroku how to assemble and deploy the markdown as a web  application.  This build pack defines how the HTML is generated from  the markdown, based on a css file included in the project.  The whole  app runs on a HTTP server called SimpleHTTPServer, written in Python.</p>
<p>The app is created on Heroku app using the <a href="https://github.com/jamesward/heroku-buildpack-markdown" target="_blank" rel="external">markdown build pack</a> created by James Ward.  The command line for this is:</p>
<pre><code>heroku create workshop-<span class="property">name</span>  <span class="comment">--buildpack https://github.com/jamesward/heroku-buildpack-markdown.git</span>
</code></pre><h2 id="Telling_Heroku_how_to_run_your_app">Telling Heroku how to run your app</h2><p>A procfile is a simple text  file that tells Heroku what to do with you application when its ready to  run it.  For the markdown site we simply start up a simple HTTP server  which runs on python (we dont need all the bells and whistles of something like Apache).</p>
<p>The <code>web:</code> directive at the front tells heroku to create a process that listens to requests from the Internet.  As we are not  specifying a port number, it will pick up the default port to listen on  from the Heroku environment variables.</p>
<pre><code><span class="attribute">web</span>: <span class="string">python -m SimpleHTTPServer $PORT</span>
</code></pre><h2 id="Deploying_the_markdown_site">Deploying the markdown site</h2><img src="http://1.bp.blogspot.com/-qlVcL6zWbjY/TzFMw8PPiGI/AAAAAAAAEbs/-Ozv0X_6mrQ/s1600/github-logo.png" class="img-topic"> 
<p>As soon as you are ready for your  markdown content to go live, simply push your local repository up to the  Heroku repostiory with the git push command.</p>
<pre><code>git <span class="keyword">push</span>
</code></pre><p>If you have more than one remote repository specified in your git configuration, then all you need to do is specify the specific repository to push to.  By default the heroku create command adds a remote called heroku.</p>
<p>To check what your heroku repository is called you can use the command:</p>
<pre><code><span class="title">git</span> remote -v
</code></pre><p>To push to a remote repository called heroku, use the command:</p>
<pre><code>git <span class="keyword">push</span> heroku master
</code></pre><h2 id="In_summary">In summary</h2><p>It is really easy to create content based on markup. Collaborating on this content is really easy when using Github and deploying this content as a static website is only a git push away with heroku.</p>
<p>Other aspects were are adding to this workshop creation process include:</p>
<ul>
<li>create a staging heroku app to allow testing of content once the site has gone live;</li>
<li>automatically generating a pdf copy of each page every time you deploy a new version.</li>
</ul>
<p>Thank you.</p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="http://2.bp.blogspot.com/-yIBn-HYfxeA/UI_UGVJF6AI/AAAAAAAAIdo/MLPDWYCbX2Q/s1600/heroku-logo-light-300x100.png" class="img-thumbnail"> 
<p><a href="http://www.heroku.com/">Heroku</a> is a great platform to deploy your web apps, in a way that just works  for developers.  What isnt obvious is you can also deploy static sites too.</p>
<p>As Markdown is now common way for developers to  create documentation, why not use Heroku to deploy your markdown driven content site.</p>]]>
    
    </summary>
    
      <category term="depreciated" scheme="http://jr0cket.co.uk/tags/depreciated/"/>
    
      <category term="heroku" scheme="http://jr0cket.co.uk/tags/heroku/"/>
    
      <category term="markdown" scheme="http://jr0cket.co.uk/tags/markdown/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Emacs Live - Instant Clojure Development Environment]]></title>
    <link href="http://jr0cket.co.uk/2013/01/emacs-live-instant-clojure-development-environment.html.html"/>
    <id>http://jr0cket.co.uk/2013/01/emacs-live-instant-clojure-development-environment.html.html</id>
    <published>2013-01-14T23:36:00.000Z</published>
    <updated>2015-03-18T15:08:46.208Z</updated>
    <content type="html"><![CDATA[<img src="/images/emacs-logo.png" class="img-thumbnail">
<p>Emacs is a really powerful tool for Clojure development, although without a guiding hand it can be a bit of a learning curve.  Using the <a href="https://github.com/overtone/emacs-live" target="_blank" rel="external">Emacs Live</a> its really simple to get a fully featured development environment for Clojure.  I will show you how to get Emacs Live installed and how to start using it for Clojure.</p>
<a id="more"></a>
<p>  I also recommend using <a href="http://emacsformacosx.com/" target="_blank" rel="external">EmacsForOSX</a> if you are on a Mac.</p>
<img src="http://1.bp.blogspot.com/-lqWITXmJQYY/UPACxNMM3rI/AAAAAAAAI4o/GfP54cumPSQ/s1600/emacs-live-clojure-repl-magit-leiningen-example.png" class="img-code"> 
<p><a href="https://github.com/overtone/emacs-live" target="_blank" rel="external">Emacs Live</a> is a collection of packages for Clojure that include: </p>
<ul>
<li><strong>Clojure mode</strong> - language support </li>
<li><strong>nREPL</strong> - interactive environment</li>
<li><strong>Magit</strong> - manage git repositories </li>
<li><strong>auto-complete</strong> - tab complete expression names &amp; show documentation</li>
<li><strong>undo-tree</strong> - undo and redo on steroids with a branching history</li>
<li><strong>yasnippets</strong> - abbreviations automatically expand into function templates</li>
</ul>
<h1 id="Installing_Emacs_Live">Installing Emacs Live</h1><p>Emacs Live required Emacs 24 or greater, everything else is self contained.</p>
<p>You could just clone the github repository, but the provided install script makes sure everything is set up correctly and also creates a separate folder for your own personal settings.  This allows you to tweak Emacs Live to your own style without it getting clobbered by any updates.</p>
<p>Run the following in a terminal window (Mac or Linux):</p>
<script src="//gist.github.com/4504972.js"></script>
<p>Before anything is installed, the script will move any old Emacs configuration to <code>~/.emacs.d</code> to a folder called <code>~/.emacs.d-old</code>.</p>
<p>Once all the Emacs Live configuration files are installed, the script asks you if you want to create your own personal configuration.  If so, a new folder will be created called<br><code>~/.live-packs/your-current-username-pack</code>.</p>
<h1 id="How_to_tweak_Emacs_Live">How to tweak Emacs Live</h1><p>Its really easy to add your own key bindings and other configurations to Emacs Live, using the personal pack the script created for you.  The personal pack has an <code>init.el</code> file in which you can add short simple configurations or load in longer configurations from the <code>config</code> or <code>lib</code> folders.</p>
<h2 id="Key_bindings">Key bindings</h2><p>Emacs live makes several changes to the default key bindings of Emacs.  If you want the default  key bindings back then you can simply switch off the Emacs Live key bindings by adding the following to the file <code>~/.emacs-live.el</code></p>
<pre><code><span class="list">(<span class="keyword">live-ignore-packs</span> '<span class="list">(<span class="keyword">live/bindings-pack</span>)</span>)</span>
</code></pre><p>Alternatively, you can learn to love the Emacs Live bindings, or tweak a few in your own personal pack.  I have added a keybinding for launching the Clojure repl and a pair of key bindings for changing the font size, making it easier to change fonts when giving a demo.</p>
<p>To make the change in my personal pack, I added the following to the file <code>~/.live-packs/jstevenson-pack/config/bindings.el</code></p>
<figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">;; Simpler <span class="keyword">key</span> bindings <span class="keyword">for</span> making <span class="keyword">text</span> <span class="keyword">in</span> buffers bigger <span class="keyword">and</span> smaller</span><br><span class="line">(define-<span class="keyword">key</span> <span class="keyword">global</span>-map (kbd <span class="string">"C-+"</span>) <span class="comment">'text-scale-increase)</span></span><br><span class="line">(define-<span class="keyword">key</span> <span class="keyword">global</span>-map (kbd <span class="string">"C--"</span>) <span class="comment">'text-scale-decrease)</span></span><br><span class="line"></span><br><span class="line">;; Launch Clojure repl via Leiningen - M-x nrepl-jack-<span class="keyword">in</span></span><br><span class="line">(<span class="keyword">global</span>-<span class="keyword">set</span>-<span class="keyword">key</span> (kbd <span class="string">"C-c C-j"</span>) <span class="comment">'nrepl-jack-in)</span></span><br></pre></td></tr></table></figure>
<h2 id="Loading_in_bigger_changes">Loading in bigger changes</h2><p>To keep your <code>init.el</code> file easy to work with, larger customisations can be defined in their own <code>.el</code> files under the config diretory.  Then simply add a line to load in these config files in the file  <code>~/.live-packs/jstevenson-pack/config/init.el</code></p>
<p>See the example where I <a href="http://jr0cket.co.uk/2013/01/tweeking-emacs-modeline-for-clojure.html" target="_blank" rel="external">tweaked the mode line for Emacs when developing Clojure</a></p>
<h1 id="Upgrading_Emacs_Live">Upgrading Emacs Live</h1><img src="http://2.bp.blogspot.com/-rWT1D_eoyFU/UPAFbJb-odI/AAAAAAAAI5I/ou7yYkCsw0U/s1600/emacs-live-update-git-fetch.png" class="img-code"> 
<p>As all the configuration files are hosted on Github then a simple <code>git pull</code> will bring in any new version.  As the install script clones the github repository, the remote github repository is already set up.</p>
<p>From inside your <code>~/.emacs.d</code> folder you can simple do a <code>git pull</code> when you know there is an update (notices are posted to the <a href="https://groups.google.com/forum/?fromgroups=#!topic/emacs-live/" target="_blank" rel="external">Emacs Live Google group</a>).</p>
<p>If you want to know if you are on the latest version or how many versions you are behind, you can use <code>git fetch</code> to get all the latest changes without applying them.  The output of git fetch will list any versions that have been created since you installed.</p>
<h1 id="Just_the_Docs">Just the Docs</h1><p>Emacs Live has <a href="http://overtone.github.com/emacs-live/documentation.html" target="_blank" rel="external">documentation</a> using the Emacs Live theme on the Github pages for the Emacs Live project.</p>
<img src="http://2.bp.blogspot.com/-hiVZZWkLlbg/UPAGL_h-U4I/AAAAAAAAI5Q/J3CzFdhvziw/s1600/emacs-live-docs-themed.png" class="img-code">
<h1 id="In_Summary">In Summary</h1><p>For a developer new to Emacs and Clojure development, getting a great environment to work in is easy.  Learning how to use that environment well will take practice, but this is the case with any tools.  Muscle memory will kick in pretty quickly, so the more you use Emacs the more natural it will feel. </p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="/images/emacs-logo.png" class="img-thumbnail">
<p>Emacs is a really powerful tool for Clojure development, although without a guiding hand it can be a bit of a learning curve.  Using the <a href="https://github.com/overtone/emacs-live">Emacs Live</a> its really simple to get a fully featured development environment for Clojure.  I will show you how to get Emacs Live installed and how to start using it for Clojure.</p>]]>
    
    </summary>
    
      <category term="clojure" scheme="http://jr0cket.co.uk/tags/clojure/"/>
    
      <category term="emacs" scheme="http://jr0cket.co.uk/tags/emacs/"/>
    
      <category term="emacslive" scheme="http://jr0cket.co.uk/tags/emacslive/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[The Git Father - a Forking Badass T-Shirt]]></title>
    <link href="http://jr0cket.co.uk/2013/01/the-git-father-forking-badass-t-shirt.html.html"/>
    <id>http://jr0cket.co.uk/2013/01/the-git-father-forking-badass-t-shirt.html.html</id>
    <published>2013-01-09T16:29:00.000Z</published>
    <updated>2015-03-18T15:08:46.212Z</updated>
    <content type="html"><![CDATA[<img src="http://git-scm.com/images/logo.png" class="img-thumbnail">
<p>The Git Father. The only t-shirt to wear when teaching other people who to use git and Github. </p>
<img src="http://1.bp.blogspot.com/-l8pchRzUta0/UO2ZNVdVokI/AAAAAAAAI4I/BU5cyWtJmeA/s1600/the-git-father-forking-badass-clearvision.png" class="img-code"> 
<p><em>One day I will actually iron my t-shirts :)</em></p>
<p>Thanks to <a href="http://www.clearvision-cm.com/" target="_blank" rel="external">Clearvision</a> for creating such a great t-shirt.  Check out their <a href="http://www.go-git.com/" target="_blank" rel="external">Go Git website</a> for ideas on adopting git in your organisation.  </p>
<p>Thank you.<br><a href="http://www.twitter.com/jr0cket" target="_blank" rel="external">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="http://git-scm.com/images/logo.png" class="img-thumbnail">
<p>The Git Father. The only t-shirt to wear when teaching other people ]]>
    </summary>
    
      <category term="git" scheme="http://jr0cket.co.uk/tags/git/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Tweeking Emacs Modeline for Clojure Development]]></title>
    <link href="http://jr0cket.co.uk/2013/01/tweeking-emacs-modeline-for-clojure.html.html"/>
    <id>http://jr0cket.co.uk/2013/01/tweeking-emacs-modeline-for-clojure.html.html</id>
    <published>2013-01-04T11:01:00.000Z</published>
    <updated>2015-03-18T15:08:46.212Z</updated>
    <content type="html"><![CDATA[<img src="http://1.bp.blogspot.com/-PLeobToC6lc/TzFJCfBSLPI/AAAAAAAAEbE/zSx1cOgHzZE/s1600/emacs128x128icon.png" class="img-thumbnail">
<p>Emacs is fun to configure and if you have the basics of LISP or Clojure then its pretty easy too.  After reading how to <a href="http://www.masteringemacs.org/articles/2012/09/10/hiding-replacing-modeline-strings/" target="_blank" rel="external">replace the text on the modeline</a> I decided to customise my mode-line to make it more efficient for Clojure development.  I’ll cover how I tweaked the mode line and added this customisation to my <a href="https://github.com/overtone/emacs-live" target="_blank" rel="external">Emacs Live</a> based configuration.</p>
<a id="more"></a>
<p>Instead of a long list of Major and Minor modes that are active, I now have symbols representing those modes.</p>
<p>In the screen-shot you can see I have the following modes running</p>
<p>λ    Clojure mode<br>τ    undo-tree<br>γ    yas<br>υ    volatile highlights<br>ηζ  nREPL minor mode<br>α    auto-complete<br>φ    paredit</p>
<img src="http://3.bp.blogspot.com/-vfMe4acOK5w/UOQuzoDiRBI/AAAAAAAAI3Q/53fhjdSEpHU/s1600/Emacs-clean-mode-line-for-clojure-and-nrepl.png" class="img-code">
<p>Some other modes are active, but hidden with a null string as I am assuing they are running all the time.</p>
<h1 id="Configuring_Emacs_Live">Configuring Emacs Live</h1><p>Adding these to the Emacs Live configuration I use is easy, assuming you used the “bro-grammer” script provided by <a href="http://plus.google.com/104881409052969541540" target="_blank" rel="external">+Sam Aaron</a>.  This script creates a <code>~/.live-pack</code> folder where you can add your own keybindings and configuration without it getting hit by Emacs Live updates.</p>
<p>I created a file called <code>clean-mode-line.el</code>, based on the one in the Mastering Emacs article.  The file is located in my personal live-packs folder at:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/.live-packs/jr0cket-pack/config/clean-mode-line.el</span><br></pre></td></tr></table></figure>
<p>The code for the mode-line tweaks is a Github Gist:</p>
<script src="//gist.github.com/4434524.js?file=clean-mode-line.el"></script> 
<p>To use this new mode-line tweak, we ask Emacs Live to load the configuration in clean-mode-lime.el.  To do this, edit the <code>init.el</code> file in your live pack</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/.live-packs/jr0cket-pack/init.el</span><br></pre></td></tr></table></figure>
<p>Then add the following code:</p>
<script src="//gist.github.com/4434605.js?file=init.el"></script> 
<h1 id="Emacs_Tweaked">Emacs Tweaked</h1><p>When you open a Clojure document, the mode line now displays the major and minor modes as symbols.</p>
<img src="http://2.bp.blogspot.com/-yYcO9X9AGWU/UOQu0wmhK3I/AAAAAAAAI3g/rZxXuAQ1Z1E/s1600/Emacs-clean-mode-line-for-clojure.png" class="img-code">
<p>Starting the Clojure REPL using <code>M-x nrepl-jack-in</code> gives you a similar modeline, this time with the major mode being <code>nrepl-mode</code>.</p>
<img src="http://3.bp.blogspot.com/-vEeUhbx-sWo/UOQu0OplJJI/AAAAAAAAI3Y/wF_I-g9J3rc/s1600/Emacs-clean-mode-line-for-clojure-nrepl.png" class="img-code">
<p>Switching back to a Clojure file after running nREPL shows <code>Clojure</code> as the major mode and <code>nREPL</code> running as the minor mode.</p>
<img src="http://3.bp.blogspot.com/-vfMe4acOK5w/UOQuzoDiRBI/AAAAAAAAI3Q/53fhjdSEpHU/s1600/Emacs-clean-mode-line-for-clojure-and-nrepl.png" class="img-code">
<h2 id="In_Summary">In Summary</h2><p>The custom mode line was really easy to set up, thanks to the great info in the <a href="http://www.masteringemacs.org/articles/2012/09/10/hiding-replacing-modeline-strings/" target="_blank" rel="external">Matering Emacs article</a>.  The tricky part was finding the specific name for the nREPL minor mode that was running.  Other than that it took a couple of minutes, most of which was deciding which symbols to use.  I added a few others at the end of the file in case I change my mind or you want to use something more meaningful to yourself. </p>
<p>I havent tried this with Swank, but I assume that all it would take is adding of the swank mode to the clean-mode-line.el file.</p>
<p>When I get round to using other modes, I will see if I can add other symbols to my configuration where it makes sense.  Let me know if you find this useful and what symbols you use.   </p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="http://1.bp.blogspot.com/-PLeobToC6lc/TzFJCfBSLPI/AAAAAAAAEbE/zSx1cOgHzZE/s1600/emacs128x128icon.png" class="img-thumbnail">
<p>Emacs is fun to configure and if you have the basics of LISP or Clojure then its pretty easy too.  After reading how to <a href="http://www.masteringemacs.org/articles/2012/09/10/hiding-replacing-modeline-strings/">replace the text on the modeline</a> I decided to customise my mode-line to make it more efficient for Clojure development.  I’ll cover how I tweaked the mode line and added this customisation to my <a href="https://github.com/overtone/emacs-live">Emacs Live</a> based configuration.</p>]]>
    
    </summary>
    
      <category term="clojure" scheme="http://jr0cket.co.uk/tags/clojure/"/>
    
      <category term="emacs" scheme="http://jr0cket.co.uk/tags/emacs/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Password Protected SSH Key for Github for Mac & Linux]]></title>
    <link href="http://jr0cket.co.uk/2012/12/password-protected-ssh-key-for-github.html.html"/>
    <id>http://jr0cket.co.uk/2012/12/password-protected-ssh-key-for-github.html.html</id>
    <published>2012-12-31T15:57:00.000Z</published>
    <updated>2015-03-18T15:08:46.212Z</updated>
    <content type="html"><![CDATA[<img src="http://2.bp.blogspot.com/-vIpCWBThzsw/T8ZKPxPTC8I/AAAAAAAAIHU/di86sKgUYA8/s1600/public-private-keys.jpg" class="img-thumbnail"> 
<p>Secure Shell (SSH) is an invaluable tool to help developers manage code and data over different computers and services, eg. <a href="http://github.com" target="_blank" rel="external">Github</a>, <a href="http://www.heroku.com" target="_blank" rel="external">Heroku</a>.  By creating a public/private key it also means you dont have to enter a username &amp; password each time you use the service.  Ideally you should create a public/private key using a long passphrase, so that is what I will cover here.</p>
<a id="more"></a> 
<h2 id="Why_use_a_secure_key?">Why use a secure key?</h2><p>To make using SSH a great experience to use and yet keeping it secure as possible requires you to set up an public / private key combination that is protected by a long pass-phrase.  Specifically you are protecting your private key as you distribute your public key (which is why its called public).  Imagine the pass-phrase as a kind of long password, which you will add to something called a keychain on your laptop so you only have to enter this long password once.</p>
<img src="http://1.bp.blogspot.com/-qlVcL6zWbjY/TzFMw8PPiGI/AAAAAAAAEbs/-Ozv0X_6mrQ/s1600/github-logo.png" class="img-topic">
<h2 id="I_don’t_want_to_keep_typing_my_long_password_on_every_commit?">I don’t want to keep typing my long password on every commit?</h2><p>Of course not, that would be a real pain.</p>
<p>When using a password protected SSH key with Mac OSX and Linux you can add your SSH key password to the keychain (keyring in Linux, but its the same thing) of your login account.</p>
<p>When you first connect to github using your newly added key you will be prompted with a dialog box to add the password for your SSH key to your keychain.  Enter the password for your keychain in this prompt, it should be the same as your computer login password (unless you specifically changed it).</p>
<h2 id="Creating_a_password_protected_SSH_key">Creating a password protected SSH key</h2><p>Creating an SSH key pair with a long pass-phrase is just the same process as that without, except you obviously specify the long password.</p>
<p>In the following example, I am specifying the email I used for the Github account I own, using the <code>-C</code> option for <code>ssh-keygen</code>.</p>
<p>I am also using a custom file name.  In doing so, I need to provide the full path to the file or otherwise ssh-keygen fails to create the file.  It seems that even the <code>~/</code> shortcut to your home folder also fails.</p>
<p>As I am using a custom name for the keys, then I will need specific a host configuration before I am done.</p>
<img src="http://3.bp.blogspot.com/-Y7vVzBfsOZE/UOG0phBIZHI/AAAAAAAAI2w/doqqeqnO3fQ/s1600/github-ssh-key-generation-secure.png" class="img-code">
<h2 id="Adding_a_Host_configuration">Adding a Host configuration</h2><p>If your public key is called id_rsa.pub then you should not need a host configuration.  As I am using a custom name to generate the SSH keys, I need to add a host definition to my SSH configuration.  Its pretty easy to add a new definition, simply edit the ~/.ssh/config file and add a definition as follows</p>
<img src="http://2.bp.blogspot.com/-Wt1uj7Hxnec/UKaKa29sKwI/AAAAAAAAIjA/XtmLKuvJQ-g/s1600/ssh-host-config-github-secure.png" class="img-code">
<h2 id="Adding_Keys_-_a_bad_Developer_experience">Adding Keys - a bad Developer experience</h2><img src="http://3.bp.blogspot.com/-0xWwyDAsFGU/UKaiV_bcAWI/AAAAAAAAIjY/iMdnVj8lVNQ/s1600/github-profile-edit.png" class="img-code">
<p>The adding of keys to your Github account is a very poor experience for the developer, as it requires a cut-n-paste rather than allowing you to upload your key file.</p>
<p>Adding keys to <strong><a href="https://devcenter.heroku.com/articles/keys" target="_blank" rel="external">Heroku</a></strong> is much nicer, they have a <strong><a href="https://toolbelt.heroku.com/" target="_blank" rel="external">toolbelt</a></strong> that automatically detects your public key file and upload it. </p>
<p>I had a few problems when copy/pasting my key from the editors that come with the Mac, until I found reference to the command <code>pbcopy</code>.</p>
<p>Open up a terminal and enter the following command to copy your public key into the Mac’s clipboard.  Then simply paste the key into the Github webpage for adding a new key. </p>
<pre><code>pbcopy &lt; ~<span class="regexp">/.ssh/id</span>_rsa.pub
</code></pre><p>Bitbucket is not much better, although at least they tell you about pbcopy in the documentation for adding a key.  When I used Assembla.com, at least you could upload your key public key as a file.</p>
<p>Once you have uploaded your public key, don’t forget to give it a quick test to make sure its all working.  Using the command line, use the ssh command to connect to github</p>
<pre><code><span class="title">ssh</span> -T git<span class="variable">@github</span>.com
</code></pre><img src="http://3.bp.blogspot.com/-pYOW0NB6RfA/UKaiX5iv1oI/AAAAAAAAIjg/SZBS1NMG11c/s1600/github-testing-successful.png" class="img-code">
<p>This command will use your SSH key to connect to Github and show you if you have successfully set up your key for your account on your Mac.  Unlike normal SSH access, you cant actually do anything once you connect.</p>
<p>Thank you.</p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="http://2.bp.blogspot.com/-vIpCWBThzsw/T8ZKPxPTC8I/AAAAAAAAIHU/di86sKgUYA8/s1600/public-private-keys.jpg" class="img-thumbnail"> 
<p>Secure Shell (SSH) is an invaluable tool to help developers manage code and data over different computers and services, eg. <a href="http://github.com">Github</a>, <a href="http://www.heroku.com">Heroku</a>.  By creating a public/private key it also means you dont have to enter a username &amp; password each time you use the service.  Ideally you should create a public/private key using a long passphrase, so that is what I will cover here.</p>]]>
    
    </summary>
    
      <category term="github" scheme="http://jr0cket.co.uk/tags/github/"/>
    
      <category term="heroku" scheme="http://jr0cket.co.uk/tags/heroku/"/>
    
      <category term="security" scheme="http://jr0cket.co.uk/tags/security/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Driving Git With Emacs - Part Two - May the Log Be With You]]></title>
    <link href="http://jr0cket.co.uk/2012/12/driving-git-with-emacs-part-two-may-log.html.html"/>
    <id>http://jr0cket.co.uk/2012/12/driving-git-with-emacs-part-two-may-log.html.html</id>
    <published>2012-12-30T11:48:00.000Z</published>
    <updated>2015-03-18T15:08:46.208Z</updated>
    <content type="html"><![CDATA[<img src="/images/emacs-logo.png" class="img-thumbnail">
<p>In <a href="http://jr0cket.co.uk/2012/12/driving-git-with-emacs-pure-magic-with.html" target="_blank" rel="external">part one</a> I showed how easy it is to version a project using Git from within Emacs, using the Magit package.  This time we look at the git log within Magit.</p>
<p>Working with the log gives you a lot more detail about your changes, helps you compare local and remote repo commits.  All of which helps you understand when you should push your code.</p>
<a id="more"></a>
<h1 id="Git_logs_with_Magit">Git logs with Magit</h1><p>On the command line you can use git log to see your change history, although it can be a bit fiddly to set up git to give you a pretty view of those logs.  In Magit you can just get on a explore the logs</p>
<p>Inside the Magit buffer, press <code>l</code> to show the log menu and then either <code>l</code> for the short for log or <code>L</code> for the long form of the log.</p>
<pre><code><span class="keyword">l</span> <span class="keyword">l</span> - short <span class="literal">log</span>
<span class="keyword">l</span> <span class="keyword">L</span> - long <span class="literal">log</span>
</code></pre><p><img src="http://4.bp.blogspot.com/-0QAfewaMsLw/UN-KyXzkaqI/AAAAAAAAI0I/SXTUvdWTyWY/s1600/Emacs-git-log-menu.png" alt="Emacs Magit - the log menu - l"></p>
<p>Selecting the short log details allows you to see more commits, but you only see the commit message and not the files that have changes.</p>
<p>In the following examples both the remote (github repository) and local repository are at the same commit - <code>e447b51</code>.  So you can easily tell if there are any local commits you have not pushed to Github.</p>
<p><img src="http://4.bp.blogspot.com/-ABVkJoYeq34/UN-VZ1ROTxI/AAAAAAAAI1Q/UNohWmIcPYQ/s1600/Emacs-git-log-short.png" alt="Emacs Magit log short listing - l l"></p>
<p>Selecting the long log output, <code>l L</code>, you see more details of each commit, including the files changed, author and timestamp.</p>
<p><img src="http://1.bp.blogspot.com/-0fxK4fEU8nQ/UN-KzcmzocI/AAAAAAAAI0M/jS9noFeIR5Q/s1600/Emacs-git-log-uptodate.png" alt="Emacs Magit log long output - l L"></p>
<p>To see the changes within a commit, move the cursor over a commit number in the log and press <code>space</code>.  This brings up another buffer which you can scroll through.  You don’t even need to switch to this new buffer as if you keep pressing <code>space</code> it will scroll through the text of the change.</p>
<p><img src="http://2.bp.blogspot.com/-H5qNZ0NxDu4/UN-OaayK6mI/AAAAAAAAI0w/qoJt89QCdik/s1600/Emacs-git-log-commit-details.png" alt="Emacs Magit Log - view the changes in a commit - l L space"></p>
<p>  The magit log also has a margin that shows the name and relative time of each commit.  This can be very useful information to have at hand, although it does take up more space in the buffer.</p>
<p><img src="/images/emacs-magit-log-toggle-margin-on.png" alt="Emacs Magit - Log margin on"></p>
<p>  To toggle the magit log margin, use <code>h</code> or <code>M-x magit-log-toggle-margin</code></p>
<p><img src="/images/emacs-magit-log-toggle-margin-off.png" alt="Emacs Magit - Log margin off"></p>
<h1 id="Comparing_Commits_(diff)_with_Magit">Comparing Commits (diff) with Magit</h1><p>In the following example, the local repository is ahead of the Github repository by one commit.  The magit log can be used to compare commits.</p>
<p>Move the cursor over the first commit and press <code>.</code> (full stop).  Then put the cursor over the second commit and press <code>=</code>.</p>
<p><img src="http://2.bp.blogspot.com/-3yRc4uinS9Q/UOAkTMBO-EI/AAAAAAAAI1w/-zguUhcRcME/s1600/Emacs-git-log-short-commit-contents.png" alt="Emacs Magit - compare two commits using the short log - l l . ="></p>
<p>To exit buffer that opened the diff, simply press <code>q</code> in the Magit buffer.</p>
<h1 id="Summary_of_Magit_log">Summary of Magit log</h1><p>I tend to just use the short form of the log and compare commits every now and again.  If I havent pushed a few commits up to Github for a while, its a handy way to check if I should push and what I am pushing.</p>
<p>Of course if I write good commit messages and commit often to my local repo, then its much easier to tell what I am pushing from just the short log.</p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="/images/emacs-logo.png" class="img-thumbnail">
<p>In <a href="http://jr0cket.co.uk/2012/12/driving-git-with-emacs-pure-magic-with.html">part one</a> I showed how easy it is to version a project using Git from within Emacs, using the Magit package.  This time we look at the git log within Magit.</p>
<p>Working with the log gives you a lot more detail about your changes, helps you compare local and remote repo commits.  All of which helps you understand when you should push your code.</p>]]>
    
    </summary>
    
      <category term="emacs" scheme="http://jr0cket.co.uk/tags/emacs/"/>
    
      <category term="git" scheme="http://jr0cket.co.uk/tags/git/"/>
    
      <category term="magit" scheme="http://jr0cket.co.uk/tags/magit/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Driving Git With Emacs - Pure Magic With Magit - Part One]]></title>
    <link href="http://jr0cket.co.uk/2012/12/driving-git-with-emacs-pure-magic-with.html.html"/>
    <id>http://jr0cket.co.uk/2012/12/driving-git-with-emacs-pure-magic-with.html.html</id>
    <published>2012-12-27T20:29:00.000Z</published>
    <updated>2015-03-18T15:08:46.208Z</updated>
    <content type="html"><![CDATA[<img src="/images/emacs-logo.png" class="img-thumbnail">
<p>Getting to grips with Git was not to much of a learning curve, although I found it quicker to work on the command line than using graphical tools.  Using <code>git status</code> and <code>git log</code> made it easy to keep a handle on my code changes.</p>
<p>As I do most of my Clojure development in Emacs, it was great to discover I could drive git from Emacs using Magit.  What follows is a flow through the first steps with Magit.</p>
<blockquote>
<p>In part two I look at <a href="/2012/12/driving-git-with-emacs-part-two-may-log.html.html">Git logs with Magit</a><br><a id="more"></a></p>
</blockquote>
<img src="http://2.bp.blogspot.com/-Nw-UkZubf-Y/UNys45ExNRI/AAAAAAAAIzI/QLRPlj5FV7g/s1600/Emacs-magit-status-example.png" class="img-code">
<p>I use <a href="https://github.com/overtone/emacs-live" target="_blank" rel="external">Emacs Live</a> from <a href="http://plus.google.com/104881409052969541540" target="_blank" rel="external">Sam Aaron</a> as my Emacs configuration (Emacs 24 from <a href="http://emacsformacosx.com/" target="_blank" rel="external">Emacs for MacOSX</a>), so the packages and <code>key-bindings</code> mentioned here are all available in this configuration unless otherwise stated.</p>
<h1 id="Getting_started">Getting started</h1><p>I start a new Clojure project using Leiningen, using the command line to do so.  Instead of having a seperate terminal window for this, I can open up a command line shell window in Emacs </p>
<pre><code><span class="keyword">M</span>-x eshell
</code></pre><p>I then navigate to my projects folder using `cd ~/projects/clojure and then create a new Clojure project using Leiningen, the build automation tool for Clojure. </p>
<pre><code>lein <span class="keyword">new</span> <span class="keyword">project</span>-name
</code></pre><p>I could continue to use the terminal to manage the git repository, although once I got used to magit then using git inside Emacs seems more natural.</p>
<p>Using eshell, you can also easily open files using <code>find-file</code>filename<code>and see all the files and folders using</code>dired folder`.  So lets see what Leiningen has created for us</p>
<pre><code>dired project-<span class="property">name</span>
</code></pre><img src="http://4.bp.blogspot.com/-oUwbRIUgdlo/UNxyktDH5OI/AAAAAAAAItU/XO06glOlP5Y/s1600/Emacs-eshell-dired.png" class="img-code"> 
<p>You can use the mouse or cursor to open any file listed, or navigate to sub-folders.  In this case lets select the Leiningen project configuration file, <code>project.clj</code>.</p>
<img src="http://1.bp.blogspot.com/-HJnxJ3bJ114/UNx0DQtn7hI/AAAAAAAAIt0/QmYrPaaUkus/s1600/Emacs-lein-project-file.png" class="img-code">
<h1 id="Initialising_a_repository_in_git">Initialising a repository in git</h1><p>Now I have a Clojure project, I can put that project under git version control</p>
<pre><code><span class="keyword">M</span>-x magit-init
</code></pre><p>The emacs mini-buffer will prompt you for the top level folder of the files you want to version with git.  If you are still in the top level project folder in the shell, magit-init will pick up the path, saving you some typing.</p>
<p>You will now be able to see the <code>.git</code> folder inside your project directory.</p>
<img src="http://3.bp.blogspot.com/-qgsSf1fsSXE/UNx09qHRzMI/AAAAAAAAIuA/a0FGNvoHXek/s1600/Emacs-git-init-dired.png" class="img-code">
<h1 id="Git_Status_in_Emacs">Git Status in Emacs</h1><p>The most commonly used git command is <code>git status</code> - showing you what files have changes, which are staged, untracked files, pending commits and remote updates. To see the git status of your project in Emacs</p>
<pre><code><span class="constant">M</span>-x magit-<span class="literal">status</span>
</code></pre><p>Short-cut key-binding: <code>C-x g</code></p>
<p>Keyboard shortcuts are defined in <code>~/emacs.d/packs/dev/bindings-pack/config/default-bindings.el</code> </p>
<pre><code><span class="list">(<span class="keyword">global-set-key</span> <span class="list">(<span class="keyword">kbd</span> <span class="string">"C-x g"</span>)</span> <span class="quoted">'magit-status</span>)</span>
</code></pre><p>You will be prompted for the location of the git repository (the one you just created).  Magit does a good job of guessing the folder assuming you already have a file open that is somewhere in a folder hierachy that has a <code>.git</code> folder in it. </p>
<p>With a newly versioned project then there will not be that much to see, except all the files not yet put under version control (untracked files).</p>
<p>The <code>Local:</code> line show the branch you are working on (master) and location of your project.</p>
<p>The <code>Head:</code> line shows you the last commit you made to your repository.     </p>
<img src="http://4.bp.blogspot.com/-6N14SH8fsgs/UNx2fFspJUI/AAAAAAAAIus/qbsV5QO2RLM/s1600/Emacs-git-status-new-project.png" class="img-code"> 
<h1 id="Staging_changes">Staging changes</h1><p>To version control your files you need to tell git about them.  This is done by <em>staging</em> the files using the <code>git add</code> command.  You can add individual files or all files that are untracked.  Using magit, this is even easier.</p>
<p>In the magit-status buffer in Emacs, you can use the following key shortcuts to stage and unstage files</p>
<p><code>s</code> - stage a specific untracked file highlighted by cursor (stage all untracked files when cursor over <em>Untracked files</em> title)</p>
<p><code>k</code> - delete a specific untracked file highlighted by cursor (delete all untracked files when cursor over “Untracked files” title).  See <em>Delete really deletes</em> section below.</p>
<p><code>i</code> - add file to the project <code>.gitignore</code> file</p>
<p><code>u</code> - unstage a specific staged change highlighted by cursor </p>
<p><code>C-u s</code> - stages everything - tracked and untracked changes (<em>Note: this failed when I tried it</em>)</p>
<img src="http://3.bp.blogspot.com/-X8zLwi7bNgo/UNx5cVnKAhI/AAAAAAAAIvg/i0GL7duEEIk/s1600/Emacs-git-status-stage-file-details.png" class="img-code">
<h1 id="Under_the_hood">Under the hood</h1><p>Using the <code>$</code> key opens another buffer that shows you the command happening when you press keys in the <em>magit-status</em> window.  Its a handy way to learn the command syntax and confirm magit is doing what you expected.</p>
<blockquote>
<p>Note: All the files matching pattern in the project .gitignore or personal ~/.gitignore_global files will not be shown as untracked files.<strong>Delete really deletes</strong></p>
</blockquote>
<p>Using the <code>k</code> command in <em>magit-status</em> really deletes the local file, so be sure that is what you want.  You get a prompt in the mini-buffer to confirm the delete though.</p>
<img src="http://4.bp.blogspot.com/-sLsSvcPbvyE/UNyK2zrCbbI/AAAAAAAAIv8/9jg5Vsr7woM/s1600/Emacs-git-status-stage-kill-file.png" class="img-code">
<p>Testing this delete out, I noticed that not only was the file deleted but so was the folder that contained the file.  As you can see in the dired my-project buffer, the doc folder has gone.  If you delete files then this buffer may need a refresh, using <code>g</code>.</p>
<img src="http://4.bp.blogspot.com/-7mcatVIm5qg/UNyLogdSGkI/AAAAAAAAIwE/xynukqLEgd4/s1600/Emacs-git-status-stage-kill-file-results.png" class="img-code">
<h1 id="Committing_your_changes">Committing your changes</h1><p>Before you make too many changes you should commit them to your local repository.  The more commits you make the smaller and easier they will be to mange.</p>
<p>On the command line you would run <code>git commit -m &quot;useful commit message&quot;</code>, from the <em>magit-status</em> buffer its much easier:</p>
<p><code>c</code></p>
<p>This pops up another buffer for you to type in your commit message.  Once you have typed your message then <code>C-c C-c</code> commits all the changes to your local repository.  <code>C-c C-k</code> cancels the commit.</p>
<img src="http://1.bp.blogspot.com/-glgNVoMJXzg/UNyOYH28SVI/AAAAAAAAIwg/o3O6ZhosJoA/s1600/Emacs-git-commit-message-buffer.png" class="img-code">
<p>Now all our staged files have been added as a commit to our local repository.  We can see this by looking at the Head: line in the magit-status window.  We can also see that there are no changes (tracked or otherwise) shown.</p>
<img src="http://2.bp.blogspot.com/-Oae6fn9zVPU/UNyPn78KNvI/AAAAAAAAIw8/qQuIYmaf25E/s1600/Emacs-git-commit-head-commit-message.png" class="img-code">
<h1 id="Working_with_a_remote_Github_repository">Working with a remote Github repository</h1><p>Assuming we have created a repository on Github it can be added as a remote source very easily</p>
<pre><code>M-<span class="built_in">x</span> magit-<span class="keyword">add</span>-remote
</code></pre><img src="http://2.bp.blogspot.com/-9Z9vXI3w07s/UNyiMCUADeI/AAAAAAAAIxY/WoioDklNaOw/s1600/Emacs-git-remote-add-command.png" class="img-code">
<p>You are prompted for the name you want to give the remote, origin, upstream or github are common names depending on your context.  The name acts as an alias for the address of the Github repository, so keep it short but meaningful.</p>
<img src="http://4.bp.blogspot.com/-crHzv5Tsyzk/UNyiMm3Bl3I/AAAAAAAAIxc/8cAnjBK_qi0/s1600/Emacs-git-remote-add-name.png" class="img-code">
<p>Now you are prompted for the Internet address of your repository.  On the Github website your repository name is shown at the top of the page.  Use the SSH version of the address, the one that starts <code>git@github:...</code>.</p>
<img src="http://4.bp.blogspot.com/-AtaTiTJepzs/UNyiNUl-IAI/AAAAAAAAIxk/RHR-fbpLJlM/s1600/Emacs-git-remote-add-url.png" class="img-code">
<p>Magit will now add the remote name and address to the project <code>.git/config</code> file.</p>
<img src="http://1.bp.blogspot.com/-3jP05aBrmg4/UNylwaRMJRI/AAAAAAAAIyI/R4eJ9cdpNaw/s1600/Emacs-git-remote-add-results.png" class="img-code">
<p>You can now push your local commits up to Github using the key:  <code>P</code></p>
<p>The first time you press <code>P</code> the push menu appears.</p>
<img src="http://3.bp.blogspot.com/-rdjgD_2CzeA/UNzw95Qg8CI/AAAAAAAAIzo/QIM2S544CuU/s1600/Emacs-git-remote-push-menu.png" class="img-code">
<p>Pressing <code>P</code> again pushes to the remote repository.</p>
<img src="http://1.bp.blogspot.com/-ouTos7VRIZo/UNyp0k-4_lI/AAAAAAAAIyo/aIpVnOsbEgs/s1600/Emacs-git-remote-add-remote-line.png" class="img-code">
<h1 id="And_there_is_more_magit">And there is more magit</h1><p>There is a lot more you can do with magit, next up is <a href="/2012/12/driving-git-with-emacs-part-two-may-log.html.html">Git logs with Magit</a>.  </p>
<p>If you are really keen you can have a look at the <a href="http://philjackson.github.com/magit/magit.html" target="_blank" rel="external">Magit documentation</a>, or if you know what you want to do then the <a href="http://daemianmack.com/magit-cheatsheet.html" target="_blank" rel="external">Magit cheet sheet</a> may be more useful.</p>
<h1 id="Magit_not_cutting_the_mustard_?">Magit not cutting the mustard ?</h1><p>For situations when Magit doesn’t do everything you need, you can run raw Git commands using <code>:</code> (colon). This will prompt for a Git command, run it, and refresh the status buffer. The output can be viewed by typing <code>$</code>.</p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="/images/emacs-logo.png" class="img-thumbnail">
<p>Getting to grips with Git was not to much of a learning curve, although I found it quicker to work on the command line than using graphical tools.  Using <code>git status</code> and <code>git log</code> made it easy to keep a handle on my code changes.</p>
<p>As I do most of my Clojure development in Emacs, it was great to discover I could drive git from Emacs using Magit.  What follows is a flow through the first steps with Magit.</p>
<blockquote>
<p>In part two I look at <a href="/2012/12/driving-git-with-emacs-part-two-may-log.html.html">Git logs with Magit</a><br>]]>
    
    </summary>
    
      <category term="emacs" scheme="http://jr0cket.co.uk/tags/emacs/"/>
    
      <category term="git" scheme="http://jr0cket.co.uk/tags/git/"/>
    
      <category term="magit" scheme="http://jr0cket.co.uk/tags/magit/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[GitIgnore for Clojure and Emacs - Ignore Emacs Backup & Temp Files]]></title>
    <link href="http://jr0cket.co.uk/2012/12/gitignore-for-clojure-and-emacs.html.html"/>
    <id>http://jr0cket.co.uk/2012/12/gitignore-for-clojure-and-emacs.html.html</id>
    <published>2012-12-13T08:00:00.000Z</published>
    <updated>2015-03-18T15:08:46.208Z</updated>
    <content type="html"><![CDATA[<img src="http://git-scm.com/images/logo.png" class="img-thumbnail">
<p>Once little self-inflicted annoyance I found was when working with Git was committing temporary and backup files that my development tools create.  Yes, I should pay more attention and not just do a <code>git add .</code> but when you are head down coding then its easy to include a few things you dont need.</p>
<a id="more"></a>
<p>Whilst I could simple add patters to the git repository <code>.gitignore</code> file, this is not very effective for three reasons.</p>
<ol>
<li><p>I’m adding my own preferences to a project I’m sharing with others, who may have different toolset.</p>
</li>
<li><p>I have to add this to each new project I create / clone / fork3.  Pull requests can be blocked up by changes to <code>.gitignore</code> files</p>
</li>
</ol>
<p>After a little more discovery with Git, I found that <code>.gitignore_global</code> is a better way to exclude files that were specific to my tools and environment than individual project <code>.gitignore</code> files.</p>
<h1 id="Creating_my_own_global_ignores">Creating my own global ignores</h1><p>Emacs is the tool I used for my Clojure development, as well as writning contnet in markdown and Org-mode.  As all these types of files are versioned in Git, then there is a lot of potential for backup files to sneak in.</p>
<p>So in the <code>~/.gitconfig</code> of my home directory I have a section called [core] where a global excludes file is defined</p>
<pre><code>[core]
    <span class="variable">excludesfile =</span> /Users/jstevenson/.gitignore_global
    <span class="variable">editor =</span> emacsclient
</code></pre><p>By adding file name patters to the <code>.gitignore_global</code> file for Emacs, I can add my own personal excludes without adding unneccessary stuff to each project I work on.  It also means its one less thing to remember when I am working with git projects.</p>
<img src="http://1.bp.blogspot.com/-PLeobToC6lc/TzFJCfBSLPI/AAAAAAAAEbE/zSx1cOgHzZE/s1600/emacs128x128icon.png" class="img-thumbnail"> 
<p>My <code>~/.gitignore_global</code> file now contains the following filename patterns, the last three patterns are specifically for the Emacs temporary and backup files.</p>
<pre><code><span class="keyword">*</span>~
.DS_Store
<span class="keyword">*</span>~
<span class="keyword">*</span><span class="comment">#</span>
.<span class="comment">#*</span>
</code></pre><h1 id="Keeping_project_-gitignore_files_clean">Keeping project .gitignore files clean</h1><p>Now when I work with Clojure projects using Emacs, I can commit away without having to worry about my editor add things that I carelessly add when in a hacking frenzy!</p>
<p>This also keeps the <code>.gitignore</code> files specific to a project much smaller and project specific.</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pom<span class="class">.xml</span></span><br><span class="line">*jar</span><br><span class="line">/classes/</span><br><span class="line">/<span class="class">.lein-deps-sum</span></span><br><span class="line">/<span class="class">.lein-failures</span></span><br><span class="line">/<span class="class">.lein-env</span></span><br><span class="line">/checkouts</span><br><span class="line">/<span class="class">.env</span></span><br><span class="line">/target</span><br></pre></td></tr></table></figure>
<p>Finally, by minimising the changes in the project <code>.gitignore</code> file then this limits the amount of times that file needs to be committed to the version control system.  Therefore it is less likely that a change in the <code>.gitignore</code> file end up in code change commits.</p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="http://git-scm.com/images/logo.png" class="img-thumbnail">
<p>Once little self-inflicted annoyance I found was when working with Git was committing temporary and backup files that my development tools create.  Yes, I should pay more attention and not just do a <code>git add .</code> but when you are head down coding then its easy to include a few things you dont need.</p>]]>
    
    </summary>
    
      <category term="clojure" scheme="http://jr0cket.co.uk/tags/clojure/"/>
    
      <category term="emacs" scheme="http://jr0cket.co.uk/tags/emacs/"/>
    
      <category term="git" scheme="http://jr0cket.co.uk/tags/git/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Continuous Integration With Travis-CI, Scala, Play2 and Heroku]]></title>
    <link href="http://jr0cket.co.uk/2012/12/continuous-integration-with-travis-ci.html.html"/>
    <id>http://jr0cket.co.uk/2012/12/continuous-integration-with-travis-ci.html.html</id>
    <published>2012-12-11T13:05:00.000Z</published>
    <updated>2015-03-18T15:08:46.204Z</updated>
    <content type="html"><![CDATA[<img src="http://2.bp.blogspot.com/-kIrzG80xsL4/UMcqsNDxzzI/AAAAAAAAIsU/hKMCeoPdGkk/s1600/lsug-logo.jpeg" class="img-thumbnail">
<p>During the London Scala community hackday at the Guardian, we first put together the <a href="http://lsug.org/" target="_blank" rel="external">LSug community webapp</a>.  For this we used Play2 framework, MongoDB, Github for pull requests and deployed onto Heroku.</p>
<p>Towards the end of the hackathon, someone suggested we also wired the project up to <a href="https://travis-ci.org/" target="_blank" rel="external">Travis-CI</a>, although none of us knew much about using it.  As the hackday was all about discovering how to use new stuff, I decided to add Travis-CI and worry about setting it up when we got to it.</p>
<h1 id="What_is_Travis-CI_?">What is Travis-CI ?</h1><img src="http://2.bp.blogspot.com/-5VmP6LuMgJQ/UMcriwrutXI/AAAAAAAAIsg/9z1McNPoKio/s1600/travis-logo.png" class="img-thumbnail"> 
<p><a href="https://travis-ci.org/" target="_blank" rel="external">Travis-CI</a>** is a <a href="http://en.wikipedia.org/wiki/Continuous_integration" target="_blank" rel="external">continuous integration</a> service that allows you to run build jobs and tests automatically, straight from Github.  Its ideal for open source projects.</p>
<p>As its on the web then there is no installation required and its really easier to configure.  You simply point Travis-CI to your Github account and you can choose which projects you want Travis-CI to run on.  Travis-CI will scan you public repositories, as well as any Github organisations you are part of.  Its then an easy matter of switching on those repositories you want Travis-CI to monitor (eg. build, run tests, etc.)</p>
<h1 id="Travis-CI_in_action">Travis-CI in action</h1><p>Whilst Travis-CI has been pointed to the the <a href="https://github.com/lsug-dojo/lsug-website/" target="_blank" rel="external">lsug-dojo/lsug-website repo on github</a> via my account, no one got round to adding a Travis-CI configuration file.  The down side of this is that those contributors to the lsug-dojo/lsug-website repository received an emailed error message each time something was pushed to the repository or a pull request was accepted.</p>
<p>Not having a working Travis-CI was also noticeable when reviewing pull requests, as Travis-CI talks to Github and lets it know that your projects have failed.  It then up to you wether you still want to merge.</p>
<img src="http://3.bp.blogspot.com/-qRhXKVybkpM/UMctV4nRu0I/AAAAAAAAIss/liJmosF0rNk/s1600/travis-ci-pull-requests-caution.png" class="img-code"> 
<p><a href="http://about.travis-ci.org/blog/2012-09-04-pull-requests-just-got-even-more-awesome/" target="_blank" rel="external">Screenshot taken from travis-ci blog </a></p>
<p>With a quick Google I found an <a href="https://github.com/gildegoma/travis-ci-ScalaOnPlay-sample/blob/master/.travis.yml" target="_blank" rel="external">example travis-ci configuration file for Play 2 framework</a>.  I just dropped in a new <code>.travis.yml</code> file into the lsug-website github repository and that triggered another travis-ci build.  This time the test ran and passed!!</p>
<img src="http://4.bp.blogspot.com/-NckYSnj2G8w/UMctWvTZ0bI/AAAAAAAAIsw/5tHd9x3zVbo/s1600/travis-ci-pull-requests-good.png" class="img-code"> 
<p><a href="http://about.travis-ci.org/blog/2012-09-04-pull-requests-just-got-even-more-awesome/" target="_blank" rel="external">Screenshot taken from travis-ci blog</a></p>
<p>One benefit of using Travis-CI is to encourage the use of tests, it also gives information about the state of the github repository.  This is especially useful when working with pull requests.</p>
<p>This is the first time I have used Travis-CI and it was really easy to configure.  If you have any comments or ideas about this, please share them with the group or myself directly.</p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="http://2.bp.blogspot.com/-kIrzG80xsL4/UMcqsNDxzzI/AAAAAAAAIsU/hKMCeoPdGkk/s1600/lsug-logo.jpeg" class="img-thumbnail">
<p>During t]]>
    </summary>
    
      <category term="ci" scheme="http://jr0cket.co.uk/tags/ci/"/>
    
      <category term="scala" scheme="http://jr0cket.co.uk/tags/scala/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[LightTable 0.2.3 - Even More Light for Clojure]]></title>
    <link href="http://jr0cket.co.uk/2012/12/lighttable-023-even-more-light-for-clojure.html.html"/>
    <id>http://jr0cket.co.uk/2012/12/lighttable-023-even-more-light-for-clojure.html.html</id>
    <published>2012-12-06T15:31:00.000Z</published>
    <updated>2015-03-18T15:08:46.208Z</updated>
    <content type="html"><![CDATA[<p>So as soon as I decided to <a href="http://blog.jr0cket.co.uk/2012/12/clojure-development-with-lighttable-02x.html" target="_blank" rel="external">write about LightTable</a>, the developers go and improve a whole bunch of things.  With the 0.2.3 release that happened earlier today the configuration of LightTable now works correctly.</p>
<p>This change is going to make it so much easier to use LightTable for demo’s and coding dojo’s.   The has been an update to the default solarized light theme that looks very pretty to me.</p>
<a id="more"></a>
<img src="http://1.bp.blogspot.com/-qrR2aiHVwLM/UMCzq6CqKQI/AAAAAAAAIq4/dZd2AlfT_lc/s1600/lighttable-skin-light-welcome.png" class="img-code">
<p>All the settings now work correct and changes are applied straight away, you no longer have to open a new tab to see the changes.  The changes are also applied to the Welcome screen too.</p>
<p>You can apply themes to LightTable in the same way as before</p>
<pre><code>C-k <span class="keyword">set</span> theme theme-<span class="property">name</span>
</code></pre><p>You can also set if the themes should run on a light or dark skin of LightTable</p>
<pre><code>C-k <span class="keyword">set</span> skin light
C-k <span class="keyword">set</span> skin dark
</code></pre><p>Or you can even combine the above it seems, although I am not sure this works for all theme.  It may just be for the solarized light theme.</p>
<pre><code><span class="keyword">set</span> theme solarized light
<span class="keyword">set</span> theme solarized dark
</code></pre><h1 id="Download_and_Install_LightTable">Download and Install LightTable</h1><p>Everything is the same as my <a href="http://jr0cket.co.uk/2012/12/clojure-development-with-lighttable-02x.html" target="_blank" rel="external">previous LightTable post</a>, just <a href="http://www.lighttable.com/" target="_blank" rel="external">download</a> the relevant file and off you go.</p>
<p>If you had an earlier version of LightTable installed, I also recommend removing your local configuration directory</p>
<pre><code><span class="title">rm</span> ~/.lighttable
</code></pre><h1 id="Finding_your_way">Finding your way</h1><p>Another editor feature added in this release is <code>find</code>, which as you would expect allows you to find a text string within your code.</p>
<img src="http://2.bp.blogspot.com/-qDC7hkkItzA/UMC4XDa0w1I/AAAAAAAAIrc/etyhPA17UKQ/s1600/lighttable-skin-light-find.png" class="img-code">
<h1 id="What_version_am_I?">What version am I?</h1><p>A nice addition is the version command, which opens up another tab and shows you the version of LightTable you are running.  You also get the change log so you can see what has been fixed and there is a button to check for updates.</p>
<img src="http://4.bp.blogspot.com/-SzgIYVaLc40/UMC7KhDZ0_I/AAAAAAAAIr4/3_XPIb0ZS7M/s1600/lighttable-skin-light-version.png" class="img-code">
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>So as soon as I decided to <a href="http://blog.jr0cket.co.uk/2012/12/clojure-development-with-lighttable-02x.html">write about LightTable</a>, the developers go and improve a whole bunch of things.  With the 0.2.3 release that happened earlier today the configuration of LightTable now works correctly.</p>
<p>This change is going to make it so much easier to use LightTable for demo’s and coding dojo’s.   The has been an update to the default solarized light theme that looks very pretty to me.</p>]]>
    
    </summary>
    
      <category term="clojure" scheme="http://jr0cket.co.uk/tags/clojure/"/>
    
      <category term="lighttable" scheme="http://jr0cket.co.uk/tags/lighttable/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Clojure Development With LightTable 0.2.x]]></title>
    <link href="http://jr0cket.co.uk/2012/12/clojure-development-with-lighttable-02x.html.html"/>
    <id>http://jr0cket.co.uk/2012/12/clojure-development-with-lighttable-02x.html.html</id>
    <published>2012-12-04T19:13:00.000Z</published>
    <updated>2015-03-18T15:08:46.204Z</updated>
    <content type="html"><![CDATA[<img src="http://www.lighttable.com/images/logo.png" class="img-thumbnail">
<p><a href="http://www.lighttable.com/" target="_blank" rel="external">LightTable</a> is a <a href="http://www.kickstarter.com/projects/ibdknox/light-table" target="_blank" rel="external">kickstarter project</a> to create new kind of developer tool for Clojure development, inspired by the <a href="http://www.youtube.com/watch?v=PUv66718DII" target="_blank" rel="external">Inventing on Principle talk by Bret Victor</a>.</p>
<p>LightTable aims to give developers instant feedback about their code, showing how any change affects their applications. Giving you a developer “surface” to work on, which will bring information to the places you need it the most.  The principles of the LightTable design include:</p>
<ul>
<li>Documentation there when you need it, no need to search</li>
<li>Edit anywhere and anything - not just text and not just as files</li>
<li>Discover by doing, changes produces instantaneous results</li>
<li>Shine a light on related pieces of code</li>
</ul>
<a id="more"></a>
<h1 id="Status_of_the_LightTable_Project">Status of the LightTable Project</h1><img src="http://1.bp.blogspot.com/-SU2JlT8A9Kw/UL9Jclni9-I/AAAAAAAAIqc/9ELhASNZrXo/s1600/lighttable-game-example.png" class="img-code">
<p>LightTable 0.1.x of LightTable showed of  some of the concepts that this tool will eventually have.  It moved away  from the concepts of files and allowed you to work with individual  parts of your code - functions and definitions.</p>
<p>LightTable  0.2.x has fewer concepts implemented than 0.1.0 and may seem like a backward step on the outside.  However the rewrite decision taken for this version allows the team to have a solid code base to bring back all the innovative  features.  This rewrite includes a proper packaging approach making updates become almost transparent, with LightTable grabbing updates behind the scenes and informing you when you need to restart.</p>
<img src="http://4.bp.blogspot.com/-9LOuNwvoNE4/UL5RooIZrwI/AAAAAAAAIqA/0xqL_7jufyU/s1600/lighttable-update-notices.png" class="img-code"> 
<p>LightTable still has a long way to go to implement all the ideas it has, but at present it is a usable tool for discovering and developing Clojure code.  In fact it is now at a stage where the team are using LightTable to develop itself, so they are well aware of features that need adding.  There  is quite a list of feature requests over at the <a href="https://github.com/Kodowa/Light-Table-Playground/issues" target="_blank" rel="external">Github Issue tracker for the project</a>.</p>
<img src="http://3.bp.blogspot.com/-te_MuKdFBTQ/TzFLahe2BxI/AAAAAAAAEbY/Bn_JPN_s3qU/s1600/clojure-logo-500x.png" class="img-code">
<h1 id="Language_support_in_LightTable">Language support in LightTable</h1><p>By release time, LightTable will support Clojure, ClojureScript, JavaScript (nodejs) and Python.</p>
<p>Currently LightTable only supports Clojure, but ClojureScript will be the next one to be supported and sounds like its not far away.</p>
<h1 id="Getting_started_with_LightTable">Getting started with LightTable</h1><img src="http://4.bp.blogspot.com/-vgIvECRudu4/UL4AKSsztzI/AAAAAAAAIoc/yNVe3sFkUj8/s1600/lighttable-welcome-screen-update-message.png" class="img-code">
<p><a href="http://lighttable.com/" target="_blank" rel="external">Download LightTable</a> as</p>
<ul>
<li>a tar file for 32bit or 64bit Linux</li>
<li>an app file for MacOSX</li>
<li>a zip file for windows</li>
</ul>
<p>Running LightTable gives you a welcome screen that gives you details of all the keyboard controls.  There are only a few controls to learn, most should be familiar.  You will need to learn these command as LightTable is very keyboard focused, just like Vi and Emacs.</p>
<p>Commands are entered in a small window at the bottom of the screen.  A menu pops up to show you want commands are available, but this is only a guide and you cannot select items on the menu with a mouse. </p>
<h1 id="Creating_Clojure_projects">Creating Clojure projects</h1><p>You can work with Leinignen created Clojure projects, loading exiting ones or creating a new ones.  Or you can fire up the REPL, using Instarepl.</p>
<p>Typically I use Leiningen via the command line to create a new project with the command</p>
<pre><code>lein <span class="keyword">new</span> my-<span class="keyword">project</span>
</code></pre><p>This allows me to then put the project into version control using Git with the command <code>git init</code></p>
<h1 id="Working_with_Projects">Working with Projects</h1><p>Connect allows you to work with a Leiningen projects.</p>
<pre><code><span class="constant">C-</span>k connect ~<span class="regexp">/projects/clojure</span><span class="regexp">/my-project/src</span><span class="regexp">/core.clj</span>
</code></pre><p>Like with emacs and the Unix command line, LightTable lets you tab through your folder structure to save typing.  Selecting a Clojure file will trigger LightTable to connect to a Clojure REPL environment via Leiningen.  If more than one REPL is running you can choose the project from which the REPL was run.  If no REPL is running you can connect to a leiningen project, which will import all the dependencies and load the namespaces into LightTable.</p>
<p>With a source file you can evaluate directly and the results are displayed on the far right hand side.  These results carry over between all tabs.  This unfortunately can block other code, especially in the Instarepl output.  However, clicking on the output bubbles will get rid of each one.</p>
<p>You can connect to multiple projects within LightTable and when you fire up Instarepl you can decide which one you want to connect to. </p>
<h2 id="Using_Instarepl">Using Instarepl</h2><img src="http://4.bp.blogspot.com/-nc5cPfRiLOI/UL5KemAA0DI/AAAAAAAAIpU/AL64k4Ilh1I/s1600/lighttable-instarepl-connect.png" class="img-code">
<p>This is the REPL environment for LightTable.  It allows you to run any code that LightTable knows about.  Instarepl is started with:</p>
<pre><code><span class="keyword">C</span>-k Instarepl
</code></pre><p>As soon as you type code into the REPL, it will look for a place to evaluate your code.  If you are already connected to a project then it will allow you to select that.  Otherwise you can either connect to another existing Leiningen project or start a local client.   </p>
<p>When you connect to a project then LightTable is aware of the namespace and you can call the functions and use the definitions within it.</p>
<img src="http://2.bp.blogspot.com/-_ZzAf7Q2HX0/UL5Kfkh3nZI/AAAAAAAAIpY/-r6CKiHl4d4/s1600/lighttable-instarepl-connecting.png" class="img-code">
<p>I my opinion, the <strong>Live evaluation</strong> is the most interesting feature of Instarepl.  This not only gives you the results of you functions but also shows evaluations of the aspects of functions all the way through the code.</p>
<p>I used the Instarepl recently as a great way to introduce 100 Java developers to Clojure and it was really useful to see what was happening underneath.</p>
<img src="http://4.bp.blogspot.com/-mEvULZ0TaPc/UL4n855xogI/AAAAAAAAIo4/7ffBhvUgh3g/s1600/lighttable-instarepl-examples.png" class="img-code">
<h1 id="Customising_LightTable">Customising LightTable</h1><p>There are some basic customisations available for LightTable using the <code>set</code> command, but they are not persistent (not yet anyway).  Essentially you can change the theme and switch on/off line numbers using the command</p>
<p>Theme and line number changes do not take immediate effect, you need to open a new tab before you see the change. The Welcome screen is never effected by theme changes.</p>
<p>You can resize the font at any time and it even resizes the command line font.  I found a good size for presentation is 14 or 16. </p>
<pre><code><span class="built_in">set</span> <span class="built_in">line</span>-numbers <span class="keyword">true</span>
<span class="built_in">set</span> <span class="built_in">line</span>-numbers <span class="keyword">false</span>
<span class="built_in">set</span> font-<span class="built_in">size</span> <span class="number">12</span>
<span class="built_in">set</span> theme solarized light
<span class="built_in">set</span> theme solarized dark
<span class="built_in">set</span> theme <span class="keyword">default</span>
<span class="built_in">set</span> skin light
<span class="built_in">set</span> skin dark
</code></pre><p>All the <a href="http://codemirror.net/demo/theme.html" target="_blank" rel="external">codemirror</a> themes are also included, although on my Mac with OSX10.7 they didn’t all display exactly the same in LightTable as they did on the demo page.</p>
<h1 id="LightTable_Resources">LightTable Resources</h1><ul>
<li><a href="http://www.lighttable.com/" target="_blank" rel="external">Project home and downloads</a></li>
<li><a href="https://groups.google.com/forum/?fromgroups=#%21forum/light-table" target="_blank" rel="external">LightTable announcements</a> </li>
<li><a href="https://groups.google.com/forum/?fromgroups#%21forum/light-table-discussion" target="_blank" rel="external">LightTable discussion group</a>      </li>
<li><a href="https://github.com/Kodowa/Light-Table-Playground/issues" target="_blank" rel="external">Github project issues</a>        </li>
<li><a href="http://github.com/ibdknox/live-cljs" target="_blank" rel="external">Live game editor</a> </li>
</ul>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="http://www.lighttable.com/images/logo.png" class="img-thumbnail">
<p><a href="http://www.lighttable.com/">LightTable</a> is a <a href="http://www.kickstarter.com/projects/ibdknox/light-table">kickstarter project</a> to create new kind of developer tool for Clojure development, inspired by the <a href="http://www.youtube.com/watch?v=PUv66718DII">Inventing on Principle talk by Bret Victor</a>.</p>
<p>LightTable aims to give developers instant feedback about their code, showing how any change affects their applications. Giving you a developer “surface” to work on, which will bring information to the places you need it the most.  The principles of the LightTable design include:</p>
<ul>
<li>Documentation there when you need it, no need to search</li>
<li>Edit anywhere and anything - not just text and not just as files</li>
<li>Discover by doing, changes produces instantaneous results</li>
<li>Shine a light on related pieces of code</li>
</ul>]]>
    
    </summary>
    
      <category term="clojure" scheme="http://jr0cket.co.uk/tags/clojure/"/>
    
      <category term="lighttable" scheme="http://jr0cket.co.uk/tags/lighttable/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Heroku Hackathon for Media Industry Developers]]></title>
    <link href="http://jr0cket.co.uk/2012/11/heroku-hackathon-for-media-industry.html.html"/>
    <id>http://jr0cket.co.uk/2012/11/heroku-hackathon-for-media-industry.html.html</id>
    <published>2012-11-27T14:34:00.000Z</published>
    <updated>2015-03-18T15:08:46.208Z</updated>
    <content type="html"><![CDATA[<img src="http://2.bp.blogspot.com/-yIBn-HYfxeA/UI_UGVJF6AI/AAAAAAAAIdo/MLPDWYCbX2Q/s1600/heroku-logo-light-300x100.png" class="img-thumbnail"> 
<p>Bringing developers with similar experiences and interests together is a great way to organise a Hackathon.  At the latest Heroku hack, it brought together developers from media companies including the <a href="http://www.ft.com/" target="_blank" rel="external">Financial Times</a>, <a href="http://www.reedbusiness.com/" target="_blank" rel="external">RBI</a>, <a href="http://www.ubm.com/" target="_blank" rel="external">UBM</a>, <a href="http://www.ticketmaster.co.uk/about_us/" target="_blank" rel="external">TicketMaster</a>, <a href="http://precursive.co.uk/" target="_blank" rel="external">Precursive</a> and <a href="http://www.tquila.com/" target="_blank" rel="external">Tquila</a>.</p>
<p>As this was the first event, I am very grateful to the 20 developers that braved the awful weather that day.</p>
<img src="http://rlv.zcache.co.uk/pizza_and_math_poster-r372895298c86435a8c0ee8d7e77a634c_wad_325.jpg" class="img-topic"> 
<p>The evening started with a chance for developers to “talk tech” over free beer &amp; pizza and discuss what challenges they wanted to work on that evening.  In the end we split into teams based on the main language they wanted to work in and each team worked on a different application.</p>
<p>As most of the developers were new to Heroku, went over a check-list to get started.  As <a href="http://jr0cket.co.uk/2012/11/git-push-deploy-7-tiny-steps-to.html" target="_blank" rel="external">its so easy to use Heroku</a> then this only took a couple of minutes.</p>
<p>Thanks to the developers at Salesforce, we also had a “Heroku mentor” for each team to help them get going.  Once everyone was over the initial steps with Heroku, the only challenging part was to work together to build their application in a short space of time.</p>
<h1 id="Getting_creative_with_Application_Development">Getting creative with Application Development</h1><p>The different teams chose to develop applications with Java, Ruby and Node.js.</p>
<img src="http://3.bp.blogspot.com/-I-r6IgSu_Wg/ULTOqpFhSbI/AAAAAAAAInI/OL8mLfGIR10/s1600/heroku-postgress-addon.png" class="img-topic"> One team was quite ambitions in trying to build a location based app for seeing where the most popular tweets were coming from.  Using <a href="https://addons.heroku.com/catalog/heroku-postgresql" target="_blank" rel="external">Heroku Postgres</a> they quickly extracted the data they needed.  The location information would be shown using Google maps and unfortunately they introduced a bug they didn’t quite fix in in time that stopped those locations showing up as pins on the map.<br><br>One developer also succeeded in deploying something he had written previously, a graphical to-do list.  Although it was a fairly static HTML &amp; JavaScript site, by changing the index.html file to index.php then Heroku was happy to run it as an application.<br><br><img src="http://1.bp.blogspot.com/-PwP7CDcQ1ng/ULTOBOu1EmI/AAAAAAAAInA/cFr17ApxCvI/s1600/heroku-create-and-push.png" class="img-code"> 
<p>The other teams created a voting application and an “all I want for christmas” wish list, similar to Amazon. </p>
<p>So every team got something deployed live to the Internet, some teams even got more than one app live!</p>
<p>The hackathons go on and the next one will be an all day <a href="http://www.meetup.com/LondonSalesforceDevelopers/events/91343352/" target="_blank" rel="external">Hack the Tower</a> at one of the tallest buildings in London, Tower 42.  Salesforce has an office with amazing views and we 50 developers signed up across different technical communities.</p>
<blockquote>
<p>Update: December 2013 - HackTheTower has now moved to the Salesforce Tower in London, previously known as the Heron tower.</p>
</blockquote>
<h1 id="Back_to_basics">Back to basics</h1><img src="http://2.bp.blogspot.com/-89_7BGHfAIc/ULTNeODtOcI/AAAAAAAAIm4/KAzHL6savLs/s1600/heroku-continuous-deliver-enterprise.png" class="img-code"> 
<p>By popular demand, I’m also planning some Heroku workshops at Tower42 (where I am also running “Hack the Tower”).  These workshops will give developers the experience needed to help them deploying their apps naturally and give them an effective deployment workflow with other common tools such as Github.</p>
<p>The workshops will also give developers insight into how they can learn other cool technology such as MongoDB &amp; Redis without the hassle of installation and configuration. </p>
<blockquote>
<p>Sign up for free to the <a href="http://www.meetup.com/LondonSalesforceDevelopers/" target="_blank" rel="external">London Salesforce Developer community</a> to keep up with these events.I am also planning a talk for the <a href="http://www.meetup.com/Londonjavacommunity/" target="_blank" rel="external">London Java Community</a> (3,000 members) on “Heroku for Java Developers”.  This will help give developers a good overview of the platform capabilities, the developer workflow &amp; tools as well as add-ons and cool technology they can easily try out.  </p>
</blockquote>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="http://2.bp.blogspot.com/-yIBn-HYfxeA/UI_UGVJF6AI/AAAAAAAAIdo/MLPDWYCbX2Q/s1600/heroku-logo-light-300x100.png" class="img-thumbnai]]>
    </summary>
    
      <category term="hackathon" scheme="http://jr0cket.co.uk/tags/hackathon/"/>
    
      <category term="heroku" scheme="http://jr0cket.co.uk/tags/heroku/"/>
    
      <category term="events" scheme="http://jr0cket.co.uk/categories/events/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Git Push Deploy - 7 Tiny Steps to Kickstart App Dev on Heroku]]></title>
    <link href="http://jr0cket.co.uk/2012/11/git-push-deploy-7-tiny-steps-to.html.html"/>
    <id>http://jr0cket.co.uk/2012/11/git-push-deploy-7-tiny-steps-to.html.html</id>
    <published>2012-11-26T11:45:00.000Z</published>
    <updated>2015-03-18T15:08:46.208Z</updated>
    <content type="html"><![CDATA[<img src="http://1.bp.blogspot.com/-PwP7CDcQ1ng/ULTOBOu1EmI/AAAAAAAAInA/cFr17ApxCvI/s1600/heroku-create-and-push.png" class="img-thumbnail"> 
<p>Deploying your application becomes a very natural step when deploying to Heroku.  Its also incredibly easy to create applications and work on them in a continuous deployment workflow.</p>
<p>There are 7 tiny steps to create your very first Heroku application </p>
<a id="more"></a>
<ul>
<li>Create an account on <a href="http://www.heroku.com/" target="_blank" rel="external">Heroku</a> and download the <a href="https://toolbelt.heroku.com/" target="_blank" rel="external">Heroku Toolbelt</a></li>
<li><code>heroku login</code></li>
<li>Create your application (Java, Node.js, Scala, Clojure, Ruby, Rails, Python, Django)</li>
<li><code>git init</code></li>
<li><code>heroku create</code></li>
<li>Define a <code>Procfile</code> (to tell Heroku how to start you application)</li>
<li><code>git push heroku master</code></li>
</ul>
<p>Once you have deployed you application, then its simply a matter of <code>git push heroku master</code> each time you have code changes (commits) you want to deploy.</p>
<p>With 750 hours for free per application per month, you can easily test out your ideas and software without any additional risk.</p>
<p>To begin your journey with “git push deploy” then follow the <a href="https://devcenter.heroku.com/articles/quickstart" target="_blank" rel="external">quick start guide for Heroku</a> and use one of the language specific tutorials to create you next live app.</p>
<p>Happy deploying.</p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="http://1.bp.blogspot.com/-PwP7CDcQ1ng/ULTOBOu1EmI/AAAAAAAAInA/cFr17ApxCvI/s1600/heroku-create-and-push.png" class="img-thumbnail"> 
<p>Deploying your application becomes a very natural step when deploying to Heroku.  Its also incredibly easy to create applications and work on them in a continuous deployment workflow.</p>
<p>There are 7 tiny steps to create your very first Heroku application </p>]]>
    
    </summary>
    
      <category term="git" scheme="http://jr0cket.co.uk/tags/git/"/>
    
      <category term="heroku" scheme="http://jr0cket.co.uk/tags/heroku/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[All Your Base Aftermath - the Afternoon]]></title>
    <link href="http://jr0cket.co.uk/2012/11/all-your-base-aftermath-afternoon.html.html"/>
    <id>http://jr0cket.co.uk/2012/11/all-your-base-aftermath-afternoon.html.html</id>
    <published>2012-11-23T16:37:00.000Z</published>
    <updated>2015-03-18T15:08:46.204Z</updated>
    <content type="html"><![CDATA[<img src="http://3.bp.blogspot.com/-mf5oQ5REbLA/UK_KqBKfA9I/AAAAAAAAIlg/NkVH_v20CLM/s1600/all_your_base_conf_2012.png" class="img-thumbnail"> 
<p>The second half of All your base was just as great as the first, although there was so many interesting ideas and new shiny things to try I will be busy through the holidays trying to process it all.</p>
<p>The talks this in the afternoon treated us to a feast of: Git as a NoSQL db, Redis, MySQL at Twitter, LawnChair mobile web persistence, Postgres Demystified and Apache Cassandra.  What follows is just some of that data goodness…</p>
<a id="more"></a>
<h1 id="Postgres_Demystified_by_Craig_Kerstiens,_Heroku">Postgres Demystified by Craig Kerstiens, Heroku</h1><p><a href="https://speakerdeck.com/craigkerstiens/postgres-demystified" target="_blank" rel="external">slides</a>)</p>
<p><a href="http://www.postgresql.org/" target="_blank" rel="external">Postgres</a> is a really powerful database yet still feels pretty lightweight to use and a world away from the heavy-duty admin required for other “enterprise” db’s.</p>
<p>Postgres is also one of the most innovative relational datbases out there, long having an object-relational model and <a href="http://en.wikipedia.org/wiki/Multiversion_concurrency_control" target="_blank" rel="external">Multiversion Concurrency Control</a> (MVCC) to keep data really safe.  Support was recently added for storing data in the <a href="http://json.org/" target="_blank" rel="external">json</a> format and you can even hook Postgrest up directly to <a href="http://redis.io/" target="_blank" rel="external">Redis</a>.</p>
<p>With so many features it often referred to as the <strong>emacs of databases</strong>, in that it can really do so much more than most databases.</p>
<p>So its no surprise then that the popularity of Postgres has grown over the last few years and that companies such as Atlassian and Heroku run their businesses on it.</p>
<img src="http://3.bp.blogspot.com/-Nsye5ICWkTY/ULzEtFbtc2I/AAAAAAAAInk/Pv7TAovtJd0/s1600/mac-boo-pro-sideon-lid-closing.jpg" class="img-topic"> 
<p>One bug-bear for developers was trying to get postgres installed on a Mac, it was far too painful.  So the team at Heroku created an app for that at <a href="http://postgresapp.com/" target="_blank" rel="external">http://postgresapp.com/</a>.  Now its just a matter of a download and dragging the .app to your applications folder.</p>
<p>Otherwise, PSQL is a really easy to use terminal client for Postgres. PSQL enabling you to execute queries interactively and see the query results instantly.  PSQL also supports tab completes and <code>\e</code> allows you to edit the commands directly in what ever is your default shell editor (emacs, vim, etc).  PSQL also provides meta-commands and various shell-like features to facilitate writing scripts and automating a wide variety of tasks, so its really flexible.</p>
<p>There are lots of data types supported in Postgres, including the really useful <em>arrays</em>.  As thought has been put into time based data then support for Range types and <code>timestamptz</code> is also a really so nice touch to help you prevent time conflicts.</p>
<p>Postgres 9.2 brings direct support for <a href="http://json.org/" target="_blank" rel="external">json</a> data type.  Coupling this with the JavaScript V8 engine that is now part of the database server you can do some very powerful things.  However, instead of just SQL injection attacks to be  wary about, it you dont manage access to your database carefully, you  could also be susceptible to json and javascript injection attacks - so use with care. </p>
<blockquote>
<p><a href="https://twitter.com/lizconlan" target="_blank" rel="external">@lizconlan</a> Great Postgres primer from <a href="http://twitter.com/craigkerstiens" target="_blank" rel="external">@craigkerstiens</a>, totally get the emacs quote <a href="http://twitter.com/AYBconf" target="_blank" rel="external">#AYBconf</a></p>
</blockquote>
<h1 id="Performance_tips">Performance tips</h1><p>Using the <code>explain</code> command can help you work out inefficiencies in your database queries.  Adding explain to your queries will show you what is going to happen if that query is run and an estimate of how long postgres thinks it will take to run.</p>
<p>Using <code>explain analyze</code> postgres will run the query and then analyse how long the query actually took.  A good target is to aim for 10 miliseconds as a baseline.</p>
<p><a href="http://www.pgadmin.org/" target="_blank" rel="external">PgAdmin</a> can also show you a graphical representation of the explain plan.</p>
<blockquote>
<p><a href="https://twitter.com/craigkerstiens" target="_blank" rel="external">@craigkerstiens</a> your web app DB query should take 10ms at most <a href="https://twitter.com/AYBConf" target="_blank" rel="external">@AYBConf</a> <a href="http://tweetchat.com/room/ayb12" target="_blank" rel="external">#ayb12</a></p>
</blockquote>
<p>A great indexing technique is to create your indexes concurrenty, so you dont need to take you database off for a day to improve performance.</p>
<pre><code><span class="built_in">create</span> index concurrently <span class="title">_index</span>_name_ <span class="command"><span class="keyword">on</span> <span class="title">_table_</span> </span>
</code></pre><p>However, dont worry about indexes too much up front, wait and see how your uses work with your application and then start to optimise.</p>
<p>There are lots more <strong><a href="http://www.craigkerstiens.com/2012/04/30/why-postgres/" target="_blank" rel="external">reasons to use Postgres</a></strong>, as covered in a blog series by Craig.  You can also discover more detail about postgres with <a href="http://www.postgresguide.com/" target="_blank" rel="external">Craigs online guide</a>.</p>
<p>Get a jump start by <strong><a href="https://addons.heroku.com/heroku-postgresql" target="_blank" rel="external">adding postgres to your application on Heroku</a></strong> or get <strong><a href="https://postgres.heroku.com/" target="_blank" rel="external">Postgress as a service</a></strong>.</p>
<h1 id="Git_-_the_NoSQL_database_?">Git - the NoSQL database ?</h1><p>We all know that Git is amazing at storing and managing source code, but how is it for data?  That was the question posed by Brandon Keepers of Github?</p>
<blockquote>
<p><a href="http://twitter.com/alegonbel" target="_blank" rel="external">alegonbel</a> Git = the stupid content tracker <a href="https://twitter.com/ayb12" target="_blank" rel="external">#ayb12</a></p>
</blockquote>
<p>When you ask git what it is, <code>man git</code>, then it just tells you its a stupid content tracker.  That doesnt mean its a bad tracker, its just that it does not care what it is tracking, leading to the idea that Git can be used for more than code.</p>
<img src="http://2.bp.blogspot.com/-uPeHmICWqLM/UK_FbuqEBhI/AAAAAAAAIlI/R7hBrt5F4hU/s1600/git-man-stupid-content-tracker.png" class="img-topic">
<p>If you look at the contents of the <code>.git/objects</code> folder for a project you can see all the files that make up the git data model.  So you can see, its not like a “traditional” data store and as its file based will have several limitations.</p>
<img src="http://3.bp.blogspot.com/-A4LlPh6PMrM/UK_LcVJkdTI/AAAAAAAAIlo/Wm2PnNTMd3E/s1600/git-internals-commits.png" class="img-code"> 
<p>When a file is added to git, <code>git add</code>, <code>git commit</code>, it puts that file in a blob and creates a hash of the data that is therefore unique.  If the hash is the same on two files it means that their data is exactly the same.</p>
<p>A tree is then created that points to that blob and any other related trees.  Finally we get back to a commit, which has a tree that is the root of the project as well as project info such as author and message.</p>
<p>When a new change is added to git it has to point to a point in the existing tree.  As anything existing is immutable, a new file is created as a blob with a new tree that points to.  However, that new tree can use reference a parent in the existing tree so changes are added efficiently as only the things that have changed are added to the data model.</p>
<p>All the great features that database systems have, git has none of those.  What git can do is:</p>
<ul>
<li>Versioning - look back at previous changes really easily and create diffs of what has changed.</li>
<li>Hooks - update caches as an alternative form of indexing for searches.</li>
<li>No “big design up front” - optimize the storage based on the actual usage patterns and evolve the data structures as more discovery is made.</li>
<li>Branches - gives long lived transactions</li>
<li>Replication - a clone is a full copy of all the data and clones can be driven by hooks So Querying data is something you just have to figure out yourself.  Concurrency is a challenge as git is file system based, so when multiple people try to update then changes could be lost.  Scaling is also a really big challenge, especially when randomly updating records in git - partly this is because we are re-writing the whole tree structure to make an update.</li>
</ul>
<p>Git also does a really bad job when it comes to handling long running projects that have grown considerable in size.  Add, status and commit commands talke longer and longer. </p>
<p>So whilst its interesting to think about git as some kind of simple data store, there are a great many challenges if you want to manage big data sets within one git project. </p>
<p>Brandon left us with the thought <em>“abuse your tools, imagine how to make them better!”</em>.</p>
<h1 id="Redis_Steady_Go">Redis Steady Go</h1><img src="http://4.bp.blogspot.com/-nDtNvipmj1g/ULACYq-_CDI/AAAAAAAAImI/8zQu6eoIM5I/s1600/redis-logo-300dpi.png" class="img-topic"> 
<blockquote>
<p>Redis is one of those great projects that when discovered by developers they really take to it.  Redis is short for <em>remote dictionary server</em> although you can think of it as a <em>remote hashing server</em>.</p>
</blockquote>
<p>Put simply it manages strings that are keys and values.  It is often referred to as a <em>data structure server</em> since keys can contain <a href="http://redis.io/topics/data-types#strings" target="_blank" rel="external">strings</a>, <a href="http://redis.io/topics/data-types#hashes" target="_blank" rel="external">hashes</a>, <a href="http://redis.io/topics/data-types#lists" target="_blank" rel="external">lists</a>, <a href="http://redis.io/topics/data-types#sets" target="_blank" rel="external">sets</a> and <a href="http://redis.io/topics/data-types#sorted-sets" target="_blank" rel="external">sorted sets</a>. </p>
<p>You can also consider redis as a Domain Specific Language (DSL) for abstract data types.  Its similar to memcache but it adds a whole lot more functionality.</p>
<p>There are three big uses for Redis:</p>
<ul>
<li>A simple to use and work with NoSQL database</li>
<li>A messaging system, Redis comes with a publish / subscribe API</li>
<li>A web application cache (an alternative to memcache) - you can store your webpages in redis and they come out really fastSony use redis to manage the scoring from their online Playstation3 games network. Using a sorted set in Redis, millions of scores are managed for each game (as I can attest to on my poor scoring when playing StarDust).    </li>
</ul>
<p>Pintrest also used redis as much of their content, specifically as they presented their content in terms of ranking.  All those values of all those users have to be kept somewhere.</p>
<p>Some important characteristics of Redis include:</p>
<ul>
<li>Individual actions are atomic so data does not become corrupt</li>
<li>Single threaded</li>
<li>Event driven</li>
<li>Data can be expired</li>
<li>Replication can be done with the use of a slave and Redis is very good at live replacement.</li>
<li>Very high performance - everything is stored in memory, so its super fast.  It does have persistence though as otherwise it wouldn’t be ultimately useful.</li>
<li>You can use just about any language you have ever heard of with Redis (except <a href="http://en.wikipedia.org/wiki/Assembly_language" target="_blank" rel="external">Assembly</a> &amp; <a href="http://en.wikipedia.org/wiki/Fortran" target="_blank" rel="external">Fortran</a>).</li>
<li>You can also use Redis from the Postgres databaseSo what are you waiting for, go and play with <a href="http://redis.io/" target="_blank" rel="external">Redis</a> today!  Or simply add <a href="https://addons.heroku.com/catalog/redistogo" target="_blank" rel="external">RedisToGo</a> to your application on Heroku</li>
</ul>
<h1 id="In_Summary">In Summary</h1><p>All your base was a fantastic experience and its great to see how hugely popular conferences are.  It was great to mix with people from a wider range of backgrounds that the usual developer conference.</p>
<p>I am looking forward to All Your Base 2013!</p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="http://3.bp.blogspot.com/-mf5oQ5REbLA/UK_KqBKfA9I/AAAAAAAAIlg/NkVH_v20CLM/s1600/all_your_base_conf_2012.png" class="img-thumbnail"> 
<p>The second half of All your base was just as great as the first, although there was so many interesting ideas and new shiny things to try I will be busy through the holidays trying to process it all.</p>
<p>The talks this in the afternoon treated us to a feast of: Git as a NoSQL db, Redis, MySQL at Twitter, LawnChair mobile web persistence, Postgres Demystified and Apache Cassandra.  What follows is just some of that data goodness…</p>]]>
    
    </summary>
    
      <category term="events" scheme="http://jr0cket.co.uk/categories/events/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[All Your Base Aftermath - Morning Round Up]]></title>
    <link href="http://jr0cket.co.uk/2012/11/all-your-base-aftermath-morning-round-up.html.html"/>
    <id>http://jr0cket.co.uk/2012/11/all-your-base-aftermath-morning-round-up.html.html</id>
    <published>2012-11-23T12:57:00.000Z</published>
    <updated>2015-03-18T15:08:46.204Z</updated>
    <content type="html"><![CDATA[<img src="http://www.whiteoctober.co.uk/blog/wp-content/uploads/2012/10/all_your_base_conf_2012.png" class="img-thumbnails">
<p>The <em>All Your Base conference</em> was a brilliant example of getting a  conference right.  Everything was ideal.  The venue was right next to the train station and the after party was directly opposite, so staggering for the trainback home.</p>
<p>The network was awesome, actually getting a hard line and even a free ethernet cable in the goody bag (because who is going to remember to bring one). </p>
<p>And of course an amazing line up of speakers from cool companies including MongoDB (10gen), Heroku, Basho, MariaDB and many more.</p>
<p>Here is part one of my experiences at All Your Base.</p>
<a id="more"></a>
<h1 id="Dynamic_data_with_MongoDB">Dynamic data with MongoDB</h1><img src="http://3.bp.blogspot.com/-URYGwZsN2CE/UK9qDsMTWdI/AAAAAAAAIj4/33Ne75f399c/s1600/mongo-db-logo.png" class="img-thumbnails"> 
<p>Alvin Richards gave a great peek under the skirt of MongoDB, discussing replication, latency and how to manage data effectively in a distributed system.  Some classic authors used for the JSon examples that define the mongodb “schema”.  I say schema, but MongoDB does not require an up-front schema design like a relational database.  All you need is a unique key and you can manage your data in what ever way you want using the flexible data document approach.  This allows you to have <em>polymorphic data</em>, in that you can assemble data in the way that suits your application rather than being constrained by the database product.</p>
<p>With all this power over the data, comes great responsibility.  It shouldn’t just be a “Wild West” approach.  So good conversations are important between developers and database admins. </p>
<blockquote>
<p>Find out more about MongoDB by <a href="http://www.mongodb.org/display/DOCS/Community" target="_blank" rel="external">getting involved in the community</a>.  And try out MongoDB with your application by using the add-on available via Heroku.</p>
</blockquote>
<h1 id="NoSQL_answer_to_managing_complex_domains">NoSQL answer to managing complex domains</h1><img src="http://3.bp.blogspot.com/-57wTz697UCU/UK9yko6i49I/AAAAAAAAIkY/PDaHj-PYu0Y/s1600/OrientdbLogo.png" class="img-topic">
<p>Graph databases are already used widely in the “friend-of-a-friend” networks like LinkedIn, although are generally new to the audience at the conference.</p>
<p>With a graph database you can have multiple connections between data creating a very intricate strcutre.  So whilst the graph concept is very simple, there is much to learn about using graph database well.</p>
<p>In a relational model, its important to focus on the design of the data relationships.  The more complexity the data relationships, the more complexity in the design of the database.  The biggest hangover from complex relational database design is the join.  If you traverse hundres of relationships then you are executing hundreds of JOINs.</p>
<p>The more joins you have to process the more your performance will be affected and the relational model computes that relationship every time you query the database.</p>
<blockquote>
<p>A graph database is any storage system that provides index-free adjacency - Marko RodriguezOrientDB is an open source (Apache licence) document graph nosql dbms - supports transactions, etenended,  ACID Transactions, SQL and Native Queries, Asynchronous Commands, Intents, etc.</p>
</blockquote>
<p>GraphDB handels relationships as a physical Link to the record assigned when the edige is created, so traversing cost is no longer affected by db size.  Eg, traversing 30milion connections in 5 seconds </p>
<p>Once you have a well connencted DB in the for of a Super Graph, you can cross records instead of query them.  All you need is some <strong>root verticies</strong> to start traversing.</p>
<h1 id="PouchDB_because_Offline_data_is_still_the_reality">PouchDB because Offline data is still the reality</h1><p>Voted by the WhiteOctober developers as the most interesting technology they wanted to see, Dale Harvey the creator of <a href="http://pouchdb.com/" target="_blank" rel="external">PouchDB</a> gave a great presentation using HTML5 slides (nice).  Dale currently works on Firefox OS for Mozilla and is a CouchDB contributor, so he knows what he is talking about.</p>
<p>Essentially, PouchDB is CouchDB for your browser.  You can use it by including the pouchdb.js script in your web code with a simple <code>&lt;script&gt;</code> directive.<br><code>&lt;script src=pouchdb.js&gt; &lt;/script&gt;</code> </p>
<p>Like all flexible tools, PouchDB uses JSon as the primary data store.  This gives you a great amount of flexibility in the design and use of your data.</p>
<p>Under the hood, <a href="http://pouchdb.com/" target="_blank" rel="external">PouchDB</a> uses indexedDB when run in IE, firefox, chrome.  For nodejs it uses leveldb.</p>
<p>Why is <a href="http://pouchdb.com/" target="_blank" rel="external">PouchDB</a> here, well according to Dave - <em>Multi Master replication is awesome</em></p>
<p>If you have an app and you want to work offline then this <a href="http://pouchdb.com/" target="_blank" rel="external">PouchDB</a> is a great idea.  I wish something like this was part of GoogleDocs so I could continue to edit documents when I loose connection to the Internet.  There are also many other mobile use cases where you need the data locally, not just because of limited connectivity but also for speed.</p>
<blockquote>
<p><a href="http://twitter.com/jr0cket" target="_blank" rel="external">jr0cket</a> Offline is still a fact - people still need some data locally especially when on the move</p>
</blockquote>
<p>So what’s wrong with building an active sync into your app?  Well it is very challenging.  Sync’ing is very hard, especially when it comes to conflict resolution.  <a href="http://pouchdb.com/" target="_blank" rel="external">PouchDB</a> provides a very simple mechanism to handle it.  Every document is referenced by a single id, if you change the document name then is still knows its the same document.  Only when you change the id of the document does it become a different doc.  </p>
<p>Different changes are saved separately so it allow you to merge conflicts through the PouchDB API.</p>
<p>This sounds like something I’d like to include in mobile projects, so hope to get some time to play with <a href="http://pouchdb.com/" target="_blank" rel="external">PouchDB</a> over the holidays.</p>
<h1 id="Michael_“Monty”_Widenius_-_Creator_of_MySQL_and_MariaDB">Michael “Monty” Widenius - Creator of MySQL and MariaDB</h1><img src="http://1.bp.blogspot.com/-ArH-Zpu89eU/UK9wEsiBnUI/AAAAAAAAIkQ/Sx3BeaI8KTs/s1600/mariadb-seal-flat-browntext-413x129-93172cc5c273985596a8dca78e58aa49370c4bed.png" class="img-topic"> 
<p>The MySQL project started from a desire to help people and do lots of travelling.  After MySQL was aquired by Sun (and before aquired by Oracle) new life was breathed into the open source project.  The original creators behind MySQL shifted to start working on <a href="https://mariadb.org/" target="_blank" rel="external">MariaDB</a>, a community developed database with more features yet still compatible with MySQL.</p>
<p>There is no reason to use MySQL anymore, <a href="https://mariadb.org/" target="_blank" rel="external">MariaDB</a> is better in every respect.  Its completely open and all the closed source features added to MySQL has been added to MariaDB already.  It seems that Oracle has lost much of the engineering talent around MySQL and is not able to do much around the product, hence the closed source add-ons. </p>
<blockquote>
<p><a href="http://twitter.com/mark_star" target="_blank" rel="external">mark_star</a> “MariaDb is better than MySQL in every way” - Monty, the creator of MySQL <a href="http://tweetchat.com/room/betterMigrate" target="_blank" rel="external">#betterMigrate</a></p>
</blockquote>
<p>One goal of <a href="https://mariadb.org/" target="_blank" rel="external">MariaDB</a> is to make a bridge between Relational and NoSQL models.  Using a concept called Dynamic Columns, a proof of concept of this was done by creating a storage engine for Cassandra. </p>
<p>When you want to make MySQL obsolute (which is what Monty does) then you have to provide something better to replace it.  In all respects it seems that is what the MariaDB project has achieved.  From additional in features, major performance improvements, community support and documentation then MariaDB has already become a valuable successor.</p>
<blockquote>
<p><a href="http://twitter.com/ciderpunx" target="_blank" rel="external">ciderpunx)</a> Cool I’ve now got <a href="https://twitter.com/MariaDB" target="_blank" rel="external">@MariaDB</a> installed and working. All my MySQL DBs intact </p>
<p><a href="http://twitter.com/montywi" target="_blank" rel="external">@montywi</a> Try MariaDB for yourself, it will take you less than 15 seconds to migrate, depending on how fast you type.</p>
</blockquote>
<p>Break for lunch… see you soon.</p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="http://www.whiteoctober.co.uk/blog/wp-content/uploads/2012/10/all_your_base_conf_2012.png" class="img-thumbnails">
<p>The <em>All Your Base conference</em> was a brilliant example of getting a  conference right.  Everything was ideal.  The venue was right next to the train station and the after party was directly opposite, so staggering for the trainback home.</p>
<p>The network was awesome, actually getting a hard line and even a free ethernet cable in the goody bag (because who is going to remember to bring one). </p>
<p>And of course an amazing line up of speakers from cool companies including MongoDB (10gen), Heroku, Basho, MariaDB and many more.</p>
<p>Here is part one of my experiences at All Your Base.</p>]]>
    
    </summary>
    
      <category term="events" scheme="http://jr0cket.co.uk/categories/events/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[The Master Plan for Salesforce Community Developers]]></title>
    <link href="http://jr0cket.co.uk/2012/11/the-master-plan-for-salesforce.html.html"/>
    <id>http://jr0cket.co.uk/2012/11/the-master-plan-for-salesforce.html.html</id>
    <published>2012-11-15T18:21:00.000Z</published>
    <updated>2015-03-18T15:08:46.212Z</updated>
    <content type="html"><![CDATA[<img src="http://4.bp.blogspot.com/-2YtIbrYxq-A/UKUmQSaEeZI/AAAAAAAAIig/N7P66eyzdhs/s1600/salesforce-devzone-800k-devs.png" class="img-thumbnail">
<p>The promise of fast application development using the Salesforce platform is very appealing and the latest release has attracted over 800,000 developers.</p>
<p><a href="http://heroku.com/" target="_blank" rel="external">Heroku</a> (part of the Salesforce family) is also attracting a lot of attention.  By allowing developers to deploy their applications with a simple <code>git push</code> command, it helps make continuous deployment becomes a reality.</p>
<p>These  are just two of the reasons I took the opportunity to join the  amazing team at salesforce.com.  So you can imagine I was overjoyed when I  started as Developer Advocate for EMEA.  Here is what that role is all  about.</p>
<a id="more"></a>
<h1 id="The_Plan">The Plan</h1><img src="http://blogs.developerforce.com/developer-relations/files/2012/11/the-master-plan.png" class="img-thumbnail">
<p>The plan is simple.  Help developers understand the value of developing applications with the force.com platform as well as the benefits of using Heroku to deploy their other application and services.</p>
<p>Starting with the UK, I am working hard to pull the current Salesforce developers together and build a strong community.  I’m also helping developers new to the platform to get a solid understanding of where they can use these platforms for their companies benefit and their own.</p>
<h1 id="Building_the_community">Building the community</h1><p>(% img img-thumbnail <a href="http://blogs.developerforce.com/developer-relations/files/2012/11/meetup-logo.jpg" target="_blank" rel="external">http://blogs.developerforce.com/developer-relations/files/2012/11/meetup-logo.jpg</a> %}</p>
<p>One of our partners, <a href="http://www.tquila.com/" target="_blank" rel="external">Tquila</a>, did a great job of starting a <a href="http://www.meetup.com/LondonSalesforceDevelopers/" target="_blank" rel="external">Salesforce developer community in London</a>.   I have aims of making it this community more active.  In the last month we have seen a 300% rise in members and I hope we can keep growing with exciting <a href="http://www.meetup.com/LondonSalesforceDevelopers/" target="_blank" rel="external">events</a> in the coming months.</p>
<p>I am also looking for a few passionate geeks to start communities in  their own areas. Its pretty easy to get started and salesforce.com will create a meetup.com site for you so other developers can find your  events.  Those events dont have to be grand, it can all start with a meetup in a pub (like the developer meetups in <a href="http://www.meetup.com/Bristol-Salesforce-Platform-Developer-User-Group/events/88044102/" target="_blank" rel="external">Bristol</a> &amp; <a href="http://www.meetup.com/North-UK-Salesforce-Developer-User-Group/" target="_blank" rel="external">Leeds</a>).  It just needs someone to kick-start it all and you will soon have a thriving community.</p>
<p>Check to see if there is a <a href="https://maps.google.com/maps/ms?msid=210108725500451274783.0004cab36a064aa71872b&amp;msa=0&amp;ll=39.639538,0.527344&amp;spn=108.01067,270.527344" title="Salesforce user groups world wide" target="_blank" rel="external">Salesforce community in your area</a> and get involved to boost your career - and have some fun too!  If there is no group in your area, why not <a href="mailto:info@developerforce.com" title="mailto:info@developerforce.com" target="_blank" rel="external">contact us</a> and we’ll help you start one?</p>
<h1 id="Bringing_developers_together">Bringing developers together</h1><p>People can always do so much more with the help of others.  I see the community as an amazing place to learn, discover and share ideas and techniques with open minded developers.</p>
<p>Through the local Salesforce communities we are building across Europe, we will be running lots of different events.  Here are some we are lining up already.</p>
<h2 id="Hack_the_Tower_-_getting_practical"><a href="http://hackthetower.co.uk" target="_blank" rel="external">Hack the Tower</a> - getting practical</h2><p>There is so much more you can discover by getting a group of developers  together and putting together an application in the space of a few hours.  I recently supported the <a href="http://blog.jr0cket.co.uk/2012/10/london-scala-hackathon-powered-by-heroku.html" target="_blank" rel="external">London Scala hackathon</a> where we used Heroku, Github, Play framework and MongoDB to build a community website in a morning.</p>
<img src="http://developer.salesforce.com/blogs/developer-relations/files/2012/11/LSug-hackathon-hackers-hacking.png" class="img-code">
<p>Another variation is to bring developers together from the same industry.  Not  only will these developers face similar challenges when building  applications, they can work with each other to build services that  benefit the industry.  Our first mini-hack is with <a href="http://www.meetup.com/LondonSalesforceDevelopers/events/86354442/" target="_blank" rel="external">developers in the media industry on 21st November</a>.</p>
<p>Using our space in <a href="http://maps.google.com/maps?q=Level+27A%2C+25+Old+Broad+Street%2C+London.+EC2N+1HQ+%2C+London" target="_blank" rel="external">Tower42</a> not only gives amazing views of London but allows  us to running a series of hackathons for the many developer communities  around London.  Our first “<a href="http://www.meetup.com/LondonSalesforceDevelopers/events/91343352/" target="_blank" rel="external">HackTheTower</a>“ on the 8th December in conjunction with the <a href="http://www.meetup.com/london-scala/events/91346712/" target="_blank" rel="external">London Scala user group</a>.</p>
<h2 id="Developer_Days">Developer Days</h2><p>There are some amazing things you can do with the <a href="http://developer.salesforce.com/" target="_blank" rel="external">Salesforce1 Platform</a> and <a href="http://www.heroku.com/" target="_blank" rel="external">Heroku</a> platform.  To learn all these can take a bit of time and so to help  those new to the platforms we are planning “developer days” to  kick-start your journey.</p>
<p>The developer days will consist of a morning of discussion to help you understand the <a href="http://developer.force.com/" target="_blank" rel="external">Force.com</a> and <a href="http://www.heroku.com/" target="_blank" rel="external">Heroku</a> platforms.  Then you  spend the whole afternoon building applications, practising what you have learnt with guidance from our on-site experts.</p>
<p>The developer days will run across Europe in the coming months (<em>update: these are now called Elevate</em>).</p>
<h1 id="Who_am_I?">Who am I?</h1><p>My background is mainly in Java development, although I have also done JavaScript, Python, Ruby and .Net apps too.  Recently I have been learning functional programming with Clojure (and Emacs) and <a href="http://clojuremadesimple.co.uk/" target="_blank" rel="external">teaching what I have learnt</a> to others.</p>
<p>I love learning <a href="http://clojure.org/" target="_blank" rel="external">Clojure</a> because its  an amazing new (and old) language and its great to deploy my Clojure web  apps on Heroku.  I also give talks and run practical sessions for Clojure, Java, Scala and other technical communities across the UK.</p>
<p>I have been lucky to work with some great companies in my time.  They  including Atlassian, several start-ups in London and several consultancy companies (mainly financial services) across the UK and Europe.</p>
<p>Talking tech is great fun and I love discussing all the possibilities out there.  Hope to meet you at a community event soon!</p>
<p>Thank you.<br><a href="http://twitter.com/jr0cket" target="_blank" rel="external">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="http://4.bp.blogspot.com/-2YtIbrYxq-A/UKUmQSaEeZI/AAAAAAAAIig/N7P66eyzdhs/s1600/salesforce-devzone-800k-devs.png" class="img-thumbnail">
<p>The promise of fast application development using the Salesforce platform is very appealing and the latest release has attracted over 800,000 developers.</p>
<p><a href="http://heroku.com/">Heroku</a> (part of the Salesforce family) is also attracting a lot of attention.  By allowing developers to deploy their applications with a simple <code>git push</code> command, it helps make continuous deployment becomes a reality.</p>
<p>These  are just two of the reasons I took the opportunity to join the  amazing team at salesforce.com.  So you can imagine I was overjoyed when I  started as Developer Advocate for EMEA.  Here is what that role is all  about.</p>]]>
    
    </summary>
    
      <category term="salesforce" scheme="http://jr0cket.co.uk/tags/salesforce/"/>
    
      <category term="events" scheme="http://jr0cket.co.uk/categories/events/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Managing Multiple SSH Keys to Avoid Heroku Permission Issues]]></title>
    <link href="http://jr0cket.co.uk/2012/11/managing-multiple-ssh-keys-to-avoid.html.html"/>
    <id>http://jr0cket.co.uk/2012/11/managing-multiple-ssh-keys-to-avoid.html.html</id>
    <published>2012-11-03T12:04:00.000Z</published>
    <updated>2015-03-18T15:08:46.208Z</updated>
    <content type="html"><![CDATA[<img src="http://3.bp.blogspot.com/-WbaI8XNIuc4/UJPNtGsJ8gI/AAAAAAAAIgQ/O-QkJLcoS9s/s1600/ssh-private-public-keys2.jpg" class="img-thumbnail"> 
<p>I was a little surprised to have an access issue with <a href="http://www.heroku.com/" target="_blank" rel="external">Heroku</a> when using my new Mac Book Pro, as its always been really easy to deploy my applications to Heroku in the past.&nbsp; I kicked myself when I realised I’d only set up a public key specifically for my Github account.</p>
<p>This got me to wondering the best way to set up keys given I am using different services for both personal project and work. </p>
<a id="more"></a>
<h2 id="The_situation">The situation</h2><p>I had created my first <a href="http://clojure.org/" target="_blank" rel="external">Clojure</a> application using the built in <a href="http://leiningen.org/" target="_blank" rel="external">Leiningen</a> template for heroku, which creates everything you need to deploy your Clojure application on Heroku, even the Procfile.</p>
<p>I committed the project to my local git repository and pushed a copy to the github repository for the project.&nbsp; Using foreman run I had the application running locally, so all that remained was to push it to Heroku.</p>
<p>When I tried to push to Heroku I got the following error message: </p>
<img src="http://2.bp.blogspot.com/-eNKLBlpxH0w/UJMPMFNowgI/AAAAAAAAIf4/McQ94MUVe8M/s1600/heroku-ssh-key-permission-denied.png" class="img-code"> 
<p><em>Heroku push error: permission denied (public key).</em></p>
<h2 id="Heroku_setup">Heroku setup</h2><p>To deploy your application to heroku, its simply a matter of</p>
<ul>
<li>creating an heroku account</li>
<li>downloading the heroku toolbelt</li>
<li>loging in to heroku: <code>heroku login</code></li>
<li>adding your public key to your heroku account: <code>heroku keys:add</code></li>
<li>pushing your project to the heroku git repository: <code>git push heroku master</code></li>
</ul>
<p>If you dont have an existing key, then <code>heroku keys:add</code> will create one for you.  In my case it picked up the only key I had, the one for Github.  As this key is specifically set up for my Github account then its not surprising that it was not going to work.</p>
<h2 id="Diagnosing_the_problem">Diagnosing the problem</h2><p>The Heroku toolbelt gives you the tools to see whats going on, using <code>heroku keys</code> lists the public key added to your account.  So when I checked my keys it was clear what the problem was.</p>
<img src="http://1.bp.blogspot.com/-y8YLMEbdY7c/UJUH2dV61_I/AAAAAAAAIhY/cheo-gGJWkk/s1600/Heroku-keys-github.png" class="img-code">
<h2 id="The_resolution">The resolution</h2><p>I could have just created a new key for Heroku account using the default file name <code>~/.ssh/id_rsa.pub</code>.  However, I can see myself getting confused over keys, so I created a key with a name that tells me what it is for.  I also thought it may be more secure to have different keys for different servies.</p>
<p>I used the ssh-keygen command to create a key of type RSA and when asked for a file I gave it an heroku specific name, so I knew what it was for.</p>
<img src="http://4.bp.blogspot.com/-LJ4fCbCS0cc/UJPRl_Zf75I/AAAAAAAAIgg/jid1QDaZI-I/s1600/Heroku-keys-new-key-and-upload.png" class="img-code"> 
<p>Once the key was created I added it to my Heroku account using <code>heroku keys:add</code>. </p>
<p>Looking at my keys, I see I now have two added to my Heroku account.</p>
<img src="http://1.bp.blogspot.com/-_1JP8EbnvpU/UJPP_0NEx-I/AAAAAAAAIgY/HFmdDTANylY/s1600/Heroku-keys-github-and-heroku.png" class="img-code">
<p>Lets remove the Github key using <code>heroku keys:remove [KEY]</code></p>
<img src="http://3.bp.blogspot.com/-z_ZsncYeCag/UJUEh9W5rMI/AAAAAAAAIg4/vNLWHY7GndY/s1600/Heroku-keys-remove-github.png" class="img-code">
<p>Now I just have the one public key added, the one specifically for Heroku.</p>
<img src="http://3.bp.blogspot.com/-FSx2TzEJgzQ/UJUEyQL4s1I/AAAAAAAAIhA/oHgZCSqs6YA/s1600/Heroku-keys-heroku.png" class="img-code"> 
<h3 id="Configuring_multiple_keys">Configuring multiple keys</h3><p>As I am using multiple keys then I need to specify which one my SSH connection should use when connecting to Heroku.</p>
<p>To tell Heroku which key to use, we add in a simle host cofiguration section to <code>~/.ssh/config</code>.</p>
<p>In your account home there is an <code>.ssh</code> folder that contains all your keys and any configuration file.&nbsp; I create a file called <code>config</code> and added the following configuration options</p>
<pre><code><span class="comment">## ~/.ssh/config</span>

<span class="title">Host</span> heroku.com
Hostname heroku.com
Port <span class="number">22</span>
IdentitiesOnly <span class="built_in">yes</span>
IdentityFile ~/.ssh/heroku
TCPKeepAlive <span class="built_in">yes</span>
user jstevenson<span class="variable">@heroku</span>.com
</code></pre><p>Now when I push to Heroku I do so using the right key and everything works smoothly as usual.</p>
<img src="http://4.bp.blogspot.com/-wU5q9Bbv0-k/UJUFpLgVbII/AAAAAAAAIhI/89fZ9iGd8n4/s1600/Heroku-deploy-success-myclojureweb.png" class="img-code">
<p>Why not get yourself <strong><a href="https://www.heroku.com" target="_blank" rel="external">a free Heroku account</a></strong> and deploy your application in quickly and easily.</p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="http://3.bp.blogspot.com/-WbaI8XNIuc4/UJPNtGsJ8gI/AAAAAAAAIgQ/O-QkJLcoS9s/s1600/ssh-private-public-keys2.jpg" class="img-thumbnail"> 
<p>I was a little surprised to have an access issue with <a href="http://www.heroku.com/">Heroku</a> when using my new Mac Book Pro, as its always been really easy to deploy my applications to Heroku in the past.&nbsp; I kicked myself when I realised I’d only set up a public key specifically for my Github account.</p>
<p>This got me to wondering the best way to set up keys given I am using different services for both personal project and work. </p>]]>
    
    </summary>
    
      <category term="clojure" scheme="http://jr0cket.co.uk/tags/clojure/"/>
    
      <category term="heroku" scheme="http://jr0cket.co.uk/tags/heroku/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Developer Mentors Invade Kings College London]]></title>
    <link href="http://jr0cket.co.uk/2012/11/developer-mentors-invade-kings-college_1.html.html"/>
    <id>http://jr0cket.co.uk/2012/11/developer-mentors-invade-kings-college_1.html.html</id>
    <published>2012-11-01T15:14:00.000Z</published>
    <updated>2015-03-18T15:08:46.204Z</updated>
    <content type="html"><![CDATA[<img src="http://3.bp.blogspot.com/-aqvkk1hXMKs/UJKPf9DH41I/AAAAAAAAIfA/6nRGAqOmupI/s1600/gdc-logo.jpg" class="img-thumbnail">
<p>It was great to meet so many eager minds at Kings College during the Meet a Mentor session for the Graduate Developer community.</p>
<p>Kings College is a stunning setting for helping students understand the expectations that will be put upon them when they get into industry.</p>
<a id="more"></a>
<h1 id="The_approach">The approach</h1><p>In the same approach as speed-dating and speed-flatsharing, the Meet a memtor evening has a number of tables of students and the mentors have 15 minutes to introduce themselves and answer questions.</p>
<p>Normally we pair mentors per table, however there was such a demand  this time at Kings College, each table had one mentor at a time.&nbsp; The  tables had around 50 students distributed evenly over them.</p>
<p>Every mentor has a different background, this isnt by design its just that most people in the IT industry have a very unique set of experiences.&nbsp; Even if the students are asking the same questions over again then they get different answers.</p>
<h1 id="The_podcast">The podcast</h1><p>We had request from the GDC members to record the Meet the Mentor sessions.&nbsp; I was a bit skeptical on how well this would work.&nbsp; I had my second session recorded, where I talk about the pros and cons of working as a consultant, how much I dislike PHP and whether understanding performance really matters.</p>
<img src="http://4.bp.blogspot.com/-EYkurLAE9AQ/TunyfGld5oI/AAAAAAAAIdQ/Gl9QfYaSXWY/s1600/john-stevenson-profile-barrel.png" class="img-topic"> 
<p>Listen to the session and find out for yourself if you think recording these sessions are useful</p>
<div style="text-align: center;"><br><div><object align="middle" classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" codebase="http://fpdownload.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,0,0" height="25" id="mp3playerlightsmallv3" width="210"> <param name="allowScriptAccess" value="sameDomain"> <param name="movie" value="http://www.podbean.com/podcast-audio-video-blog-player/mp3playerlightsmallv3.swf?audioPath=http://recworks.podbean.com/mf/play/rk2pa/MaM30_10B.mp3&autoStart=no"> <param name="quality" value="high"><param name="bgcolor" value="#ffffff"><param name="wmode" value="transparent"> <embed src="http://www.podbean.com/podcast-audio-video-blog-player/mp3playerlightsmallv3.swf?audioPath=http://recworks.podbean.com/mf/play/rk2pa/MaM30_10B.mp3&autoStart=no" quality="high" width="210" height="25" name="mp3playerlightsmallv3" align="middle" allowscriptaccess="sameDomain" wmode="transparent" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer"> </object><br><a href="http://www.podbean.com/" target="_blank" rel="external">Podcast Powered By Podbean</a> </div><br></div>

<p>I have been told that I talk more than the other mentors, but do well to engage with everyone on the table.&nbsp; The best way to stop me taking is to ask more questions.</p>
<h1 id="Common_Questions">Common Questions</h1><p>Having been a mentor at many of these events, there are common questions that the students ask and we have run specific sessions in the past to cover topics such as open source projects and developer tools. </p>
<iframe src="http://www.slideshare.net/slideshow/embed_code/14982333" width="100%" height="300" frameborder="0" allowfullscreen></iframe>
<p><a href="http://www.slideshare.net/JR0cket/improve-your-development-skills-with-test-driven-development" title="Improve your development skills with Test Driven Development" target="_blank" rel="external">Improve your development skills with Test Driven Development</a> from <a href="http://www.slideshare.net/jr0cket" target="_blank" rel="external">John Stevenson</a></p>
<p>This limited experience with  common development tools and practices is something that is very prevelent when developers go for their first role.&nbsp; It would be great to get some blog posts tackling these common gaps with opinions from the  mentors and others in the community.</p>
<ul>
<li>How to get into an open source project - its easier than you think</li>
<li>How to boost your job prospects with Github and blogging</li>
<li>The value of community involvement<div style="text-align: left;"></div></li>
</ul>
<p>If there are any topics you want to see or have written on this subject, please leave a comment on this post or get in touch.</p>
<h1 id="Its_not_just_developers,_its_not_just_men!">Its not just developers, its not just men!</h1><p>The people I met at the Kings College event were mainly interested in development roles, although some were asking about consultancy, some about the business side of IT and even had a great talk with one person creating their own startup company (and looking for developers to help him).</p>
<p>It was also great to see a mixture of men and women at the event, with an approximate 40% to 60% ratio.  Its wonderful to see software development attracting so many different people.</p>
<h1 id="Discussing_startups">Discussing startups</h1><img src="http://4.bp.blogspot.com/-ohLQrcWjBhg/UJKLz_Gl1MI/AAAAAAAAIeo/x2-5tLOFkX8/s1600/lean-startup-principles.png" class="img-topic"> 
<p>As I mentioned, I had a very long chat with someone in the student union bar afterwards about finding developers and other options to getting there startup going with minimal risk.&nbsp; Starting your own business is a great adventure and its very simple to get going.&nbsp; All you need is an idea and less than £100 to register a company and buy a domain name.&nbsp; The real trick is actually making money though!</p>
<p>We talked around the idea of a Minimal Viable Product (MVP), essentially thinking about the smallest most valuable service or product you could offer to your customers and find out quickly if anyone is interested.&nbsp; If you invest 3 months of your time and money before you find out if anyone will pay you for something then its a big risk!&nbsp; If you can get something out there in 3 days, getting very fast feedback, reducing the the pain of failure and affording you the opportunity to fail quite a few times.&nbsp; This fast feedback approach helps you fail fast and learn quickly from your failures and eventually find a sustainable business.</p>
<img src="http://3.bp.blogspot.com/-Kll1egLoCTk/UJKKRw0CFII/AAAAAAAAIeY/CwWePsNNtZM/s1600/forward-internet-logo-basic.png" class="img-topic"> 
<p>I told the story that now seems to be urban legend, regarding Forward Internet and the Pet Store.&nbsp; Forward create the most successfully pet store business in the UK, all from one of there team not finding anywhere they could buy a parrot cage on the Internet.&nbsp; Forward tested the demand for parrot cages by creating a mock website and collecting email addresses of those interested.&nbsp; Once they understood the demand in terms of scale and desirable products, they moved quickly to provide the a real service.</p>
<p>Using cages and other accessories manufactured in China, a cargo service that delivered containers of product to the UK and a logistics service that would unpack the cargo ships, package and deliver the cages to their customers, Forward was increadibly successful all without handling an actual cage themselves.&nbsp; Its a great example of creating a business from an idea and something all companies should invest more in, whether they be a startup or not.</p>
<h1 id="In_Summary">In Summary</h1><p>The Graduate Developer Community was started by Barry Cranford, CTO  of RecWorks, and only works due to the effort of mentors and the great  people at RecWorks.&nbsp; I enjoy meeting students and getting asked interesting and challenging questions (the simplest ones are usually the most challenging), its a great way to help me understand what I do every day.</p>
<p>If you are a student or recent graduate, then come along to a meet the mentor session.&nbsp; If you have been in industry for 5+ years then volunteer to be a mentor, its amazing fun!</p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="http://3.bp.blogspot.com/-aqvkk1hXMKs/UJKPf9DH41I/AAAAAAAAIfA/6nRGAqOmupI/s1600/gdc-logo.jpg" class="img-thumbnail">
<p>It was great to meet so many eager minds at Kings College during the Meet a Mentor session for the Graduate Developer community.</p>
<p>Kings College is a stunning setting for helping students understand the expectations that will be put upon them when they get into industry.</p>]]>
    
    </summary>
    
      <category term="gdc" scheme="http://jr0cket.co.uk/tags/gdc/"/>
    
      <category term="mentoring" scheme="http://jr0cket.co.uk/tags/mentoring/"/>
    
      <category term="events" scheme="http://jr0cket.co.uk/categories/events/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[London Scala Hackday Powered by Heroku]]></title>
    <link href="http://jr0cket.co.uk/2012/10/london-scala-hackathon-powered-by-heroku.html.html"/>
    <id>http://jr0cket.co.uk/2012/10/london-scala-hackathon-powered-by-heroku.html.html</id>
    <published>2012-10-30T14:32:00.000Z</published>
    <updated>2015-03-18T15:08:46.208Z</updated>
    <content type="html"><![CDATA[<p>Saturday 27th saw a great hackday thanks to <a href="https://twitter.com/rrees" target="_blank" rel="external">Robert Rees</a>, The Guardian and members of the <a href="http://www.meetup.com/london-scala/" target="_blank" rel="external">London Scala user group</a>.  The ambitious challenge was to build an community website where events, conferences, blogs, code repos and  community discussions were all available from one place.</p>
<p>There are several websites out there that do a part of what a community  needs, to this project is trying to help bring all that together in one  place.  So the grand plans include, pulling in content from event sites,  publishing events to sites, register at events with a single touch and  widely distribute your interest and attendance automatically.</p>
<p>Or just have fun hacking on some cool technology and learning something new.</p>
<a id="more"></a>
<h1 id="The_basic_architecture">The basic architecture</h1><p>The hack used the <a href="http://www.playframework.org/" target="_blank" rel="external">Play framework</a>, a recent development that makes developer lives easy when building web applications.  A project had been started a couple of weeks ago using Play Framework 2.0.3 although as there was a new update, we moved to 2.0.4 during the hackathon.</p>
<p><a href="http://www.heroku.com" target="_blank" rel="external">Heroku</a> has been used as the deployment platform as it makes everything really easy.  You can deploy with a commit to a git repository.  So long as your build file works locally, then you can deploy on Heroku.</p>
<p>As we were using Heroku, we made use of <a href="https://addons.heroku.com/" target="_blank" rel="external">several addons availalbe</a>, specifically adding <a href="https://addons.heroku.com/mongolab" target="_blank" rel="external">MongoDB</a> to the design.  MongoDB would be used to pull in information from sites  that had a limited hit rate.  Mongo could also be used for holding any  adhoc data we wanted to keep around.</p>
<h1 id="The_deployment_process">The deployment process</h1><img src="http://1.bp.blogspot.com/-qlVcL6zWbjY/TzFMw8PPiGI/AAAAAAAAEbs/-Ozv0X_6mrQ/s1600/github-logo.png" class="img-topic">
<p>Andy Hicks, our beloved community leader created a play framework project.  Then set up an heroku account, adding a couple of extra people as collaborators to be responsible for pushing changes to live.</p>
<p>Although we could just deploy directly onto heroku, its useful to <a href="http://www.github.com" target="_blank" rel="external">Github</a> as your development repository.</p>
<p>Using Github, you can manage the code base by forking the main repo and submitting change via github pull requests.  This encourages developers to commit often and make smaller changes, essential things if you only have a few hours to get things live.</p>
<h1 id="Continually_deploying">Continually deploying</h1><img src="http://4.bp.blogspot.com/-Gpk2Bz1KOSU/UI_b8kGF5fI/AAAAAAAAIeA/0tjExsTaL6E/s1600/lsug-hackathon-commit-graph-text.png" class="img-topic"> 
<p>Even though we were first commiting changes to github, we still pushed the  changes to Heroku regularly.  I would push changes up to Heroku after each pull request had been successfully merged.</p>
<p>If there were multiple pull requests waiting (usually due to fixing a conflicting pull request) then I’d merge all the outstanding requests before pushing to heroku.</p>
<p>The deployment process was essentially myself pulling changes from the github repository to my laptop, then pushing everything to the heroku git repository.</p>
<h1 id="Keeping_up_to_date">Keeping up to date</h1><p>One trick we learnt to make things easier is the <code>git stash</code> command.  If you have been working away on your code and realised you  were behind master, you can hide away the changes in your working copy  and git pull from the master without loosing your changes.</p>
<p>When you run the command <code>git stash pop</code> then your working copy changes are re-applied and you can resolve any confilcts you have before commiting.</p>
<pre><code>git stash
git pull lsugweb master
git stash <span class="keyword">pop</span> 
&lt;resolve <span class="keyword">any</span> conflicts&gt;
</code></pre><p>Alternatively, if you are doing more experimentation then a branch was created to work  on which would then be merged and committed into master if it was valuable code.</p>
<pre><code>git branch branch-<span class="property">name</span>
&lt;edit you code base&gt;
git merge branch-<span class="property">name</span> master
</code></pre><h1 id="Challenges">Challenges</h1><p><strong>Git experience</strong>:<br>Although git is very popular now, many developers are still learning how to use it effectively, especially when working collaboratively.  </p>
<p><strong>.gitignore</strong>:<br>We had quite a few conflicting pull requests due to the <code>.gitignore</code> file.  So to keep things simple we agreed to keep changes to <code>.gitignore</code> seperate from code commits.  Likewise with any other non-essential config changes.  Add <strong>.gitignore</strong> to <code>.gitignore</code> and just  maintain a managed set of ignore files</p>
<p><strong>Keep commits small:</strong>:<br>Its  was so much easier to merge a series of small changes when you are using pull requests, especially when you have someone managing the queue  and can merge those changes quickly.  The bigger the commit, the longer it takes to merge and backs up your pull requests.  Our largest commit affected 73 files and it took several attempts before we could get it to automatically merge.  At least it gave us chance to talk about the  change in more detail.</p>
<p>It was a great hackathon and thanks to everyone that came along, <a href="https://twitter.com/rrees" target="_blank" rel="external">Robert Rees</a> for orgaising and The Guardian for hosting us.  Why not get yourself to a hackathon and join in the fun, or even organise your own ?</p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Saturday 27th saw a great hackday thanks to <a href="https://twitter.com/rrees">Robert Rees</a>, The Guardian and members of the <a href="http://www.meetup.com/london-scala/">London Scala user group</a>.  The ambitious challenge was to build an community website where events, conferences, blogs, code repos and  community discussions were all available from one place.</p>
<p>There are several websites out there that do a part of what a community  needs, to this project is trying to help bring all that together in one  place.  So the grand plans include, pulling in content from event sites,  publishing events to sites, register at events with a single touch and  widely distribute your interest and attendance automatically.</p>
<p>Or just have fun hacking on some cool technology and learning something new.</p>]]>
    
    </summary>
    
      <category term="hackday" scheme="http://jr0cket.co.uk/tags/hackday/"/>
    
      <category term="heroku" scheme="http://jr0cket.co.uk/tags/heroku/"/>
    
      <category term="scala" scheme="http://jr0cket.co.uk/tags/scala/"/>
    
      <category term="events" scheme="http://jr0cket.co.uk/categories/events/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Using Emacs 24 Server on Mac OSX for Instant Editing]]></title>
    <link href="http://jr0cket.co.uk/2012/10/using-emacs-24-server-on-mac-osx-for.html.html"/>
    <id>http://jr0cket.co.uk/2012/10/using-emacs-24-server-on-mac-osx-for.html.html</id>
    <published>2012-10-21T16:10:00.000Z</published>
    <updated>2015-03-18T15:08:46.212Z</updated>
    <content type="html"><![CDATA[<img src="/images/emacs-logo.png" class="img-thumbnail">
<p>I love using Emacs for Clojure development, although as I add to my configuration file I noticed start-up times have grown by a few milliseconds, which can feel like a life time when you have just thought of a new idea.</p>
<a id="more"></a>
<img src="http://2.bp.blogspot.com/-hZFPgZzKBsE/UIQFvP0lo_I/AAAAAAAAIa4/zxnsCqcdx5k/s1600/emacs-for-macosx-screenshot.png">
<p>To speed things up I am now using <code>emacsclient</code>, which loads your file into a currently running Emacs application (or starts Emacs if its not running).</p>
<p>The following is based on Emacs 24 installed from <a href="http://emacsformacosx.com/" target="_blank" rel="external">Emacs for MacOSX</a> on Mac OSX 10.7.5 but should work for Ubuntu and other Linux/Unix systems.</p>
<h1 id="Setting_up_the_Emacs_server">Setting up the Emacs server</h1><p>The easiest way is to run Emacs and then start up the server once its running using</p>
<pre><code>M-x <span class="keyword">server</span>-start
</code></pre><p>You can also configure emacs to start its server automatically when it run.  Add the following to your <code>~/.emacs.d/init.el</code> file to check if the server is running and start it if it is not:</p>
<img src="http://4.bp.blogspot.com/--E7xbXOboT0/UIP-NeMc7ZI/AAAAAAAAIac/Y0gfXXp65qk/s1600/emacs-config-server-start-check.png" class="img-code">
<p>It is also possible to call emacs on the command line with the <code>--daemon</code> option to start the server as it runs.  You could put this in a script or shell alias.</p>
<h1 id="Legacy_Emacs_on_MacOSX">Legacy Emacs on MacOSX</h1><p>One thing that gets in the way of my Emacs 24 experience is Emacs 22, which seems to be installed by default in Mac OSX.&nbsp; A quick Google gives  little in the way of removing this older version except to remove the  executables from the path.&nbsp; I took a reversable option of renaming the  following files to show the version and get them out of my way.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo mv /usr/bin/emacs/emacs22</span><br><span class="line"></span><br><span class="line">sudo mv /usr/bin/emacsclient emacsclient22 </span><br><span class="line"></span><br><span class="line">sudo mv /usr/bin/emacs-undumped emacs22-undumped</span><br></pre></td></tr></table></figure>
<p>You could just put Emacs 24 at the front of your path, before <code>/usr/bin</code>.  As I have no intention to ever use Emacs 22 its simpler just to move it out of the way.</p>
<h1 id="Putting_Emacs_24_on_the_right_path">Putting Emacs 24 on the right path</h1><p>Assuming you have moved emacs 22 out of the way, the only way to call Emacs from the command line now is to use the full path of the Emacs binary.  So, in my home directory I have a folder called <code>bin</code> that contains all my scripts that save me effort and save my path from becoming messy.  I added this folder to my executable path by adding a <code>~/.profile</code> with the following simple path setting</p>
<p>~/.profile</p>
<img src="http://3.bp.blogspot.com/-xH_08slJ05s/UIQHu_XI4pI/AAAAAAAAIbA/bPva49i4N7I/s1600/macosx-profile-path.png" class="img-code">
<p>In my <code>~/bin</code> folder I created the following script files as a convenience </p>
<pre><code>~<span class="regexp">/bin/emacs</span>
</code></pre><img src="http://2.bp.blogspot.com/-p8nN9yKzwmQ/UIQQ1DDkEbI/AAAAAAAAIb0/X5i4KnmL4xM/s1600/macosx-emacs-script.png" class="img-code">
<pre><code>~<span class="regexp">/bin/emacsclient</span>
</code></pre><img src="http://1.bp.blogspot.com/-SXCybCESHEQ/UIQQ16uw9ZI/AAAAAAAAIb4/dzas9TCor7g/s1600/macosx-emacsclient-script.png" class="img-code">
<pre><code>~<span class="regexp">/bin/emacsclient</span>-terminal
</code></pre><img src="http://4.bp.blogspot.com/-tP7u04MFWC4/UIQP7lx4vXI/AAAAAAAAIbs/cczHAdRdblU/s1600/macosx-emacsclient-terminal-script.png" class="img-code">
<h2 id="Using_EmacsClient">Using EmacsClient</h2><p>Now to the fun stuff.  When ever you want to edit a file you can simply use the command <code>emacsclient</code> and up pops an Emacs window with your file, or using <code>emacsclient-terminal</code> then Emacs displays itself in the current terminal window.</p>
<pre><code>emacsclient <span class="keyword">filename</span>

emacsclient-terminal <span class="keyword">filename</span>
</code></pre><p>If the Emacs server is already running, then you will see your editor window straight away.</p>
<p>If you have not run Emacs in this current session, then EmacsClient will run the Emacs server for you and automatically connect afterwards.&nbsp; This wont be instantaneous, but it will only need to do it once.</p>
<p>To exit the editing, save your work with <code>C-x C-s</code> and close the editor window with <code>C-x k</code></p>
<h2 id="Editing_for_longer_-_set_the_terminal_free">Editing for longer - set the terminal free</h2><p>When you use EmacsClient then the terminal waits for your editing session to end.  This is really convienient when calling Emacsclient from Git, which expects a reply when you have finished editing.</p>
<p>If you want to free up the terminal you are using to call EmacsClient, then use the <code>-n</code> or <code>--no-wait</code> option as so:</p>
<pre><code><span class="title">emacsclient</span> -n filename
</code></pre><img src="http://4.bp.blogspot.com/-SAdRyX6xiDw/T2ENelQF52I/AAAAAAAAGKs/F1VH7LPiJEk/s1600/git-logo-vertical.png" class="img-code">
<h1 id="Setup_for_Git">Setup for Git</h1><p>On my to-do list is using magit from within Emacs.  Until then I am still using the command line to git version my code and push it up to a shared repository.</p>
<p>The only time I need to do anything special for Git and Emacs is when I have a merge conflict, or I forget to add a commit message using the <code>-m</code> option.</p>
<p>In either case, I wanted to be able to open the file in Emacs straight away.  This can be done by setting the global configuration option for the git editor.</p>
<p>On the command line, run the following git command to setup git to call emacsclient when it needs to edit a file:</p>
<img src="http://2.bp.blogspot.com/-LGM6A090Vkc/UIQZF3x67II/AAAAAAAAIcY/IFsbHB8_UHs/s1600/macosx-git-editor-emacsclient.png" class="img-code">
<h1 id="Killing_the_Server_with_emacsclient">Killing the Server with emacsclient</h1><img src="http://2.bp.blogspot.com/-8X8aXlukD_Q/UIQeGiIaPbI/AAAAAAAAIc0/fG05jMdR1SY/s1600/psdoom.gif" class="img-code">
<p>If for some reason you need to kill the Emacs server, you can do so within Emacs or use EmacsClient to close it.</p>
<p>A quick and dirty option that wont save your file, is just to kill emacs </p>
<pre><code>emacsclient <span class="operator">-e</span> <span class="string">'(kill-emacs)'</span>
</code></pre><p>A more elegant option is to save your work and then kill emacs</p>
<pre><code>emacsclient <span class="operator">-e</span> <span class="string">'(client-save-kill-emacs)'</span>
</code></pre><h1 id="In_Summary">In Summary</h1><p>EmacsClient gives a really quick way to use all the power of Emacs and have really fast access to files you are working with on the command line.  There are <a href="http://www.gnu.org/software/emacs/manual/html_node/emacs/emacsclient-Options.html#emacsclient-Options" target="_blank" rel="external">lots of options</a> that come with EmacsClient I have not delved into.&nbsp; I hope to experiment with naming the Emacs server and evaluating between different Emacs frames using the server name.&nbsp; That sound fun.  There is also <code>--eval</code> option, to send Emacs Lisp code to the server to be evaluated. Nice.</p>
<p>What will you doing with EmacsClient?</p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="/images/emacs-logo.png" class="img-thumbnail">
<p>I love using Emacs for Clojure development, although as I add to my configuration file I noticed start-up times have grown by a few milliseconds, which can feel like a life time when you have just thought of a new idea.</p>]]>
    
    </summary>
    
      <category term="emacs" scheme="http://jr0cket.co.uk/tags/emacs/"/>
    
      <category term="git" scheme="http://jr0cket.co.uk/tags/git/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[IBM and the Irony of Community Engagement]]></title>
    <link href="http://jr0cket.co.uk/2012/10/ibm-and-irony-of-community-engagement.html.html"/>
    <id>http://jr0cket.co.uk/2012/10/ibm-and-irony-of-community-engagement.html.html</id>
    <published>2012-10-18T09:05:00.000Z</published>
    <updated>2015-03-18T15:08:46.208Z</updated>
    <content type="html"><![CDATA[<img src="http://2.bp.blogspot.com/-e1e0uoicAo4/UH-93ST7C7I/AAAAAAAAIZc/Mi7ucIjUk5o/s1600/jax-london-2012-logo.png" class="img-thumbnail"> 
<p>At the <a href="http://jaxlondon.com/" target="_blank" rel="external">JAX London conference</a> yesterday <a href="http://uk.linkedin.com/pub/steve-poole/10/803/477" target="_blank" rel="external">Steve Poole of IBM</a> gave an inspiring speech, discussing the value of the right mix of business and open source participation in the development of Java.  The same day, IBM decides to no longer support the yearly <a href="http://conf.londonjavacommunity.co.uk/" target="_blank" rel="external">London Java Community conference</a>.  This does beg the question, does IBM understand the message they are communicating?</p>
<img src="http://blog.sugati.nl/wp-content/uploads/2008/05/duke_evolution-300x139.jpg" class="img-topic"> 
<p>If you give a rallying call to the developers out there to help Oracle and IBM shape Java, then you also need to support that call and not just rely on the resource of that community.</p>
<p>Having asked IBM if the London Java Community could again use their great venue for their yearly conference, it seems the initial reply was yes, yes, yes, followed by a final response that they didn’t have the budget for us to us there venue.  Maybe some one at IBM misunderstood the request. </p>
<img src="http://2.bp.blogspot.com/--aarZnZgEgA/UH_DNtHov_I/AAAAAAAAIZ4/azETKEhZG-k/s1600/ibm-logo.png" class="img-topic"> 
<p>I am sure that IBM contribute to the developer community in many ways, although as an organisation I have the perception it still struggles to understand the value of community, as Oracle once used to do.  To me it seems to let down the amazing individuals at IBM who have contributed greatly to the community as well as a huge opportunity to get developers involved in IBM technology and products.  It seems IBM are not helping themselves be the drivers of community engagement, which is a missed opportunity by them. </p>
<p>Over the last 5 years, the <a href="http://www.meetup.com/Londonjavacommunity/" target="_blank" rel="external">London Java Community</a> have been driving Java developer engagement with activities such as <a href="http://londonjavacommunity.wordpress.com/2011/09/29/adopt-a-jsr/" target="_blank" rel="external">Adopt a JSR</a>, a yearly <a href="http://conf.londonjavacommunity.co.uk/" target="_blank" rel="external">community conference</a> and <a href="http://www.meetup.com/Londonjavacommunity/" target="_blank" rel="external">regular community events</a>.  We have been very grateful to IBM for providing us use of their space for our yearly conference in the past, but it seems IBM dont have the budget this year for one Saturday. This is a bit disappointing as after a long process we only find out now, about 5 weeks before the conference.  Whilst there is no expectation for IBM to provide a venue, it is a great way that they can easily support the Java community in the UK.  It seems doubly disappointing considering the great sessions by Steve Poole and Holly Cummins at JAX London that inspired over 500 developers across a dozen countries to get involved with Java’s future and some cool IBM technology.</p>
<img src="http://3.bp.blogspot.com/-DnE0_spNbOM/T0Y2wWJQlTI/AAAAAAAAEsk/CJs7u9Z4JtY/s1600/big-yawn.jpg" class="img-topic"> 
<p>This situation does highlight how difficult it is for large companies to engage with the community.  If all you do is ask people to help, you probably wont get much reply without the perception of reciprocity!</p>
<p>With the support of IBM, Oracle, Atlassian, O’Reilly and others the London Java Community has been able to get so many more developers engaged with the development of the Java language.  As we have grown to ~3000 members, we can do event more when working with partners that understand the value of community engagement, to help us help developers get involved in the future shape of Java.</p>
<p>Sponsors have real value to gain by investing in community activity and developer groups like the <a href="http://www.meetup.com/Londonjavacommunity/" target="_blank" rel="external">Java</a>, <a href="http://www.meetup.com/london-scala/" target="_blank" rel="external">Scala</a>, <a href="http://www.meetup.com/london-software-craftsmanship/" target="_blank" rel="external">Craftmanship</a> and <a href="https://groups.google.com/group/london-clojurians" target="_blank" rel="external">Clojure</a> communities allow a means to invest in communities in a way that is valued by the developers in those community.</p>
<p>If you want the community to engage with you, you have to stay relevant and give developers inspiration, motivation and the means to get involved.  IBM have given the community a perception of a really big push and fail in the same day.  That is itself is quite a trick.</p>
<p>The <a href="http://conf.londonjavacommunity.co.uk/" target="_blank" rel="external">London Java Community conference</a> is going ahead as planned and registration will open as soon as we confirm a new venue, so please save the date of <strong>Saturday 24th November</strong>.</p>
<p>Thank you<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="http://2.bp.blogspot.com/-e1e0uoicAo4/UH-93ST7C7I/AAAAAAAAIZc/Mi7ucIjUk5o/s1600/jax-london-2012-logo.png" class="img-thumbnail"> 
]]>
    </summary>
    
      <category term="events" scheme="http://jr0cket.co.uk/categories/events/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[London Salesforce Developers - Dreamforce Aftermath]]></title>
    <link href="http://jr0cket.co.uk/2012/10/london-salesforce-developers-dreamforce.html.html"/>
    <id>http://jr0cket.co.uk/2012/10/london-salesforce-developers-dreamforce.html.html</id>
    <published>2012-10-12T16:17:00.000Z</published>
    <updated>2015-03-18T15:08:46.208Z</updated>
    <content type="html"><![CDATA[<img src="http://flic.kr/s/aHsjCfs8vJ" class="img-thumbnail">
<p>Over 7,000 developers flocked to the <a href="http://events.developerforce.com/conference/dreamforce" target="_blank" rel="external">DevZone</a> at this years Dreamforce conference.  I was one of them and along with Adam Seligman, Keir Bowden and Andy Mahood we told tales of our experiences to the <a href="http://www.meetup.com/LondonSalesforceDevelopers/" target="_blank" rel="external">London Salesforce Developer community</a>.</p>
<p>Wes Nolte took charge of the mike and quizzed the panel on their experiences of the event.  Here are the questions that stuck in my memory from the evening</p>
<h1 id="What_was_the_thing_that_got_you_most_excited_about_Dreamforce_?">What was the thing that got you most excited about Dreamforce ?</h1><p>The thing that got to me was the sheer size of it all.  With so many developers around it was great that we had a whole of Moscone West to spread it all out.  There were banks of laptops provided for anyone to get involved in coding workshops and all through the day they were all filled up.</p>
<p>There were so many different things to do, from playing donkey kong to coding, listening to great talks, guided tutorials, code consultations and quizing lots of people from Salesforce and Heroku about their platforms.</p>
<img src="http://2.bp.blogspot.com/-iFOo-wRJGSo/UHg8hxE5Q1I/AAAAAAAAIYc/iSZB4mCa7dk/s1600/dreamforce-devs-tshirt-printing.png" class="img-code">
<p>The biggest problem was what to actually do from so much choice.  Of course there was an app for that too and a chatter stream so you could discuss sessions as well.</p>
<p>If you couldn’t make up your mind you could also queue up and print your own t-shirt!</p>
<p>It was a sign of how open the conference was to have an <a href="http://en.wikipedia.org/wiki/Unconference" target="_blank" rel="external">un-conference</a> section, where anyone could propose a talk.  There was even a theatre dedicated to community related talks.  I met some great guys from Bristol who are starting up their own Salesforce community events.</p>
<h1 id="What_was_your_favourite_session_?">What was your favourite session ?</h1><p>The most entertaining session was by <a href="http://redmonk.com/jgovernor/2012/09/21/dreamforce-12-crazy-big-with-lower-barriers/" target="_blank" rel="external">James Governor from RedMonk</a>, comparing the rise of craft brewing with the rise of developers.  Craft brewing is bringing back the entrepreneurial flavour into beer making and bringing quality product to the market. Developers are doing the same for startups and enterprises around the world.  Calling developers the new kingmakers, James highlights how important developers are and the responsibility we have on our shoulders to support the businesses and projects we are involved in. See article….</p>
<p>I also really enjoyed the live coding challenges from MVP developers and developer evangelists.  There was a great banter as well as great code being bashed out.</p>
<img src="http://1.bp.blogspot.com/-ZwXY5J6tDHc/UHg78yqt0QI/AAAAAAAAIYU/zaOPW6R6pSg/s1600/dreamforce-devs-collaborating.png" class="img-code">
<p>My favourite moment was when one of my colleagues was presenting.  They had a great presentation line up, all using on-line resources and then the wireless failed.  Before the venue tech guys had chance to fix it, someone from the audience donated their phone and the presentation was on again.  I had a warm fuzzy feeling about that!</p>
<p>All through the conference there was a feeling of collaboration and community.  Whether that be debugging each others code through the workshops or collaborating on the mini-hacks.  There was a constant stream of activity every day.</p>
<p>Have a look at <a href="http://developer.force.com/dreamforce" target="_blank" rel="external">all the videos and code</a> produced at the DevZone this year and see for yourself.</p>
<h1 id="What_new_stuff_are_you_already_using_or_want_to_try_straight_away_?">What new stuff are you already using or want to try straight away ?</h1><p>In a nutshell, it has to mobile development.  I remember spending a day in a workshop getting up to speed with development on Android devices and there was still lots to learn by the time I had finished.  That seems like a lifetime compared what I saw at Dreamforce.  Using the Salesforce Touch platform you can easily and quickly build HTML5 and hybrid applications in be finished in hours, not days.</p>
<p>It seemed the hardest thing for mobile development using the Touch platform was registering for your Apple ID.</p>
<h1 id="Turing_the_tables_on_the_audience">Turing the tables on the audience</h1><p>At the end we turned the tables and each panellist got to ask a question of the audience.</p>
<p>I wanted to shorten our name from “Salesforce platform developers user group London”, not the easiest thing to tell your friends about.  From the feedback we got we have changed it to the punchier <a href="http://www.meetup.com/LondonSalesforceDevelopers/" target="_blank" rel="external">London Salesforce Developers</a>, which encompasses the different platforms (heroku, force.com, data,com, etc) under one name.</p>
<h1 id="Summary">Summary</h1><p>Over 80 developers braved the cold October night to hear about out experiences and it was a great social event, made even better by the beer and pizza provided by <a href="http://www.tquila.com/" target="_blank" rel="external">Tquila</a>.</p>
<p>Thanks also to our gratious hosts, 10Gen, for providing the venue.  10Gen are the company behind the popular MongoDB.</p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="http://flic.kr/s/aHsjCfs8vJ" class="img-thumbnail">
<p>Over 7,000 developers flocked to the <a href="http://events.developerforce.]]>
    </summary>
    
      <category term="heroku" scheme="http://jr0cket.co.uk/tags/heroku/"/>
    
      <category term="salesforce" scheme="http://jr0cket.co.uk/tags/salesforce/"/>
    
      <category term="events" scheme="http://jr0cket.co.uk/categories/events/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Agile Cambridge 2012 Aftermath]]></title>
    <link href="http://jr0cket.co.uk/2012/10/agile-cambridge-2012-aftermath.html.html"/>
    <id>http://jr0cket.co.uk/2012/10/agile-cambridge-2012-aftermath.html.html</id>
    <published>2012-10-07T13:25:00.000Z</published>
    <updated>2015-03-18T16:57:25.256Z</updated>
    <content type="html"><![CDATA[<img src="http://2.bp.blogspot.com/-OJOQHJuBmYI/UHFDixa7fvI/AAAAAAAAIXQ/bFfSJSVwgMc/s1600/Agile-Cambridge-2012-600x125.jpg" class="img-thumbnail"> 
<p>An event full of discovery, psychology, therapy sessions, learning, juggling and lots more fun, that in a nutshell was <a href="http://www.agilecambridge.net/ac2012/index.php" target="_blank" rel="external">Agile Cambridge 2012</a>.!  It was great to meet old friends and new as well as sit in on some great sessions.  Here are just a few of my personal highlights from the conference.</p>
<a id="more"></a>
<h1 id="Cynifin_-_dealing_with_uncertainty">Cynifin - dealing with uncertainty</h1><p>In hindsight there was a theme of “dealing with uncertainty” running through the conference, but I  guess when that is the consistent thread in our lives then its hard to  get away from that pattern anyway.</p>
<img src="http://4.bp.blogspot.com/-REbcZKZoyAY/UHFDN_11hgI/AAAAAAAAIXI/8zdrayvVxn8/s1600/Cynefin_framework_Feb_2011.jpeg" class="img-topic">
<p>This is the first time I managed to see Dave Snowden (<a href="http://www.twitter.com/snowded" target="_blank" rel="external">@snowded</a>) talk about his <a href="http://cognitive-edge.com/library/more/video/introduction-to-the-cynefin-framework/" target="_blank" rel="external">Cynifin model</a> for dealing with uncertainty and it was worth the wait.  Whilst I have  seen several people talk about Cynifin before, Dave really conveys the value and importance of the model like no other.</p>
<p>Cynefin  is a Welsh word that means “the place of your multiple belongings”.   Essentially it refers to the fact that there are thousands of things in  your experience that influence your understanding and you can never be  fully aware of them or their affect.</p>
<p>Humans evolved to  make decisions  very quickly as tigers tend not to wait for a project budget before they  eat you.  We are therefore very good at making decisions based on  partial requirements and past experience.  We also focus on the negative  as unfortunately avoidance of failure is more  attractive than following success.</p>
<p>Cynefin is a “sense making” framework to help you understand and manage complex and complicated situations.  Dependent on which of the four domains you are in, simple, complicated, complex &amp; chaotic defines how you should think and analyse the situation.</p>
<p>In a simple domain then you can easily categorise the situation and deal with it appropriately.  A software development team is rarely a simple domain and tends to fluctuate between complex and complicated domains, driven by the unpredictable nature of the businesses they support.</p>
<p>The Cynefin model looks a great way to think about the situations I am in  and its a big take away to try and apply it to my working practices. </p>
<h1 id="Cracking_your_big_rocks">Cracking your big rocks</h1><img src="http://3.bp.blogspot.com/-Z76s9Q39Rq0/UHFFlq-q0TI/AAAAAAAAIXY/PBs-UBiFfQk/s1600/cracking-a-big-rock.png" class="img-theme">
<p>Some tasks seem to us to be so out of our scope, so unfamiliar or painful to  do that we will do anything else to avoid doing them.  These tasks that  become unmovable and intractable in our minds and cause us to waste too much time thinking about not doing them.  These are our Big Rocks!</p>
<p><a href="http://www.agilecambridge.net/ac2012/sessioninfo.php?session=23" target="_blank" rel="external">Cracking your big rocks</a> was another example of a great coaching session, specifically to help us break down some ones big rocks.</p>
<p>Assembling in groups of 4, one person had a big rock, two were coaching and one had a deck of big rock cards.  The coaches helped the person understand  the challenge of their big rock and encouraged them to find ways that they could start to break it down.  The cards were used to help shape  the coaching discussion or highlight concepts the coaches raised.  Cards  covered techniques for framing the problem, keeping rolling, saving progress as well as anti-patterns.</p>
<h2 id="My_Rock">My Rock</h2><p>I was the person with a big rock, mine was writing a book (although much  applied to other writing too).  I never seemed to have enough time to  write the book, was overly concerned about quality and had many other personal and professional tasks pulling me away from the book writing.  The coaches helped me break down the challenge, so rather than writing chapters at a time I started to focus on sections in a chapter.  A section could be done in an hour or less and I could give myself a micro-break and decide whether to continue or re-prioritise.</p>
<p>I’ve  never seen Johanna Hunt and Simon Cromarty talk before and was really impressed with their session, the way they bounce the conversation between themselves and the audience was really engaging.</p>
<h1 id="Coaching_techniques">Coaching techniques</h1><p>Leaning to be an effective coach is very  challenging so its great to learn new techniques to help.  Using the simple props of juggling balls, we coached each other in how to juggle</p>
<img src="http://2.bp.blogspot.com/-A7etqPlGrY8/UHF-1dLiPmI/AAAAAAAAIXs/JFwKYbygf0g/s1600/juggling-hand-and-ball.jpg" class="img-topic"> 
<p>Where no one in a group had any experience of juggling, it was a case of the blind leading the blind.  In this situation one group decided to gate-crash a few other groups, observing what they were doing and learning by figuring out where the juggling experience was.</p>
<p>Coaching someone to juggle is a great exampel of where experience of the skill can bring a lot of value to the coaching.  </p>
<p>In  my group, Simon and Nasim were pretty expert jugglers.  Simon had no problem understanding what I should be doing to juggle, the  challenge for him however was to coach me rather than teach me - two  very different things with different results.  By suggesting things I could try and encouraging me to thing about what I was doing I soon gained more confidence.   Nasim was observing Simon coach me and at the end of my basic juggling  session, he gave feedback on what he saw.  </p>
<p>When Nasim was coaching Simon he was a bit taken aback by Simon’s level of skill and wasnt sure how to coach him as he was already doing so well.  However, by talking to Simon about his juggling technique he was able to  relate to him better a juggler of equal skill.  Also asking Simon what he wanted to achieve from the session helped set a goal for Nasim and Simon to get to, framing the session nicely.  In this case Simon wanted to learn to juggle with 4 balls, so Nasim encouraged Simon to understand his technique so he could build on it and find a way to  achieve his goal.</p>
<p>When it was my turn to coach, I  encouraged Nasim to vary his technique, to go back to basic principles and to gradually introduce more balls into the mix.  I typically asked lots of simple questions about juggling to prevent Nasim from over-thinking the task.  I also asked emotional questions, such as which technique feels better, to gauge if I was helping Nasim keep in a positive state of mind.</p>
<p>By asking us to coach someone in a technique that we were not familiar with was a good way to practice our core skills as a coach, especially our ability to assess the situation, listen and gain understanding of the other persons objectives.  As an agile coach, it is very easy for the agile practices and mindset to dominate the conversation and activities, when doing something that most people were not used to coaching it really helped us get back to  basics.</p>
<h1 id="One_Man_Dan">One Man Dan</h1><p>It was great to hear from Dan North (<a href="http://www.twitter.com/tastapod" target="_blank" rel="external">@tastapod</a>) again, he is always entertaining and thought provoking.  Dan is embarking on his solo career and will be hitting 13 different events  between now and the December holidays.  His talk on embracing uncertainty complemented the opening keynote perfectly and highlighted how unpredictable software development is and why its wasteful to try create order.  Dan discussed the real value that can be attained by  accepting uncertainty and dealing with it gracefully.</p>
<h1 id="In_Summary">In Summary</h1><p>Conferences are a great way to discover new things as  well as catch up with friends and make new ones.  It was great to catch up with Dan North and find out about his new adventures, hear the agile coaching stories from John McFaden and meet Darcy D, another ex-thoughworker mixing UX development and agile coaching.</p>
<p>There were lots of sessions I didn’t get chance to see, so am looking forward to catching up with them on <a href="http://www.infoq.com/" target="_blank" rel="external">InfoQ</a> soon.</p>
<p>Thanks to <a href="http://www.linkedin.com/in/markdalgarnouk" target="_blank" rel="external">Mark Delgarmo</a> and team for organising the event.  Special thanks to <a href="http://www.rallydev.com/" target="_blank" rel="external">Rally Software</a> for sponsoring the social event on Thursday night where I had some great conversations, delicious food and a pint or three of <a href="http://www.samuelsmithsbrewery.co.uk/" target="_blank" rel="external">Samuel Smiths beer</a>!</p>
<p>Hope to see you all at Agile Cambridge 2013!</p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="http://2.bp.blogspot.com/-OJOQHJuBmYI/UHFDixa7fvI/AAAAAAAAIXQ/bFfSJSVwgMc/s1600/Agile-Cambridge-2012-600x125.jpg" class="img-thumbnail"> 
<p>An event full of discovery, psychology, therapy sessions, learning, juggling and lots more fun, that in a nutshell was <a href="http://www.agilecambridge.net/ac2012/index.php">Agile Cambridge 2012</a>.!  It was great to meet old friends and new as well as sit in on some great sessions.  Here are just a few of my personal highlights from the conference.</p>]]>
    
    </summary>
    
      <category term="agile" scheme="http://jr0cket.co.uk/tags/agile/"/>
    
      <category term="agilecambridge" scheme="http://jr0cket.co.uk/tags/agilecambridge/"/>
    
      <category term="events" scheme="http://jr0cket.co.uk/categories/events/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java 7 on Mac OSX - OpenJDK and Oracle]]></title>
    <link href="http://jr0cket.co.uk/2012/09/java-7-on-mac-osx-openjdk-and-oracle.html.html"/>
    <id>http://jr0cket.co.uk/2012/09/java-7-on-mac-osx-openjdk-and-oracle.html.html</id>
    <published>2012-09-24T06:06:00.000Z</published>
    <updated>2015-03-18T15:08:46.208Z</updated>
    <content type="html"><![CDATA[<p>There are many things that make the MacBook pro a nice machine for software developers.  The default version of Java Standard Edition development environment is not one of those things. </p>
<p>Although Java SE does come pre-installed on most OSX versions, it is the <a href="https://blogs.oracle.com/henrik/entry/java_6_eol_h_h" target="_blank" rel="external">soon to be unsupported Java 6 version</a> (unsupported that is without paying Oracle big support fees of course).</p>
<p>Whilst its fairly easy to install Java SE 7 on the Mac, its a little more interesting when it comes to setting it as the default Java runtime environment.  If you also want to try installing OpenJDK 7, then there is a little more discovery to be done when locating the install files.  This article covers the easiest way I found to install Java SE 7 and OpenJDK 7 together.</p>
<h1 id="Install_Java_7">Install Java 7</h1><p>To openjdk or not openjdk, that is the question.  On the Mac there  doesn’t seem to be much in it when it comes to ease of installation.   Both Oracle Java SE 7 and OpenJDK 7 come as dmg files for the Mac,  although the OpenJDK files are not as easy to find. </p>
<img src="http://openjdk.java.net/images/duke-plug.png" class="img-topic">
<ul>
<li><p><strong>Oracle Java SE 7</strong>: <a href="http://jdk7.java.net/download.html" target="_blank" rel="external">http://jdk7.java.net/download.html</a></p>
</li>
<li><p><strong>OpenJDK 7</strong>: <a href="http://code.google.com/p/openjdk-osx-build/" target="_blank" rel="external">http://code.google.com/p/openjdk-osx-build/</a></p>
</li>
</ul>
<blockquote>
<p>There is a website for the <a href="http://openjdk.java.net/" target="_blank" rel="external">OpenJDK project</a>, although most of the content seems a little dated and unless you are running Linux it provides nothing of interest to help you install OpenJDK on the Mac.  Download the latest versions of Java SE 7 and OpenJDK 7 and open the dmg files to install them.</p>
</blockquote>
<h1 id="Configure_the_default_Java_development_environment">Configure the default Java development environment</h1><img src="http://2.bp.blogspot.com/-EefDxGq9ryQ/UF_0CiSUafI/AAAAAAAAIWc/b7zxUylXl28/s1600/macosx-applications-java-preferences.png" class="img-code"> 
<p>OSX allows you to install multiple versions of the Java development environment, a very useful ability especially for testing new versions easily.  In the <code>Applications &gt; Utilities</code> folder there is an application called <code>Java Preferences</code>.</p>
<p>Running this application lets you manage multiple version of the Java development environment, Java SE.</p>
<img src="http://4.bp.blogspot.com/-xV6Z991bVj4/UF_1DIwM0iI/AAAAAAAAIWs/dtT637cbQxY/s1600/macosx-java-preferences-openjdk.png" class="img-code"> 
<p>When a change is made its effects take place immediately, so if you are working in a terminal and change Java versions then you do not need to restart the terminal.</p>
<p>When you have your new versions of Java 7 installed, use the Java Preferences tool to the order around.  If you move an environment to the top of the list it becomes the default choice.</p>
<p>Note that for OpenJDK 7 and Java SE 6 there may be two versions installed.  Use the 64-bit version if you have that option. </p>
<h1 id="Testing">Testing</h1><p>As the changes take effect straight away, you can go to an open terminal and check that Java 7 is the default Java environment using the <code>java -version</code> command.</p>
<img src="http://4.bp.blogspot.com/-rqKNxf-fz4k/UF_2y7mIAjI/AAAAAAAAIW0/xJW5WxRVpBM/s1600/macosx-java7-version-terminal.png" class="img-code"> 
<p>Over the next few months I will see what development life is like with OpenJDK 7 as the default.  OpenJDK seems to be a newer version than Oracle Java SE, so will have more bug fixes and features - and possibly more bugs.</p>
<p>Using OpenJDK will give me an opportunity to feed back my experiences to the community and if I run into trouble, its easy enough to switch over to Oracle Java SE 7.</p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>There are many things that make the MacBook pro a nice machine for software developers.  The default version of Java Standard Edition dev]]>
    </summary>
    
      <category term="java" scheme="http://jr0cket.co.uk/tags/java/"/>
    
      <category term="macosx" scheme="http://jr0cket.co.uk/tags/macosx/"/>
    
      <category term="openjdk" scheme="http://jr0cket.co.uk/tags/openjdk/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Clojure Poetry in Motion - Developers Get Creative Again at London Coding Dojo]]></title>
    <link href="http://jr0cket.co.uk/2012/09/clojure-poetry-in-motion-developers-get.html.html"/>
    <id>http://jr0cket.co.uk/2012/09/clojure-poetry-in-motion-developers-get.html.html</id>
    <published>2012-09-03T04:58:00.000Z</published>
    <updated>2015-03-18T15:08:46.204Z</updated>
    <content type="html"><![CDATA[<img src="http://3.bp.blogspot.com/-2eAwzw2-ujM/T4q6G9NelbI/AAAAAAAAHQk/wecy_sHn7K8/s1600/ldncljdojo.jpg" class="img-thumbnail"> 
<p>The August 2012 coding dojo for the <a href="http://londonclojurians.org/" target="_blank" rel="external">London Clojure community</a> brought some creativity to bear, in terms of Clojure, artistic sentiment and a little bare face cheek.</p>
<p>After the usual round of votes for the evenings challenge - which included grand ideas such as re-implementing Emacs in Clojure! - we settled on a poem generator.  Here is what we got up to.</p>
<a id="more"></a>
<p>Team 4 (<a href="https://github.com/weavejester" target="_blank" rel="external">James</a>, <a href="https://github.com/markuskobler" target="_blank" rel="external">Markus</a>, Daniel and myself) used a massively parallel algorithm with a diverse biological origin for the basis of our Haiku poetry generator.  In other words we used the crowd sourcing of Twitter to source all our Haiku poems.</p>
<p>This was not quite the easy and blatant cheat you may think.  As these Haiku poemes were crowd sourced, then we had to develop our own flitering sytem to get rid of retweets, mentions and lots other stuff in each tweet.  Should we decide to go for funding, the filtering will be a big part of our Intellectual Property!</p>
<h1 id="Anatomy_of_our_solution">Anatomy of our solution</h1><img src="http://3.bp.blogspot.com/-oG4of753dRs/UFVh0TBZkGI/AAAAAAAAIWA/dXuANaoqakE/s1600/clojure-dojo-poetry.png" class="img-code"> 
<p>To connect to the Internet we used the really nice <a href="https://clojars.org/clj-http" target="_blank" rel="external">clj-http</a> project.  There are some twitter specific projects on Github, but we wanted to go for the simplest approach.  Results were obtained from twitter by specifying a <em>twitter-url</em> and using <a href="https://clojars.org/clj-http" target="_blank" rel="external">clj-http</a> to pull back the results and automatically convert them to a json  format.  In fact you get back a persistent map of json results.</p>
<p>Using the magic of the <code>:keyword</code> syntax we just pulled out the information we needed from the json results, specifically the <code>:text</code> keyword.  As it was sourced from twitter, there was a lot of additional information with each tweet such as name, time of tweet, etc which we wanted to strip out.</p>
<p>As each haiku is supposed to be three lines, we used the clojure function <code>split-lines</code> to break up the haiku and check the line count equalled 3.</p>
<p>Once we have some haikus that are the right form, we tidied them up using the handy <code>coljure.string.replace</code> function.  We could have done some regex, but again in terms of simplicity then the replace function worked for us.</p>
<h2 id="Adding_some_graphics">Adding some graphics</h2><p>To add a bit more excitement to our poem  output we decided to put a box around the text.  This was much easier when we used the <code>pad</code> function from <code>clojure.string</code>.</p>
<img src="http://2.bp.blogspot.com/-LHdZ4nUosw4/UFVh-ZipsRI/AAAAAAAAIWI/2_QxwDEVEJ8/s1600/clojure-dojo-poetry-poem.png" class="img-code"> 
<p>Reusing an ansii colour map from <code>clj-logging</code>, we quickly added a bit of colour to our box, making it a lovely green colour.</p>
<p>We also considered <a href="https://github.com/quil/quil" target="_blank" rel="external">quil</a> (a clojure library for graphics <a href="http://processing.org/" target="_blank" rel="external">processing</a>) and <a href="https://github.com/jr0cket/clansi" target="_blank" rel="external">clanci</a> (ansi colour and style codes), but as we only had about 30 seconds left using the colour map was the only option we could finish in time.</p>
<h1 id="Readable_code_using_Threading_(-&gt;_-&gt;&gt;)">Readable code using Threading (-&gt; -&gt;&gt;)</h1><p>We decided to use the threading operator in some of our functions to help us keep the code readable.  Using <code>-&gt;</code> and <code>-&gt;&gt;</code> helps us chain functions together in a particular order.  </p>
<p>Using <code>-&gt;</code> threading macro the resulting value from the evaluation of one function is passed as the first argument to the next function in the list.  This is the same as the <code>doto</code> function (often used to chain events, objects and swing components together). </p>
<p>Using the <code>-&gt;&gt;</code> threading macro, the resulting value from the evaluation of one function is passed as the last argument to the next function in the list.</p>
<h1 id="Using_swarm_coding_is_fun_and_effective">Using swarm coding is fun and effective</h1><p>Swarm coding is where you all code on your own machines, but are actually sharing the same session, in this case Emacs running in the terminal window.  James had an environment ready so we all connected to his machine over secure shell (SSH).  Everyone set an environment variable once connected and then James created the clojure project and opened it with Emacs using the no window option which runs emacs in the console window.</p>
<pre><code>lein <span class="built_in">new</span> poetry          ; Create <span class="operator">a</span> <span class="built_in">new</span> clojure project
cd poetry                
git init                 ; Set up <span class="built_in">version</span> control <span class="operator">with</span> git
emacs -nw project.clj    ; Run emacs <span class="operator">in</span> <span class="operator">the</span> terminal window
</code></pre><p>As we all had the code on our screens we didnt have to squeeze together to see the screen.  With more room its easier to show the REPL and more of the code .  As we all have control over the cursor, we could jump in at any time when we have something to contribute.</p>
<p>I like this approach and can see it working well for a team that communicates well.</p>
<h1 id="In_Summary">In Summary</h1><p>The Clojure dojo still remains one of the best ways to really learn clojure and become more confident when writing applications.  I like the use of the <code>-&gt;</code> and <code>-&gt;&gt;</code> threading operators to help readability, but do wonder if they detract from the functional style.  I guess some more coding will help me decide.</p>
<blockquote>
<p>Update: after doing more clojure coding, I feel that the threading operator is a really great way to keep your code readable.  If you have several nested functions, then code can take longer to read and comprehend.  Using the threading operator then code is very quickly understood.</p>
<p>As you are not changing the design of the code then I dont see the threading macro as detracting from the functional style of Clojure.</p>
</blockquote>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="http://3.bp.blogspot.com/-2eAwzw2-ujM/T4q6G9NelbI/AAAAAAAAHQk/wecy_sHn7K8/s1600/ldncljdojo.jpg" class="img-thumbnail"> 
<p>The August 2012 coding dojo for the <a href="http://londonclojurians.org/">London Clojure community</a> brought some creativity to bear, in terms of Clojure, artistic sentiment and a little bare face cheek.</p>
<p>After the usual round of votes for the evenings challenge - which included grand ideas such as re-implementing Emacs in Clojure! - we settled on a poem generator.  Here is what we got up to.</p>]]>
    
    </summary>
    
      <category term="clojure" scheme="http://jr0cket.co.uk/tags/clojure/"/>
    
      <category term="coding" scheme="http://jr0cket.co.uk/categories/coding/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[I Am Not a Tshirt, I Am a Free Man]]></title>
    <link href="http://jr0cket.co.uk/2012/07/i-am-not-tshirt-i-am-free-man.html.html"/>
    <id>http://jr0cket.co.uk/2012/07/i-am-not-tshirt-i-am-free-man.html.html</id>
    <published>2012-07-31T12:01:00.000Z</published>
    <updated>2015-03-18T15:08:46.208Z</updated>
    <content type="html"><![CDATA[<img src="http://4.bp.blogspot.com/-fYCru6W3z-Q/TzDl82k8gSI/AAAAAAAAEa8/HYrx4dg5TZI/s1600/lolcats-cat-in-chicken-suit.jpg" class="img-thumbnail">
<p>The whirlwind tour of duty with Atlassian is over and I am older and wiser for the experience.  As a famous writer once put it</p>
<blockquote>
<p><a href="http://en.wikiquote.org/wiki/A_Tale_of_Two_Cities" target="_blank" rel="external">“It was the best of times, it was the worst of times, it was the age of wisdom, it was the age of foolishness, it was the epoch of belief”</a> Well it certainly was an interesting experience and I learnt so many valuable things, many of which I never expected to learn.</p>
</blockquote>
<p>Initially I was involved in shaping the role I was undertaking and it was great to brainstorm on how to meaningfully connect with the developer community.  At a certain point though I felt it became all about the marketing and and little about what we were saying and doing, so I regrettably bowed out. </p>
<h1 id="Developing_user_run_user_groups">Developing user run user groups</h1><p>Although <a href="http://www.adaptavist.com/" target="_blank" rel="external">Adaptavist</a>, <a href="http://www.clearvision-cm.com/" target="_blank" rel="external">Clearvision</a> and other partners really helped drive a community around Atlassian in the UK, the lack of active community was a limiting factor for building a strong community around the product and platform.</p>
<p>Although I managed to establish three regional user groups in London, Bristol and Reading, it still remains a challenging issue for Atlassian on how to run a passionate user group around software development tools in the UK.</p>
<p>Part of the challenge is in the different ways that everyone uses these tools.  Also there is some gap between users working with JIRA and those working with Confluence.  The products are quite powerful and often aimed at different areas of the business.  I something wonder if it would have been better to have seperate  JIRA, Confluence and DevTools events.</p>
<h1 id="Blogging_and_outbound_marketing">Blogging and outbound marketing</h1><p>I really relished the opportunity to enhance my blogging skill and now I get over 1,000 hits for some of the posts I create on <a href="http://blog.jr0cket.co.uk/" target="_blank" rel="external">my personal blog website</a>.  Blogging is a great way to get feedback from the community on ideas you have for applying technology.  Blogging also encourages others to share their stories and help the development community grow.</p>
<p>My twitter addiction was under control before I started at Atlassian and using a great tool like HootSuite helped me not waste too much time.  Twitter is an amazing tool for learning and discovering things, but its so easy to spend a whole day there and yet feel you havent achieved anything.  Creating lists and scheduling posts helped me make the most out of the Twitter service. </p>
<p>I also learnt all about outbound marketing, search engine optimisation and other marketing techniques.  All these are useful to help raise awareness about a company or service, however its just a small initial step when the goal is to really get developers to engage with you.  Marketing techniques help developers find your content, but you have to say something that is meaningful to them, something that inspires and engages with them.  It is quite a challenge to come up with meainingful technical content on a regular basis.</p>
<p>I did have a great time putting together useful content for the <a href="http://www.go-git.com/getting-on-git" target="_blank" rel="external">Getting on Git</a> campaign we ran with Clearvision, giving developers a great insight into the benefits of Git adoption.  Rather than just focus on products, we gave a wider understanding of the value of making the switch and practical ideas on how to make that change.  </p>
<h1 id="Getting_practical">Getting practical</h1><p>I believe its very important to do things at a local level to make the community highly active.  While its important to give product updates to the community, its even more important to help them see how it relates to their own challenges.</p>
<p>One of the best ways I found to do this is to get developers practical.  Running workshops, hackathons and developer events aimed at giving people the experience they need to succeed with your products is vital if you want real adoption and raving fans!</p>
<p>An organisation can only do so much to reach out to the community, the more it engages with that community at a local and practical level, the more active that community becomes at growing the community itself.</p>
<h1 id="Thanks">Thanks</h1><p>Again, I’d like to thank everyone at Atlassian for the experience and wish them all the luck in the world.  For a developer, I still think Atlassian is one of the top 10 places to work, especially if you are based in Sydney Australia - its beautiful there!</p>
<img src="http://2.bp.blogspot.com/-0qK1sD0URSY/TyB1RNTkDpI/AAAAAAAAG5o/9I846UDFUno/s1600/2012-01-23+17.21.30.jpg" class="img-topic">
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="external">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="http://4.bp.blogspot.com/-fYCru6W3z-Q/TzDl82k8gSI/AAAAAAAAEa8/HYrx4dg5TZI/s1600/lolcats-cat-in-chicken-suit.jpg" class="img-thumbn]]>
    </summary>
    
      <category term="atlassian" scheme="http://jr0cket.co.uk/tags/atlassian/"/>
    
  </entry>
  
</feed>